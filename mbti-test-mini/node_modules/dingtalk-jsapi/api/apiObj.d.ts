import { beaconPicker$ as biz_ATMBle_beaconPicker } from './biz/ATMBle/beaconPicker';
export { IBizATMBleBeaconPickerParams, IBizATMBleBeaconPickerResult } from './biz/ATMBle/beaconPicker';
import { detectFace$ as biz_ATMBle_detectFace } from './biz/ATMBle/detectFace';
export { IBizATMBleDetectFaceParams, IBizATMBleDetectFaceResult } from './biz/ATMBle/detectFace';
import { detectFaceFullScreen$ as biz_ATMBle_detectFaceFullScreen } from './biz/ATMBle/detectFaceFullScreen';
export { IBizATMBleDetectFaceFullScreenParams, IBizATMBleDetectFaceFullScreenResult } from './biz/ATMBle/detectFaceFullScreen';
import { faceManager$ as biz_ATMBle_faceManager } from './biz/ATMBle/faceManager';
export { IBizATMBleFaceManagerParams, IBizATMBleFaceManagerResult } from './biz/ATMBle/faceManager';
import { punchModePicker$ as biz_ATMBle_punchModePicker } from './biz/ATMBle/punchModePicker';
export { IBizATMBlePunchModePickerParams, IBizATMBlePunchModePickerResult } from './biz/ATMBle/punchModePicker';
import { bindAlipay$ as biz_alipay_bindAlipay } from './biz/alipay/bindAlipay';
export { IBizAlipayBindAlipayParams, IBizAlipayBindAlipayResult } from './biz/alipay/bindAlipay';
import { openAuth$ as biz_alipay_openAuth } from './biz/alipay/openAuth';
export { IBizAlipayOpenAuthParams, IBizAlipayOpenAuthResult } from './biz/alipay/openAuth';
import { pay$ as biz_alipay_pay } from './biz/alipay/pay';
export { IBizAlipayPayParams, IBizAlipayPayResult } from './biz/alipay/pay';
import { openAccountPwdLoginPage$ as biz_auth_openAccountPwdLoginPage } from './biz/auth/openAccountPwdLoginPage';
export { IBizAuthOpenAccountPwdLoginPageParams, IBizAuthOpenAccountPwdLoginPageResult } from './biz/auth/openAccountPwdLoginPage';
import { requestAuthInfo$ as biz_auth_requestAuthInfo } from './biz/auth/requestAuthInfo';
export { IBizAuthRequestAuthInfoParams, IBizAuthRequestAuthInfoResult } from './biz/auth/requestAuthInfo';
import { chooseDateTime$ as biz_calendar_chooseDateTime } from './biz/calendar/chooseDateTime';
export { IBizCalendarChooseDateTimeParams, IBizCalendarChooseDateTimeResult } from './biz/calendar/chooseDateTime';
import { chooseHalfDay$ as biz_calendar_chooseHalfDay } from './biz/calendar/chooseHalfDay';
export { IBizCalendarChooseHalfDayParams, IBizCalendarChooseHalfDayResult } from './biz/calendar/chooseHalfDay';
import { chooseInterval$ as biz_calendar_chooseInterval } from './biz/calendar/chooseInterval';
export { IBizCalendarChooseIntervalParams, IBizCalendarChooseIntervalResult } from './biz/calendar/chooseInterval';
import { chooseOneDay$ as biz_calendar_chooseOneDay } from './biz/calendar/chooseOneDay';
export { IBizCalendarChooseOneDayParams, IBizCalendarChooseOneDayResult } from './biz/calendar/chooseOneDay';
import { chooseConversationByCorpId$ as biz_chat_chooseConversationByCorpId } from './biz/chat/chooseConversationByCorpId';
export { IBizChatChooseConversationByCorpIdParams, IBizChatChooseConversationByCorpIdResult } from './biz/chat/chooseConversationByCorpId';
import { collectSticker$ as biz_chat_collectSticker } from './biz/chat/collectSticker';
export { IBizChatCollectStickerParams, IBizChatCollectStickerResult } from './biz/chat/collectSticker';
import { createSceneGroup$ as biz_chat_createSceneGroup } from './biz/chat/createSceneGroup';
export { IBizChatCreateSceneGroupParams, IBizChatCreateSceneGroupResult } from './biz/chat/createSceneGroup';
import { getRealmCid$ as biz_chat_getRealmCid } from './biz/chat/getRealmCid';
export { IBizChatGetRealmCidParams, IBizChatGetRealmCidResult } from './biz/chat/getRealmCid';
import { locationChatMessage$ as biz_chat_locationChatMessage } from './biz/chat/locationChatMessage';
export { IBizChatLocationChatMessageParams, IBizChatLocationChatMessageResult } from './biz/chat/locationChatMessage';
import { openSingleChat$ as biz_chat_openSingleChat } from './biz/chat/openSingleChat';
export { IBizChatOpenSingleChatParams, IBizChatOpenSingleChatResult } from './biz/chat/openSingleChat';
import { pickConversation$ as biz_chat_pickConversation } from './biz/chat/pickConversation';
export { IBizChatPickConversationParams, IBizChatPickConversationResult } from './biz/chat/pickConversation';
import { sendEmotion$ as biz_chat_sendEmotion } from './biz/chat/sendEmotion';
export { IBizChatSendEmotionParams, IBizChatSendEmotionResult } from './biz/chat/sendEmotion';
import { toConversation$ as biz_chat_toConversation } from './biz/chat/toConversation';
export { IBizChatToConversationParams, IBizChatToConversationResult } from './biz/chat/toConversation';
import { toConversationByOpenConversationId$ as biz_chat_toConversationByOpenConversationId } from './biz/chat/toConversationByOpenConversationId';
export { IBizChatToConversationByOpenConversationIdParams, IBizChatToConversationByOpenConversationIdResult } from './biz/chat/toConversationByOpenConversationId';
import { setData$ as biz_clipboardData_setData } from './biz/clipboardData/setData';
export { IBizClipboardDataSetDataParams, IBizClipboardDataSetDataResult } from './biz/clipboardData/setData';
import { createCloudCall$ as biz_conference_createCloudCall } from './biz/conference/createCloudCall';
export { IBizConferenceCreateCloudCallParams, IBizConferenceCreateCloudCallResult } from './biz/conference/createCloudCall';
import { getCloudCallInfo$ as biz_conference_getCloudCallInfo } from './biz/conference/getCloudCallInfo';
export { IBizConferenceGetCloudCallInfoParams, IBizConferenceGetCloudCallInfoResult } from './biz/conference/getCloudCallInfo';
import { getCloudCallList$ as biz_conference_getCloudCallList } from './biz/conference/getCloudCallList';
export { IBizConferenceGetCloudCallListParams, IBizConferenceGetCloudCallListResult } from './biz/conference/getCloudCallList';
import { videoConfCall$ as biz_conference_videoConfCall } from './biz/conference/videoConfCall';
export { IBizConferenceVideoConfCallParams, IBizConferenceVideoConfCallResult } from './biz/conference/videoConfCall';
import { choose$ as biz_contact_choose } from './biz/contact/choose';
export { IBizContactChooseParams, IBizContactChooseResult } from './biz/contact/choose';
import { chooseMobileContacts$ as biz_contact_chooseMobileContacts } from './biz/contact/chooseMobileContacts';
export { IBizContactChooseMobileContactsParams, IBizContactChooseMobileContactsResult } from './biz/contact/chooseMobileContacts';
import { complexPicker$ as biz_contact_complexPicker } from './biz/contact/complexPicker';
export { IBizContactComplexPickerParams, IBizContactComplexPickerResult } from './biz/contact/complexPicker';
import { createGroup$ as biz_contact_createGroup } from './biz/contact/createGroup';
export { IBizContactCreateGroupParams, IBizContactCreateGroupResult } from './biz/contact/createGroup';
import { departmentsPicker$ as biz_contact_departmentsPicker } from './biz/contact/departmentsPicker';
export { IBizContactDepartmentsPickerParams, IBizContactDepartmentsPickerResult } from './biz/contact/departmentsPicker';
import { externalComplexPicker$ as biz_contact_externalComplexPicker } from './biz/contact/externalComplexPicker';
export { IBizContactExternalComplexPickerParams, IBizContactExternalComplexPickerResult } from './biz/contact/externalComplexPicker';
import { externalEditForm$ as biz_contact_externalEditForm } from './biz/contact/externalEditForm';
export { IBizContactExternalEditFormParams, IBizContactExternalEditFormResult } from './biz/contact/externalEditForm';
import { rolesPicker$ as biz_contact_rolesPicker } from './biz/contact/rolesPicker';
export { IBizContactRolesPickerParams, IBizContactRolesPickerResult } from './biz/contact/rolesPicker';
import { setRule$ as biz_contact_setRule } from './biz/contact/setRule';
export { IBizContactSetRuleParams, IBizContactSetRuleResult } from './biz/contact/setRule';
import { chooseSpaceDir$ as biz_cspace_chooseSpaceDir } from './biz/cspace/chooseSpaceDir';
export { IBizCspaceChooseSpaceDirParams, IBizCspaceChooseSpaceDirResult } from './biz/cspace/chooseSpaceDir';
import { delete$ as biz_cspace_delete } from './biz/cspace/delete';
export { IBizCspaceDeleteParams, IBizCspaceDeleteResult } from './biz/cspace/delete';
import { preview$ as biz_cspace_preview } from './biz/cspace/preview';
export { IBizCspacePreviewParams, IBizCspacePreviewResult } from './biz/cspace/preview';
import { saveFile$ as biz_cspace_saveFile } from './biz/cspace/saveFile';
export { IBizCspaceSaveFileParams, IBizCspaceSaveFileResult } from './biz/cspace/saveFile';
import { choose$ as biz_customContact_choose } from './biz/customContact/choose';
export { IBizCustomContactChooseParams, IBizCustomContactChooseResult } from './biz/customContact/choose';
import { multipleChoose$ as biz_customContact_multipleChoose } from './biz/customContact/multipleChoose';
export { IBizCustomContactMultipleChooseParams, IBizCustomContactMultipleChooseResult } from './biz/customContact/multipleChoose';
import { create$ as biz_ding_create } from './biz/ding/create';
export { IBizDingCreateParams, IBizDingCreateResult } from './biz/ding/create';
import { post$ as biz_ding_post } from './biz/ding/post';
export { IBizDingPostParams, IBizDingPostResult } from './biz/ding/post';
import { finishMiniCourseByRecordId$ as biz_edu_finishMiniCourseByRecordId } from './biz/edu/finishMiniCourseByRecordId';
export { IBizEduFinishMiniCourseByRecordIdParams, IBizEduFinishMiniCourseByRecordIdResult } from './biz/edu/finishMiniCourseByRecordId';
import { getMiniCourseDraftList$ as biz_edu_getMiniCourseDraftList } from './biz/edu/getMiniCourseDraftList';
export { IBizEduGetMiniCourseDraftListParams, IBizEduGetMiniCourseDraftListResult } from './biz/edu/getMiniCourseDraftList';
import { joinClassroom$ as biz_edu_joinClassroom } from './biz/edu/joinClassroom';
export { IBizEduJoinClassroomParams, IBizEduJoinClassroomResult } from './biz/edu/joinClassroom';
import { makeMiniCourse$ as biz_edu_makeMiniCourse } from './biz/edu/makeMiniCourse';
export { IBizEduMakeMiniCourseParams, IBizEduMakeMiniCourseResult } from './biz/edu/makeMiniCourse';
import { newMsgNotificationStatus$ as biz_edu_newMsgNotificationStatus } from './biz/edu/newMsgNotificationStatus';
export { IBizEduNewMsgNotificationStatusParams, IBizEduNewMsgNotificationStatusResult } from './biz/edu/newMsgNotificationStatus';
import { startAuth$ as biz_edu_startAuth } from './biz/edu/startAuth';
export { IBizEduStartAuthParams, IBizEduStartAuthResult } from './biz/edu/startAuth';
import { tokenFaceImg$ as biz_edu_tokenFaceImg } from './biz/edu/tokenFaceImg';
export { IBizEduTokenFaceImgParams, IBizEduTokenFaceImgResult } from './biz/edu/tokenFaceImg';
import { notifyWeex$ as biz_event_notifyWeex } from './biz/event/notifyWeex';
export { IBizEventNotifyWeexParams, IBizEventNotifyWeexResult } from './biz/event/notifyWeex';
import { fetchData$ as biz_intent_fetchData } from './biz/intent/fetchData';
export { IBizIntentFetchDataParams, IBizIntentFetchDataResult } from './biz/intent/fetchData';
import { bind$ as biz_iot_bind } from './biz/iot/bind';
export { IBizIotBindParams, IBizIotBindResult } from './biz/iot/bind';
import { bindMeetingRoom$ as biz_iot_bindMeetingRoom } from './biz/iot/bindMeetingRoom';
export { IBizIotBindMeetingRoomParams, IBizIotBindMeetingRoomResult } from './biz/iot/bindMeetingRoom';
import { getDeviceProperties$ as biz_iot_getDeviceProperties } from './biz/iot/getDeviceProperties';
export { IBizIotGetDevicePropertiesParams, IBizIotGetDevicePropertiesResult } from './biz/iot/getDeviceProperties';
import { invokeThingService$ as biz_iot_invokeThingService } from './biz/iot/invokeThingService';
export { IBizIotInvokeThingServiceParams, IBizIotInvokeThingServiceResult } from './biz/iot/invokeThingService';
import { queryMeetingRoomList$ as biz_iot_queryMeetingRoomList } from './biz/iot/queryMeetingRoomList';
export { IBizIotQueryMeetingRoomListParams, IBizIotQueryMeetingRoomListResult } from './biz/iot/queryMeetingRoomList';
import { setDeviceProperties$ as biz_iot_setDeviceProperties } from './biz/iot/setDeviceProperties';
export { IBizIotSetDevicePropertiesParams, IBizIotSetDevicePropertiesResult } from './biz/iot/setDeviceProperties';
import { unbind$ as biz_iot_unbind } from './biz/iot/unbind';
export { IBizIotUnbindParams, IBizIotUnbindResult } from './biz/iot/unbind';
import { startClassRoom$ as biz_live_startClassRoom } from './biz/live/startClassRoom';
export { IBizLiveStartClassRoomParams, IBizLiveStartClassRoomResult } from './biz/live/startClassRoom';
import { startUnifiedLive$ as biz_live_startUnifiedLive } from './biz/live/startUnifiedLive';
export { IBizLiveStartUnifiedLiveParams, IBizLiveStartUnifiedLiveResult } from './biz/live/startUnifiedLive';
import { locate$ as biz_map_locate } from './biz/map/locate';
export { IBizMapLocateParams, IBizMapLocateResult } from './biz/map/locate';
import { search$ as biz_map_search } from './biz/map/search';
export { IBizMapSearchParams, IBizMapSearchResult } from './biz/map/search';
import { view$ as biz_map_view } from './biz/map/view';
export { IBizMapViewParams, IBizMapViewResult } from './biz/map/view';
import { compressVideo$ as biz_media_compressVideo } from './biz/media/compressVideo';
export { IBizMediaCompressVideoParams, IBizMediaCompressVideoResult } from './biz/media/compressVideo';
import { openApp$ as biz_microApp_openApp } from './biz/microApp/openApp';
export { IBizMicroAppOpenAppParams, IBizMicroAppOpenAppResult } from './biz/microApp/openApp';
import { close$ as biz_navigation_close } from './biz/navigation/close';
export { IBizNavigationCloseParams, IBizNavigationCloseResult } from './biz/navigation/close';
import { goBack$ as biz_navigation_goBack } from './biz/navigation/goBack';
export { IBizNavigationGoBackParams, IBizNavigationGoBackResult } from './biz/navigation/goBack';
import { hideBar$ as biz_navigation_hideBar } from './biz/navigation/hideBar';
export { IBizNavigationHideBarParams, IBizNavigationHideBarResult } from './biz/navigation/hideBar';
import { navigateToMiniProgram$ as biz_navigation_navigateToMiniProgram } from './biz/navigation/navigateToMiniProgram';
export { IBizNavigationNavigateToMiniProgramParams, IBizNavigationNavigateToMiniProgramResult } from './biz/navigation/navigateToMiniProgram';
import { quit$ as biz_navigation_quit } from './biz/navigation/quit';
export { IBizNavigationQuitParams, IBizNavigationQuitResult } from './biz/navigation/quit';
import { replace$ as biz_navigation_replace } from './biz/navigation/replace';
export { IBizNavigationReplaceParams, IBizNavigationReplaceResult } from './biz/navigation/replace';
import { setIcon$ as biz_navigation_setIcon } from './biz/navigation/setIcon';
export { IBizNavigationSetIconParams, IBizNavigationSetIconResult } from './biz/navigation/setIcon';
import { setLeft$ as biz_navigation_setLeft } from './biz/navigation/setLeft';
export { IBizNavigationSetLeftParams, IBizNavigationSetLeftResult } from './biz/navigation/setLeft';
import { setMenu$ as biz_navigation_setMenu } from './biz/navigation/setMenu';
export { IBizNavigationSetMenuParams, IBizNavigationSetMenuResult } from './biz/navigation/setMenu';
import { setRight$ as biz_navigation_setRight } from './biz/navigation/setRight';
export { IBizNavigationSetRightParams, IBizNavigationSetRightResult } from './biz/navigation/setRight';
import { setTitle$ as biz_navigation_setTitle } from './biz/navigation/setTitle';
export { IBizNavigationSetTitleParams, IBizNavigationSetTitleResult } from './biz/navigation/setTitle';
import { componentPunchFromPartner$ as biz_pbp_componentPunchFromPartner } from './biz/pbp/componentPunchFromPartner';
export { IBizPbpComponentPunchFromPartnerParams, IBizPbpComponentPunchFromPartnerResult } from './biz/pbp/componentPunchFromPartner';
import { startMatchRuleFromPartner$ as biz_pbp_startMatchRuleFromPartner } from './biz/pbp/startMatchRuleFromPartner';
export { IBizPbpStartMatchRuleFromPartnerParams, IBizPbpStartMatchRuleFromPartnerResult } from './biz/pbp/startMatchRuleFromPartner';
import { stopMatchRuleFromPartner$ as biz_pbp_stopMatchRuleFromPartner } from './biz/pbp/stopMatchRuleFromPartner';
export { IBizPbpStopMatchRuleFromPartnerParams, IBizPbpStopMatchRuleFromPartnerResult } from './biz/pbp/stopMatchRuleFromPartner';
import { getRealtimeTracingStatus$ as biz_realm_getRealtimeTracingStatus } from './biz/realm/getRealtimeTracingStatus';
export { IBizRealmGetRealtimeTracingStatusParams, IBizRealmGetRealtimeTracingStatusResult } from './biz/realm/getRealtimeTracingStatus';
import { getUserExclusiveInfo$ as biz_realm_getUserExclusiveInfo } from './biz/realm/getUserExclusiveInfo';
export { IBizRealmGetUserExclusiveInfoParams, IBizRealmGetUserExclusiveInfoResult } from './biz/realm/getUserExclusiveInfo';
import { startRealtimeTracing$ as biz_realm_startRealtimeTracing } from './biz/realm/startRealtimeTracing';
export { IBizRealmStartRealtimeTracingParams, IBizRealmStartRealtimeTracingResult } from './biz/realm/startRealtimeTracing';
import { stopRealtimeTracing$ as biz_realm_stopRealtimeTracing } from './biz/realm/stopRealtimeTracing';
export { IBizRealmStopRealtimeTracingParams, IBizRealmStopRealtimeTracingResult } from './biz/realm/stopRealtimeTracing';
import { subscribe$ as biz_realm_subscribe } from './biz/realm/subscribe';
export { IBizRealmSubscribeParams, IBizRealmSubscribeResult } from './biz/realm/subscribe';
import { unsubscribe$ as biz_realm_unsubscribe } from './biz/realm/unsubscribe';
export { IBizRealmUnsubscribeParams, IBizRealmUnsubscribeResult } from './biz/realm/unsubscribe';
import { getInfo$ as biz_resource_getInfo } from './biz/resource/getInfo';
export { IBizResourceGetInfoParams, IBizResourceGetInfoResult } from './biz/resource/getInfo';
import { reportDebugMessage$ as biz_resource_reportDebugMessage } from './biz/resource/reportDebugMessage';
export { IBizResourceReportDebugMessageParams, IBizResourceReportDebugMessageResult } from './biz/resource/reportDebugMessage';
import { addShortCut$ as biz_shortCut_addShortCut } from './biz/shortCut/addShortCut';
export { IBizShortCutAddShortCutParams, IBizShortCutAddShortCutResult } from './biz/shortCut/addShortCut';
import { closeUnpayOrder$ as biz_store_closeUnpayOrder } from './biz/store/closeUnpayOrder';
export { IBizStoreCloseUnpayOrderParams, IBizStoreCloseUnpayOrderResult } from './biz/store/closeUnpayOrder';
import { createOrder$ as biz_store_createOrder } from './biz/store/createOrder';
export { IBizStoreCreateOrderParams, IBizStoreCreateOrderResult } from './biz/store/createOrder';
import { getPayUrl$ as biz_store_getPayUrl } from './biz/store/getPayUrl';
export { IBizStoreGetPayUrlParams, IBizStoreGetPayUrlResult } from './biz/store/getPayUrl';
import { inquiry$ as biz_store_inquiry } from './biz/store/inquiry';
export { IBizStoreInquiryParams, IBizStoreInquiryResult } from './biz/store/inquiry';
import { isTab$ as biz_tabwindow_isTab } from './biz/tabwindow/isTab';
export { IBizTabwindowIsTabParams, IBizTabwindowIsTabResult } from './biz/tabwindow/isTab';
import { call$ as biz_telephone_call } from './biz/telephone/call';
export { IBizTelephoneCallParams, IBizTelephoneCallResult } from './biz/telephone/call';
import { checkBizCall$ as biz_telephone_checkBizCall } from './biz/telephone/checkBizCall';
export { IBizTelephoneCheckBizCallParams, IBizTelephoneCheckBizCallResult } from './biz/telephone/checkBizCall';
import { quickCallList$ as biz_telephone_quickCallList } from './biz/telephone/quickCallList';
export { IBizTelephoneQuickCallListParams, IBizTelephoneQuickCallListResult } from './biz/telephone/quickCallList';
import { showCallMenu$ as biz_telephone_showCallMenu } from './biz/telephone/showCallMenu';
export { IBizTelephoneShowCallMenuParams, IBizTelephoneShowCallMenuResult } from './biz/telephone/showCallMenu';
import { checkPassword$ as biz_user_checkPassword } from './biz/user/checkPassword';
export { IBizUserCheckPasswordParams, IBizUserCheckPasswordResult } from './biz/user/checkPassword';
import { get$ as biz_user_get } from './biz/user/get';
export { IBizUserGetParams, IBizUserGetResult } from './biz/user/get';
import { callComponent$ as biz_util_callComponent } from './biz/util/callComponent';
export { IBizUtilCallComponentParams, IBizUtilCallComponentResult } from './biz/util/callComponent';
import { chooseImage$ as biz_util_chooseImage } from './biz/util/chooseImage';
export { IBizUtilChooseImageParams, IBizUtilChooseImageResult } from './biz/util/chooseImage';
import { chosen$ as biz_util_chosen } from './biz/util/chosen';
export { IBizUtilChosenParams, IBizUtilChosenResult } from './biz/util/chosen';
import { clearWebStoreCache$ as biz_util_clearWebStoreCache } from './biz/util/clearWebStoreCache';
export { IBizUtilClearWebStoreCacheParams, IBizUtilClearWebStoreCacheResult } from './biz/util/clearWebStoreCache';
import { closePreviewImage$ as biz_util_closePreviewImage } from './biz/util/closePreviewImage';
export { IBizUtilClosePreviewImageParams, IBizUtilClosePreviewImageResult } from './biz/util/closePreviewImage';
import { compressImage$ as biz_util_compressImage } from './biz/util/compressImage';
export { IBizUtilCompressImageParams, IBizUtilCompressImageResult } from './biz/util/compressImage';
import { datepicker$ as biz_util_datepicker } from './biz/util/datepicker';
export { IBizUtilDatepickerParams, IBizUtilDatepickerResult } from './biz/util/datepicker';
import { datetimepicker$ as biz_util_datetimepicker } from './biz/util/datetimepicker';
export { IBizUtilDatetimepickerParams, IBizUtilDatetimepickerResult } from './biz/util/datetimepicker';
import { decrypt$ as biz_util_decrypt } from './biz/util/decrypt';
export { IBizUtilDecryptParams, IBizUtilDecryptResult } from './biz/util/decrypt';
import { downloadFile$ as biz_util_downloadFile } from './biz/util/downloadFile';
export { IBizUtilDownloadFileParams, IBizUtilDownloadFileResult } from './biz/util/downloadFile';
import { encrypt$ as biz_util_encrypt } from './biz/util/encrypt';
export { IBizUtilEncryptParams, IBizUtilEncryptResult } from './biz/util/encrypt';
import { getPerfInfo$ as biz_util_getPerfInfo } from './biz/util/getPerfInfo';
export { IBizUtilGetPerfInfoParams, IBizUtilGetPerfInfoResult } from './biz/util/getPerfInfo';
import { invokeWorkbench$ as biz_util_invokeWorkbench } from './biz/util/invokeWorkbench';
export { IBizUtilInvokeWorkbenchParams, IBizUtilInvokeWorkbenchResult } from './biz/util/invokeWorkbench';
import { isEnableGPUAcceleration$ as biz_util_isEnableGPUAcceleration } from './biz/util/isEnableGPUAcceleration';
export { IBizUtilIsEnableGPUAccelerationParams, IBizUtilIsEnableGPUAccelerationResult } from './biz/util/isEnableGPUAcceleration';
import { isLocalFileExist$ as biz_util_isLocalFileExist } from './biz/util/isLocalFileExist';
export { IBizUtilIsLocalFileExistParams, IBizUtilIsLocalFileExistResult } from './biz/util/isLocalFileExist';
import { multiSelect$ as biz_util_multiSelect } from './biz/util/multiSelect';
export { IBizUtilMultiSelectParams, IBizUtilMultiSelectResult } from './biz/util/multiSelect';
import { open$ as biz_util_open } from './biz/util/open';
export { IBizUtilOpenParams, IBizUtilOpenResult } from './biz/util/open';
import { openLink$ as biz_util_openLink } from './biz/util/openLink';
export { IBizUtilOpenLinkParams, IBizUtilOpenLinkResult } from './biz/util/openLink';
import { openLocalFile$ as biz_util_openLocalFile } from './biz/util/openLocalFile';
export { IBizUtilOpenLocalFileParams, IBizUtilOpenLocalFileResult } from './biz/util/openLocalFile';
import { openModal$ as biz_util_openModal } from './biz/util/openModal';
export { IBizUtilOpenModalParams, IBizUtilOpenModalResult } from './biz/util/openModal';
import { openSlidePanel$ as biz_util_openSlidePanel } from './biz/util/openSlidePanel';
export { IBizUtilOpenSlidePanelParams, IBizUtilOpenSlidePanelResult } from './biz/util/openSlidePanel';
import { presentWindow$ as biz_util_presentWindow } from './biz/util/presentWindow';
export { IBizUtilPresentWindowParams, IBizUtilPresentWindowResult } from './biz/util/presentWindow';
import { previewImage$ as biz_util_previewImage } from './biz/util/previewImage';
export { IBizUtilPreviewImageParams, IBizUtilPreviewImageResult } from './biz/util/previewImage';
import { previewVideo$ as biz_util_previewVideo } from './biz/util/previewVideo';
export { IBizUtilPreviewVideoParams, IBizUtilPreviewVideoResult } from './biz/util/previewVideo';
import { saveImage$ as biz_util_saveImage } from './biz/util/saveImage';
export { IBizUtilSaveImageParams, IBizUtilSaveImageResult } from './biz/util/saveImage';
import { scan$ as biz_util_scan } from './biz/util/scan';
export { IBizUtilScanParams, IBizUtilScanResult } from './biz/util/scan';
import { scanCard$ as biz_util_scanCard } from './biz/util/scanCard';
export { IBizUtilScanCardParams, IBizUtilScanCardResult } from './biz/util/scanCard';
import { setGPUAcceleration$ as biz_util_setGPUAcceleration } from './biz/util/setGPUAcceleration';
export { IBizUtilSetGPUAccelerationParams, IBizUtilSetGPUAccelerationResult } from './biz/util/setGPUAcceleration';
import { setScreenBrightnessAndKeepOn$ as biz_util_setScreenBrightnessAndKeepOn } from './biz/util/setScreenBrightnessAndKeepOn';
export { IBizUtilSetScreenBrightnessAndKeepOnParams, IBizUtilSetScreenBrightnessAndKeepOnResult } from './biz/util/setScreenBrightnessAndKeepOn';
import { setScreenKeepOn$ as biz_util_setScreenKeepOn } from './biz/util/setScreenKeepOn';
export { IBizUtilSetScreenKeepOnParams, IBizUtilSetScreenKeepOnResult } from './biz/util/setScreenKeepOn';
import { share$ as biz_util_share } from './biz/util/share';
export { IBizUtilShareParams, IBizUtilShareResult } from './biz/util/share';
import { shareImage$ as biz_util_shareImage } from './biz/util/shareImage';
export { IBizUtilShareImageParams, IBizUtilShareImageResult } from './biz/util/shareImage';
import { startDocSign$ as biz_util_startDocSign } from './biz/util/startDocSign';
export { IBizUtilStartDocSignParams, IBizUtilStartDocSignResult } from './biz/util/startDocSign';
import { systemShare$ as biz_util_systemShare } from './biz/util/systemShare';
export { IBizUtilSystemShareParams, IBizUtilSystemShareResult } from './biz/util/systemShare';
import { timepicker$ as biz_util_timepicker } from './biz/util/timepicker';
export { IBizUtilTimepickerParams, IBizUtilTimepickerResult } from './biz/util/timepicker';
import { uploadAttachment$ as biz_util_uploadAttachment } from './biz/util/uploadAttachment';
export { IBizUtilUploadAttachmentParams, IBizUtilUploadAttachmentResult } from './biz/util/uploadAttachment';
import { uploadFile$ as biz_util_uploadFile } from './biz/util/uploadFile';
export { IBizUtilUploadFileParams, IBizUtilUploadFileResult } from './biz/util/uploadFile';
import { uploadImage$ as biz_util_uploadImage } from './biz/util/uploadImage';
export { IBizUtilUploadImageParams, IBizUtilUploadImageResult } from './biz/util/uploadImage';
import { uploadImageFromCamera$ as biz_util_uploadImageFromCamera } from './biz/util/uploadImageFromCamera';
export { IBizUtilUploadImageFromCameraParams, IBizUtilUploadImageFromCameraResult } from './biz/util/uploadImageFromCamera';
import { ut$ as biz_util_ut } from './biz/util/ut';
export { IBizUtilUtParams, IBizUtilUtResult } from './biz/util/ut';
import { openBindIDCard$ as biz_verify_openBindIDCard } from './biz/verify/openBindIDCard';
export { IBizVerifyOpenBindIDCardParams, IBizVerifyOpenBindIDCardResult } from './biz/verify/openBindIDCard';
import { startAuth$ as biz_verify_startAuth } from './biz/verify/startAuth';
export { IBizVerifyStartAuthParams, IBizVerifyStartAuthResult } from './biz/verify/startAuth';
import { getWatermarkInfo$ as biz_watermarkCamera_getWatermarkInfo } from './biz/watermarkCamera/getWatermarkInfo';
export { IBizWatermarkCameraGetWatermarkInfoParams, IBizWatermarkCameraGetWatermarkInfoResult } from './biz/watermarkCamera/getWatermarkInfo';
import { setWatermarkInfo$ as biz_watermarkCamera_setWatermarkInfo } from './biz/watermarkCamera/setWatermarkInfo';
export { IBizWatermarkCameraSetWatermarkInfoParams, IBizWatermarkCameraSetWatermarkInfoResult } from './biz/watermarkCamera/setWatermarkInfo';
import { requestAuthCode$ as channel_permission_requestAuthCode } from './channel/permission/requestAuthCode';
export { IChannelPermissionRequestAuthCodeParams, IChannelPermissionRequestAuthCodeResult } from './channel/permission/requestAuthCode';
import { clearShake$ as device_accelerometer_clearShake } from './device/accelerometer/clearShake';
export { IDeviceAccelerometerClearShakeParams, IDeviceAccelerometerClearShakeResult } from './device/accelerometer/clearShake';
import { watchShake$ as device_accelerometer_watchShake } from './device/accelerometer/watchShake';
export { IDeviceAccelerometerWatchShakeParams, IDeviceAccelerometerWatchShakeResult } from './device/accelerometer/watchShake';
import { download$ as device_audio_download } from './device/audio/download';
export { IDeviceAudioDownloadParams, IDeviceAudioDownloadResult } from './device/audio/download';
import { onPlayEnd$ as device_audio_onPlayEnd } from './device/audio/onPlayEnd';
export { IDeviceAudioOnPlayEndParams, IDeviceAudioOnPlayEndResult } from './device/audio/onPlayEnd';
import { onRecordEnd$ as device_audio_onRecordEnd } from './device/audio/onRecordEnd';
export { IDeviceAudioOnRecordEndParams, IDeviceAudioOnRecordEndResult } from './device/audio/onRecordEnd';
import { pause$ as device_audio_pause } from './device/audio/pause';
export { IDeviceAudioPauseParams, IDeviceAudioPauseResult } from './device/audio/pause';
import { play$ as device_audio_play } from './device/audio/play';
export { IDeviceAudioPlayParams, IDeviceAudioPlayResult } from './device/audio/play';
import { resume$ as device_audio_resume } from './device/audio/resume';
export { IDeviceAudioResumeParams, IDeviceAudioResumeResult } from './device/audio/resume';
import { startRecord$ as device_audio_startRecord } from './device/audio/startRecord';
export { IDeviceAudioStartRecordParams, IDeviceAudioStartRecordResult } from './device/audio/startRecord';
import { stop$ as device_audio_stop } from './device/audio/stop';
export { IDeviceAudioStopParams, IDeviceAudioStopResult } from './device/audio/stop';
import { stopRecord$ as device_audio_stopRecord } from './device/audio/stopRecord';
export { IDeviceAudioStopRecordParams, IDeviceAudioStopRecordResult } from './device/audio/stopRecord';
import { translateVoice$ as device_audio_translateVoice } from './device/audio/translateVoice';
export { IDeviceAudioTranslateVoiceParams, IDeviceAudioTranslateVoiceResult } from './device/audio/translateVoice';
import { getInterface$ as device_base_getInterface } from './device/base/getInterface';
export { IDeviceBaseGetInterfaceParams, IDeviceBaseGetInterfaceResult } from './device/base/getInterface';
import { getPhoneInfo$ as device_base_getPhoneInfo } from './device/base/getPhoneInfo';
export { IDeviceBaseGetPhoneInfoParams, IDeviceBaseGetPhoneInfoResult } from './device/base/getPhoneInfo';
import { getUUID$ as device_base_getUUID } from './device/base/getUUID';
export { IDeviceBaseGetUUIDParams, IDeviceBaseGetUUIDResult } from './device/base/getUUID';
import { getWifiStatus$ as device_base_getWifiStatus } from './device/base/getWifiStatus';
export { IDeviceBaseGetWifiStatusParams, IDeviceBaseGetWifiStatusResult } from './device/base/getWifiStatus';
import { openSystemSetting$ as device_base_openSystemSetting } from './device/base/openSystemSetting';
export { IDeviceBaseOpenSystemSettingParams, IDeviceBaseOpenSystemSettingResult } from './device/base/openSystemSetting';
import { getNetworkType$ as device_connection_getNetworkType } from './device/connection/getNetworkType';
export { IDeviceConnectionGetNetworkTypeParams, IDeviceConnectionGetNetworkTypeResult } from './device/connection/getNetworkType';
import { checkPermission$ as device_geolocation_checkPermission } from './device/geolocation/checkPermission';
export { IDeviceGeolocationCheckPermissionParams, IDeviceGeolocationCheckPermissionResult } from './device/geolocation/checkPermission';
import { get$ as device_geolocation_get } from './device/geolocation/get';
export { IDeviceGeolocationGetParams, IDeviceGeolocationGetResult } from './device/geolocation/get';
import { start$ as device_geolocation_start } from './device/geolocation/start';
export { IDeviceGeolocationStartParams, IDeviceGeolocationStartResult } from './device/geolocation/start';
import { status$ as device_geolocation_status } from './device/geolocation/status';
export { IDeviceGeolocationStatusParams, IDeviceGeolocationStatusResult } from './device/geolocation/status';
import { stop$ as device_geolocation_stop } from './device/geolocation/stop';
export { IDeviceGeolocationStopParams, IDeviceGeolocationStopResult } from './device/geolocation/stop';
import { checkInstalledApps$ as device_launcher_checkInstalledApps } from './device/launcher/checkInstalledApps';
export { IDeviceLauncherCheckInstalledAppsParams, IDeviceLauncherCheckInstalledAppsResult } from './device/launcher/checkInstalledApps';
import { launchApp$ as device_launcher_launchApp } from './device/launcher/launchApp';
export { IDeviceLauncherLaunchAppParams, IDeviceLauncherLaunchAppResult } from './device/launcher/launchApp';
import { nfcRead$ as device_nfc_nfcRead } from './device/nfc/nfcRead';
export { IDeviceNfcNfcReadParams, IDeviceNfcNfcReadResult } from './device/nfc/nfcRead';
import { nfcStop$ as device_nfc_nfcStop } from './device/nfc/nfcStop';
export { IDeviceNfcNfcStopParams, IDeviceNfcNfcStopResult } from './device/nfc/nfcStop';
import { nfcWrite$ as device_nfc_nfcWrite } from './device/nfc/nfcWrite';
export { IDeviceNfcNfcWriteParams, IDeviceNfcNfcWriteResult } from './device/nfc/nfcWrite';
import { actionSheet$ as device_notification_actionSheet } from './device/notification/actionSheet';
export { IDeviceNotificationActionSheetParams, IDeviceNotificationActionSheetResult } from './device/notification/actionSheet';
import { alert$ as device_notification_alert } from './device/notification/alert';
export { IDeviceNotificationAlertParams, IDeviceNotificationAlertResult } from './device/notification/alert';
import { confirm$ as device_notification_confirm } from './device/notification/confirm';
export { IDeviceNotificationConfirmParams, IDeviceNotificationConfirmResult } from './device/notification/confirm';
import { extendModal$ as device_notification_extendModal } from './device/notification/extendModal';
export { IDeviceNotificationExtendModalParams, IDeviceNotificationExtendModalResult } from './device/notification/extendModal';
import { hidePreloader$ as device_notification_hidePreloader } from './device/notification/hidePreloader';
export { IDeviceNotificationHidePreloaderParams, IDeviceNotificationHidePreloaderResult } from './device/notification/hidePreloader';
import { modal$ as device_notification_modal } from './device/notification/modal';
export { IDeviceNotificationModalParams, IDeviceNotificationModalResult } from './device/notification/modal';
import { prompt$ as device_notification_prompt } from './device/notification/prompt';
export { IDeviceNotificationPromptParams, IDeviceNotificationPromptResult } from './device/notification/prompt';
import { showPreloader$ as device_notification_showPreloader } from './device/notification/showPreloader';
export { IDeviceNotificationShowPreloaderParams, IDeviceNotificationShowPreloaderResult } from './device/notification/showPreloader';
import { toast$ as device_notification_toast } from './device/notification/toast';
export { IDeviceNotificationToastParams, IDeviceNotificationToastResult } from './device/notification/toast';
import { vibrate$ as device_notification_vibrate } from './device/notification/vibrate';
export { IDeviceNotificationVibrateParams, IDeviceNotificationVibrateResult } from './device/notification/vibrate';
import { insetAdjust$ as device_screen_insetAdjust } from './device/screen/insetAdjust';
export { IDeviceScreenInsetAdjustParams, IDeviceScreenInsetAdjustResult } from './device/screen/insetAdjust';
import { resetView$ as device_screen_resetView } from './device/screen/resetView';
export { IDeviceScreenResetViewParams, IDeviceScreenResetViewResult } from './device/screen/resetView';
import { rotateView$ as device_screen_rotateView } from './device/screen/rotateView';
export { IDeviceScreenRotateViewParams, IDeviceScreenRotateViewResult } from './device/screen/rotateView';
import { keepAlive$ as media_voiceRecorder_keepAlive } from './media/voiceRecorder/keepAlive';
export { IMediaVoiceRecorderKeepAliveParams, IMediaVoiceRecorderKeepAliveResult } from './media/voiceRecorder/keepAlive';
import { pause$ as media_voiceRecorder_pause } from './media/voiceRecorder/pause';
export { IMediaVoiceRecorderPauseParams, IMediaVoiceRecorderPauseResult } from './media/voiceRecorder/pause';
import { resume$ as media_voiceRecorder_resume } from './media/voiceRecorder/resume';
export { IMediaVoiceRecorderResumeParams, IMediaVoiceRecorderResumeResult } from './media/voiceRecorder/resume';
import { start$ as media_voiceRecorder_start } from './media/voiceRecorder/start';
export { IMediaVoiceRecorderStartParams, IMediaVoiceRecorderStartResult } from './media/voiceRecorder/start';
import { stop$ as media_voiceRecorder_stop } from './media/voiceRecorder/stop';
export { IMediaVoiceRecorderStopParams, IMediaVoiceRecorderStopResult } from './media/voiceRecorder/stop';
import { loginGovNet$ as net_bjGovApn_loginGovNet } from './net/bjGovApn/loginGovNet';
export { INetBjGovApnLoginGovNetParams, INetBjGovApnLoginGovNetResult } from './net/bjGovApn/loginGovNet';
import { fetch$ as runtime_message_fetch } from './runtime/message/fetch';
export { IRuntimeMessageFetchParams, IRuntimeMessageFetchResult } from './runtime/message/fetch';
import { post$ as runtime_message_post } from './runtime/message/post';
export { IRuntimeMessagePostParams, IRuntimeMessagePostResult } from './runtime/message/post';
import { getLoadTime$ as runtime_monitor_getLoadTime } from './runtime/monitor/getLoadTime';
export { IRuntimeMonitorGetLoadTimeParams, IRuntimeMonitorGetLoadTimeResult } from './runtime/monitor/getLoadTime';
import { requestAuthCode$ as runtime_permission_requestAuthCode } from './runtime/permission/requestAuthCode';
export { IRuntimePermissionRequestAuthCodeParams, IRuntimePermissionRequestAuthCodeResult } from './runtime/permission/requestAuthCode';
import { requestOperateAuthCode$ as runtime_permission_requestOperateAuthCode } from './runtime/permission/requestOperateAuthCode';
export { IRuntimePermissionRequestOperateAuthCodeParams, IRuntimePermissionRequestOperateAuthCodeResult } from './runtime/permission/requestOperateAuthCode';
import { plain$ as ui_input_plain } from './ui/input/plain';
export { IUiInputPlainParams, IUiInputPlainResult } from './ui/input/plain';
import { addToFloat$ as ui_multitask_addToFloat } from './ui/multitask/addToFloat';
export { IUiMultitaskAddToFloatParams, IUiMultitaskAddToFloatResult } from './ui/multitask/addToFloat';
import { removeFromFloat$ as ui_multitask_removeFromFloat } from './ui/multitask/removeFromFloat';
export { IUiMultitaskRemoveFromFloatParams, IUiMultitaskRemoveFromFloatResult } from './ui/multitask/removeFromFloat';
import { close$ as ui_nav_close } from './ui/nav/close';
export { IUiNavCloseParams, IUiNavCloseResult } from './ui/nav/close';
import { getCurrentId$ as ui_nav_getCurrentId } from './ui/nav/getCurrentId';
export { IUiNavGetCurrentIdParams, IUiNavGetCurrentIdResult } from './ui/nav/getCurrentId';
import { go$ as ui_nav_go } from './ui/nav/go';
export { IUiNavGoParams, IUiNavGoResult } from './ui/nav/go';
import { preload$ as ui_nav_preload } from './ui/nav/preload';
export { IUiNavPreloadParams, IUiNavPreloadResult } from './ui/nav/preload';
import { recycle$ as ui_nav_recycle } from './ui/nav/recycle';
export { IUiNavRecycleParams, IUiNavRecycleResult } from './ui/nav/recycle';
import { setColors$ as ui_progressBar_setColors } from './ui/progressBar/setColors';
export { IUiProgressBarSetColorsParams, IUiProgressBarSetColorsResult } from './ui/progressBar/setColors';
import { disable$ as ui_pullToRefresh_disable } from './ui/pullToRefresh/disable';
export { IUiPullToRefreshDisableParams, IUiPullToRefreshDisableResult } from './ui/pullToRefresh/disable';
import { enable$ as ui_pullToRefresh_enable } from './ui/pullToRefresh/enable';
export { IUiPullToRefreshEnableParams, IUiPullToRefreshEnableResult } from './ui/pullToRefresh/enable';
import { stop$ as ui_pullToRefresh_stop } from './ui/pullToRefresh/stop';
export { IUiPullToRefreshStopParams, IUiPullToRefreshStopResult } from './ui/pullToRefresh/stop';
import { disable$ as ui_webViewBounce_disable } from './ui/webViewBounce/disable';
export { IUiWebViewBounceDisableParams, IUiWebViewBounceDisableResult } from './ui/webViewBounce/disable';
import { enable$ as ui_webViewBounce_enable } from './ui/webViewBounce/enable';
export { IUiWebViewBounceEnableParams, IUiWebViewBounceEnableResult } from './ui/webViewBounce/enable';
import { getItem$ as util_domainStorage_getItem } from './util/domainStorage/getItem';
export { IUtilDomainStorageGetItemParams, IUtilDomainStorageGetItemResult } from './util/domainStorage/getItem';
import { removeItem$ as util_domainStorage_removeItem } from './util/domainStorage/removeItem';
export { IUtilDomainStorageRemoveItemParams, IUtilDomainStorageRemoveItemResult } from './util/domainStorage/removeItem';
import { setItem$ as util_domainStorage_setItem } from './util/domainStorage/setItem';
export { IUtilDomainStorageSetItemParams, IUtilDomainStorageSetItemResult } from './util/domainStorage/setItem';
import { getData$ as util_openTemporary_getData } from './util/openTemporary/getData';
export { IUtilOpenTemporaryGetDataParams, IUtilOpenTemporaryGetDataResult } from './util/openTemporary/getData';
export declare const apiObj: {
    biz: {
        ATMBle: {
            beaconPicker: typeof biz_ATMBle_beaconPicker;
            detectFace: typeof biz_ATMBle_detectFace;
            detectFaceFullScreen: typeof biz_ATMBle_detectFaceFullScreen;
            faceManager: typeof biz_ATMBle_faceManager;
            punchModePicker: typeof biz_ATMBle_punchModePicker;
        };
        alipay: {
            bindAlipay: typeof biz_alipay_bindAlipay;
            openAuth: typeof biz_alipay_openAuth;
            pay: typeof biz_alipay_pay;
        };
        auth: {
            openAccountPwdLoginPage: typeof biz_auth_openAccountPwdLoginPage;
            requestAuthInfo: typeof biz_auth_requestAuthInfo;
        };
        calendar: {
            chooseDateTime: typeof biz_calendar_chooseDateTime;
            chooseHalfDay: typeof biz_calendar_chooseHalfDay;
            chooseInterval: typeof biz_calendar_chooseInterval;
            chooseOneDay: typeof biz_calendar_chooseOneDay;
        };
        chat: {
            chooseConversationByCorpId: typeof biz_chat_chooseConversationByCorpId;
            collectSticker: typeof biz_chat_collectSticker;
            createSceneGroup: typeof biz_chat_createSceneGroup;
            getRealmCid: typeof biz_chat_getRealmCid;
            locationChatMessage: typeof biz_chat_locationChatMessage;
            openSingleChat: typeof biz_chat_openSingleChat;
            pickConversation: typeof biz_chat_pickConversation;
            sendEmotion: typeof biz_chat_sendEmotion;
            toConversation: typeof biz_chat_toConversation;
            toConversationByOpenConversationId: typeof biz_chat_toConversationByOpenConversationId;
        };
        clipboardData: {
            setData: typeof biz_clipboardData_setData;
        };
        conference: {
            createCloudCall: typeof biz_conference_createCloudCall;
            getCloudCallInfo: typeof biz_conference_getCloudCallInfo;
            getCloudCallList: typeof biz_conference_getCloudCallList;
            videoConfCall: typeof biz_conference_videoConfCall;
        };
        contact: {
            choose: typeof biz_contact_choose;
            chooseMobileContacts: typeof biz_contact_chooseMobileContacts;
            complexPicker: typeof biz_contact_complexPicker;
            createGroup: typeof biz_contact_createGroup;
            departmentsPicker: typeof biz_contact_departmentsPicker;
            externalComplexPicker: typeof biz_contact_externalComplexPicker;
            externalEditForm: typeof biz_contact_externalEditForm;
            rolesPicker: typeof biz_contact_rolesPicker;
            setRule: typeof biz_contact_setRule;
        };
        cspace: {
            chooseSpaceDir: typeof biz_cspace_chooseSpaceDir;
            delete: typeof biz_cspace_delete;
            preview: typeof biz_cspace_preview;
            saveFile: typeof biz_cspace_saveFile;
        };
        customContact: {
            choose: typeof biz_customContact_choose;
            multipleChoose: typeof biz_customContact_multipleChoose;
        };
        ding: {
            create: typeof biz_ding_create;
            post: typeof biz_ding_post;
        };
        edu: {
            finishMiniCourseByRecordId: typeof biz_edu_finishMiniCourseByRecordId;
            getMiniCourseDraftList: typeof biz_edu_getMiniCourseDraftList;
            joinClassroom: typeof biz_edu_joinClassroom;
            makeMiniCourse: typeof biz_edu_makeMiniCourse;
            newMsgNotificationStatus: typeof biz_edu_newMsgNotificationStatus;
            startAuth: typeof biz_edu_startAuth;
            tokenFaceImg: typeof biz_edu_tokenFaceImg;
        };
        event: {
            notifyWeex: typeof biz_event_notifyWeex;
        };
        intent: {
            fetchData: typeof biz_intent_fetchData;
        };
        iot: {
            bind: typeof biz_iot_bind;
            bindMeetingRoom: typeof biz_iot_bindMeetingRoom;
            getDeviceProperties: typeof biz_iot_getDeviceProperties;
            invokeThingService: typeof biz_iot_invokeThingService;
            queryMeetingRoomList: typeof biz_iot_queryMeetingRoomList;
            setDeviceProperties: typeof biz_iot_setDeviceProperties;
            unbind: typeof biz_iot_unbind;
        };
        live: {
            startClassRoom: typeof biz_live_startClassRoom;
            startUnifiedLive: typeof biz_live_startUnifiedLive;
        };
        map: {
            locate: typeof biz_map_locate;
            search: typeof biz_map_search;
            view: typeof biz_map_view;
        };
        media: {
            compressVideo: typeof biz_media_compressVideo;
        };
        microApp: {
            openApp: typeof biz_microApp_openApp;
        };
        navigation: {
            close: typeof biz_navigation_close;
            goBack: typeof biz_navigation_goBack;
            hideBar: typeof biz_navigation_hideBar;
            navigateToMiniProgram: typeof biz_navigation_navigateToMiniProgram;
            quit: typeof biz_navigation_quit;
            replace: typeof biz_navigation_replace;
            setIcon: typeof biz_navigation_setIcon;
            setLeft: typeof biz_navigation_setLeft;
            setMenu: typeof biz_navigation_setMenu;
            setRight: typeof biz_navigation_setRight;
            setTitle: typeof biz_navigation_setTitle;
        };
        pbp: {
            componentPunchFromPartner: typeof biz_pbp_componentPunchFromPartner;
            startMatchRuleFromPartner: typeof biz_pbp_startMatchRuleFromPartner;
            stopMatchRuleFromPartner: typeof biz_pbp_stopMatchRuleFromPartner;
        };
        realm: {
            getRealtimeTracingStatus: typeof biz_realm_getRealtimeTracingStatus;
            getUserExclusiveInfo: typeof biz_realm_getUserExclusiveInfo;
            startRealtimeTracing: typeof biz_realm_startRealtimeTracing;
            stopRealtimeTracing: typeof biz_realm_stopRealtimeTracing;
            subscribe: typeof biz_realm_subscribe;
            unsubscribe: typeof biz_realm_unsubscribe;
        };
        resource: {
            getInfo: typeof biz_resource_getInfo;
            reportDebugMessage: typeof biz_resource_reportDebugMessage;
        };
        shortCut: {
            addShortCut: typeof biz_shortCut_addShortCut;
        };
        store: {
            closeUnpayOrder: typeof biz_store_closeUnpayOrder;
            createOrder: typeof biz_store_createOrder;
            getPayUrl: typeof biz_store_getPayUrl;
            inquiry: typeof biz_store_inquiry;
        };
        tabwindow: {
            isTab: typeof biz_tabwindow_isTab;
        };
        telephone: {
            call: typeof biz_telephone_call;
            checkBizCall: typeof biz_telephone_checkBizCall;
            quickCallList: typeof biz_telephone_quickCallList;
            showCallMenu: typeof biz_telephone_showCallMenu;
        };
        user: {
            checkPassword: typeof biz_user_checkPassword;
            get: typeof biz_user_get;
        };
        util: {
            callComponent: typeof biz_util_callComponent;
            chooseImage: typeof biz_util_chooseImage;
            chosen: typeof biz_util_chosen;
            clearWebStoreCache: typeof biz_util_clearWebStoreCache;
            closePreviewImage: typeof biz_util_closePreviewImage;
            compressImage: typeof biz_util_compressImage;
            datepicker: typeof biz_util_datepicker;
            datetimepicker: typeof biz_util_datetimepicker;
            decrypt: typeof biz_util_decrypt;
            downloadFile: typeof biz_util_downloadFile;
            encrypt: typeof biz_util_encrypt;
            getPerfInfo: typeof biz_util_getPerfInfo;
            invokeWorkbench: typeof biz_util_invokeWorkbench;
            isEnableGPUAcceleration: typeof biz_util_isEnableGPUAcceleration;
            isLocalFileExist: typeof biz_util_isLocalFileExist;
            multiSelect: typeof biz_util_multiSelect;
            open: typeof biz_util_open;
            openLink: typeof biz_util_openLink;
            openLocalFile: typeof biz_util_openLocalFile;
            openModal: typeof biz_util_openModal;
            openSlidePanel: typeof biz_util_openSlidePanel;
            presentWindow: typeof biz_util_presentWindow;
            previewImage: typeof biz_util_previewImage;
            previewVideo: typeof biz_util_previewVideo;
            saveImage: typeof biz_util_saveImage;
            scan: typeof biz_util_scan;
            scanCard: typeof biz_util_scanCard;
            setGPUAcceleration: typeof biz_util_setGPUAcceleration;
            setScreenBrightnessAndKeepOn: typeof biz_util_setScreenBrightnessAndKeepOn;
            setScreenKeepOn: typeof biz_util_setScreenKeepOn;
            share: typeof biz_util_share;
            shareImage: typeof biz_util_shareImage;
            startDocSign: typeof biz_util_startDocSign;
            systemShare: typeof biz_util_systemShare;
            timepicker: typeof biz_util_timepicker;
            uploadAttachment: typeof biz_util_uploadAttachment;
            uploadFile: typeof biz_util_uploadFile;
            uploadImage: typeof biz_util_uploadImage;
            uploadImageFromCamera: typeof biz_util_uploadImageFromCamera;
            ut: typeof biz_util_ut;
        };
        verify: {
            openBindIDCard: typeof biz_verify_openBindIDCard;
            startAuth: typeof biz_verify_startAuth;
        };
        watermarkCamera: {
            getWatermarkInfo: typeof biz_watermarkCamera_getWatermarkInfo;
            setWatermarkInfo: typeof biz_watermarkCamera_setWatermarkInfo;
        };
    };
    channel: {
        permission: {
            requestAuthCode: typeof channel_permission_requestAuthCode;
        };
    };
    device: {
        accelerometer: {
            clearShake: typeof device_accelerometer_clearShake;
            watchShake: typeof device_accelerometer_watchShake;
        };
        audio: {
            download: typeof device_audio_download;
            onPlayEnd: typeof device_audio_onPlayEnd;
            onRecordEnd: typeof device_audio_onRecordEnd;
            pause: typeof device_audio_pause;
            play: typeof device_audio_play;
            resume: typeof device_audio_resume;
            startRecord: typeof device_audio_startRecord;
            stop: typeof device_audio_stop;
            stopRecord: typeof device_audio_stopRecord;
            translateVoice: typeof device_audio_translateVoice;
        };
        base: {
            getInterface: typeof device_base_getInterface;
            getPhoneInfo: typeof device_base_getPhoneInfo;
            getUUID: typeof device_base_getUUID;
            getWifiStatus: typeof device_base_getWifiStatus;
            openSystemSetting: typeof device_base_openSystemSetting;
        };
        connection: {
            getNetworkType: typeof device_connection_getNetworkType;
        };
        geolocation: {
            checkPermission: typeof device_geolocation_checkPermission;
            get: typeof device_geolocation_get;
            start: typeof device_geolocation_start;
            status: typeof device_geolocation_status;
            stop: typeof device_geolocation_stop;
        };
        launcher: {
            checkInstalledApps: typeof device_launcher_checkInstalledApps;
            launchApp: typeof device_launcher_launchApp;
        };
        nfc: {
            nfcRead: typeof device_nfc_nfcRead;
            nfcStop: typeof device_nfc_nfcStop;
            nfcWrite: typeof device_nfc_nfcWrite;
        };
        notification: {
            actionSheet: typeof device_notification_actionSheet;
            alert: typeof device_notification_alert;
            confirm: typeof device_notification_confirm;
            extendModal: typeof device_notification_extendModal;
            hidePreloader: typeof device_notification_hidePreloader;
            modal: typeof device_notification_modal;
            prompt: typeof device_notification_prompt;
            showPreloader: typeof device_notification_showPreloader;
            toast: typeof device_notification_toast;
            vibrate: typeof device_notification_vibrate;
        };
        screen: {
            insetAdjust: typeof device_screen_insetAdjust;
            resetView: typeof device_screen_resetView;
            rotateView: typeof device_screen_rotateView;
        };
    };
    media: {
        voiceRecorder: {
            keepAlive: typeof media_voiceRecorder_keepAlive;
            pause: typeof media_voiceRecorder_pause;
            resume: typeof media_voiceRecorder_resume;
            start: typeof media_voiceRecorder_start;
            stop: typeof media_voiceRecorder_stop;
        };
    };
    net: {
        bjGovApn: {
            loginGovNet: typeof net_bjGovApn_loginGovNet;
        };
    };
    runtime: {
        message: {
            fetch: typeof runtime_message_fetch;
            post: typeof runtime_message_post;
        };
        monitor: {
            getLoadTime: typeof runtime_monitor_getLoadTime;
        };
        permission: {
            requestAuthCode: typeof runtime_permission_requestAuthCode;
            requestOperateAuthCode: typeof runtime_permission_requestOperateAuthCode;
        };
    };
    ui: {
        input: {
            plain: typeof ui_input_plain;
        };
        multitask: {
            addToFloat: typeof ui_multitask_addToFloat;
            removeFromFloat: typeof ui_multitask_removeFromFloat;
        };
        nav: {
            close: typeof ui_nav_close;
            getCurrentId: typeof ui_nav_getCurrentId;
            go: typeof ui_nav_go;
            preload: typeof ui_nav_preload;
            recycle: typeof ui_nav_recycle;
        };
        progressBar: {
            setColors: typeof ui_progressBar_setColors;
        };
        pullToRefresh: {
            disable: typeof ui_pullToRefresh_disable;
            enable: typeof ui_pullToRefresh_enable;
            stop: typeof ui_pullToRefresh_stop;
        };
        webViewBounce: {
            disable: typeof ui_webViewBounce_disable;
            enable: typeof ui_webViewBounce_enable;
        };
    };
    util: {
        domainStorage: {
            getItem: typeof util_domainStorage_getItem;
            removeItem: typeof util_domainStorage_removeItem;
            setItem: typeof util_domainStorage_setItem;
        };
        openTemporary: {
            getData: typeof util_openTemporary_getData;
        };
    };
};
