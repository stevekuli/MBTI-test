import { IntersectionObserver } from '@tarojs/taro';
import * as CSS from 'csstype';
import { defaultItemKey } from "../../utils/index.js";
import ListSet from "./list-set.js";
import { VirtualListProps } from "./index.js";
interface IProps extends Partial<VirtualListProps> {
    children?: VirtualListProps['item'];
    direction?: 'ltr' | 'rtl' | 'horizontal' | 'vertical';
    itemKey?: typeof defaultItemKey;
    itemTagName?: string;
    innerTagName?: string;
    outerTagName?: string;
    innerRef?: React.Ref<HTMLElement> | string;
    outerRef?: React.Ref<HTMLElement> | string;
    onItemsRendered?: TFunc;
    shouldResetStyleCacheOnItemSizeChange?: boolean;
    outerWrapper?: React.FC;
}
declare class Preset {
    protected props: IProps;
    protected refresh?: TFunc;
    itemList: ListSet;
    _id: string;
    _observer: Record<string, IntersectionObserver>;
    constructor(props: IProps, refresh?: TFunc);
    wrapperField: {
        scrollLeft: number;
        scrollTop: number;
        scrollHeight: number;
        scrollWidth: number;
        clientHeight: number;
        clientWidth: number;
        diffOffset: number;
    };
    diffList: number[];
    init(props: IProps): void;
    update(props: IProps): void;
    updateWrapper(id: string): Promise<void>;
    set id(id: string);
    get id(): string;
    get isHorizontal(): boolean;
    get isRtl(): boolean;
    get isRelative(): boolean;
    get isBrick(): boolean;
    get placeholderCount(): number;
    get outerElement(): string | import("react").ComponentType<{}>;
    get innerElement(): string | import("react").ComponentType<{}>;
    get itemElement(): string | import("react").ComponentType<{}>;
    get field(): Record<string, number>;
    set field(o: Record<string, number>);
    get enhanced(): true;
    isShaking(diff?: number): boolean;
    resetCache(): void;
    getItemStyleCache: import("memoize-one").MemoizedFn<(this: any, itemIndex?: number, itemSize?: IProps['itemSize'] | false, _flag?: any) => CSS.Properties<string | number, string & {}>>;
    getItemStyle(index: number): CSS.Properties<string | number, string & {}>;
    boundaryDetection(): void;
    boundaryDetectionHelper({ component, event, id, }: {
        component?: TaroGeneral.IAnyObject;
        event?: () => void;
        id: string;
    }): IntersectionObserver;
    dispose(): void;
}
export { IProps, Preset as default };
