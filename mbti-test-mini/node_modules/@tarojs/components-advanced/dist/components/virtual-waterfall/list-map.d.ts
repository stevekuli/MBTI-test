import { IProps } from "./preset.js";
type TProps = Pick<IProps, 'column' | 'columnWidth' | 'width' | 'height' | 'itemCount' | 'itemData' | 'itemSize' | 'overscanDistance' | 'unlimitedSize'>;
declare class ListMap {
    protected props: TProps;
    protected refresh?: TFunc;
    _columns: number;
    _columnMap: [number, number][][];
    _items: string[];
    mode?: 'normal' | 'function' | 'unlimited';
    minItemSize: number;
    maxItemSize: number;
    defaultSize: number;
    wrapperHeight: number;
    wrapperWidth: number;
    columns: number;
    columnWidth: string | number;
    refreshCounter: number;
    constructor(props: TProps, refresh?: TFunc);
    get isNormalMode(): boolean;
    get isFunctionMode(): boolean;
    get isUnlimitedMode(): boolean;
    get length(): number;
    get overscan(): number;
    get columnsSize(): any[];
    get maxColumnSize(): number;
    get minColumnSize(): number;
    get maxColumnIndex(): number;
    get minColumnIndex(): number;
    update(props: TProps): void;
    updateColumns(columns?: number): void;
    updateItem(itemIndex: number): any;
    setSizeByPosition(column?: number, row?: number, itemSize?: number, itemIndex?: number): void;
    getSize(itemIndex?: number): number;
    getSizeByPosition(column?: number, row?: number, itemIndex?: number): number;
    // 不支持 normal 模式
    getColumnList(column: number): [number, number][];
    getColumnLength(columnIndex: number): number;
    getColumnSize(columnIndex?: number): number;
    getItemPosition(itemIndex: number): false | number[];
    getItemIndexByPosition(column?: number, row?: number): number;
    getOffsetSize(itemIndex: number): number;
    getOffsetSizeByPosition(column?: number, row?: number): number;
    getOffsetSizeCache: import("memoize-one").MemoizedFn<(this: any, column: any, row: any, _flag?: any) => number>;
    getStartIndex(column: number, offset: number): number;
    getStopIndex(column: number, offset: number, start?: number): number;
    getRangeToRender(direction: 'forward' | 'backward', column: number, offset: number, block?: boolean): number[];
    getOffsetForIndexAndAlignment(index: number, align: string, scrollOffset: number): number;
    compareSizeByPosition(column?: number, row?: number, size?: number): boolean;
}
export { ListMap as default };
