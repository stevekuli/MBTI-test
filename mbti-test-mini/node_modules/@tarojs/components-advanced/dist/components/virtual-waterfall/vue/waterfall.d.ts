import Preset from "../preset.js";
declare const _default: import("vue").DefineComponent<{
    id: StringConstructor;
    height: {
        type: (NumberConstructor | StringConstructor)[];
        required: true;
    };
    width: {
        type: (NumberConstructor | StringConstructor)[];
        required: true;
    };
    column: NumberConstructor;
    columnWidth: NumberConstructor;
    item: {
        required: true;
    };
    itemCount: {
        type: NumberConstructor;
        required: true;
    };
    itemData: {
        type: ArrayConstructor;
        required: true;
    };
    itemKey: FunctionConstructor;
    itemSize: {
        type: (NumberConstructor | FunctionConstructor)[];
        required: true;
    };
    unlimitedSize: {
        type: BooleanConstructor;
        default: boolean;
    };
    queryPrefix: {
        type: StringConstructor;
        default: string;
    };
    position: {
        type: StringConstructor;
        default: string;
    };
    initialScrollOffset: {
        type: NumberConstructor;
        default: number;
    };
    overscanDistance: {
        type: NumberConstructor;
        default: number;
    };
    placeholderCount: {
        type: NumberConstructor;
        default: number;
    };
    useIsScrolling: {
        type: BooleanConstructor;
        default: boolean;
    };
    enhanced: {
        type: BooleanConstructor;
        default: boolean;
    };
    shouldResetStyleCacheOnItemSizeChange: {
        type: BooleanConstructor;
        default: boolean;
    };
    outerElementType: {
        type: StringConstructor;
        default: string;
    };
    innerElementType: {
        type: StringConstructor;
        default: string;
    };
    itemElementType: {
        type: StringConstructor;
        default: string;
    };
    outerTagName: StringConstructor;
    innerTagName: StringConstructor;
    itemTagName: StringConstructor;
    outerRef: StringConstructor;
    onScrollNative: FunctionConstructor;
    onItemsRendered: FunctionConstructor;
}, unknown, {
    itemMap: import("../list-map.js").default;
    preset: Preset;
    instance: import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        id: StringConstructor;
        height: {
            type: (NumberConstructor | StringConstructor)[];
            required: true;
        };
        width: {
            type: (NumberConstructor | StringConstructor)[];
            required: true;
        };
        column: NumberConstructor;
        columnWidth: NumberConstructor;
        item: {
            required: true;
        };
        itemCount: {
            type: NumberConstructor;
            required: true;
        };
        itemData: {
            type: ArrayConstructor;
            required: true;
        };
        itemKey: FunctionConstructor;
        itemSize: {
            type: (NumberConstructor | FunctionConstructor)[];
            required: true;
        };
        unlimitedSize: {
            type: BooleanConstructor;
            default: boolean;
        };
        queryPrefix: {
            type: StringConstructor;
            default: string;
        };
        position: {
            type: StringConstructor;
            default: string;
        };
        initialScrollOffset: {
            type: NumberConstructor;
            default: number;
        };
        overscanDistance: {
            type: NumberConstructor;
            default: number;
        };
        placeholderCount: {
            type: NumberConstructor;
            default: number;
        };
        useIsScrolling: {
            type: BooleanConstructor;
            default: boolean;
        };
        enhanced: {
            type: BooleanConstructor;
            default: boolean;
        };
        shouldResetStyleCacheOnItemSizeChange: {
            type: BooleanConstructor;
            default: boolean;
        };
        outerElementType: {
            type: StringConstructor;
            default: string;
        };
        innerElementType: {
            type: StringConstructor;
            default: string;
        };
        itemElementType: {
            type: StringConstructor;
            default: string;
        };
        outerTagName: StringConstructor;
        innerTagName: StringConstructor;
        itemTagName: StringConstructor;
        outerRef: StringConstructor;
        onScrollNative: FunctionConstructor;
        onItemsRendered: FunctionConstructor;
    }>> & {}, {}, {}, {}, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, Readonly<import("vue").ExtractPropTypes<{
        id: StringConstructor;
        height: {
            type: (NumberConstructor | StringConstructor)[];
            required: true;
        };
        width: {
            type: (NumberConstructor | StringConstructor)[];
            required: true;
        };
        column: NumberConstructor;
        columnWidth: NumberConstructor;
        item: {
            required: true;
        };
        itemCount: {
            type: NumberConstructor;
            required: true;
        };
        itemData: {
            type: ArrayConstructor;
            required: true;
        };
        itemKey: FunctionConstructor;
        itemSize: {
            type: (NumberConstructor | FunctionConstructor)[];
            required: true;
        };
        unlimitedSize: {
            type: BooleanConstructor;
            default: boolean;
        };
        queryPrefix: {
            type: StringConstructor;
            default: string;
        };
        position: {
            type: StringConstructor;
            default: string;
        };
        initialScrollOffset: {
            type: NumberConstructor;
            default: number;
        };
        overscanDistance: {
            type: NumberConstructor;
            default: number;
        };
        placeholderCount: {
            type: NumberConstructor;
            default: number;
        };
        useIsScrolling: {
            type: BooleanConstructor;
            default: boolean;
        };
        enhanced: {
            type: BooleanConstructor;
            default: boolean;
        };
        shouldResetStyleCacheOnItemSizeChange: {
            type: BooleanConstructor;
            default: boolean;
        };
        outerElementType: {
            type: StringConstructor;
            default: string;
        };
        innerElementType: {
            type: StringConstructor;
            default: string;
        };
        itemElementType: {
            type: StringConstructor;
            default: string;
        };
        outerTagName: StringConstructor;
        innerTagName: StringConstructor;
        itemTagName: StringConstructor;
        outerRef: StringConstructor;
        onScrollNative: FunctionConstructor;
        onItemsRendered: FunctionConstructor;
    }>> & {}, {}, false, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        id: StringConstructor;
        height: {
            type: (NumberConstructor | StringConstructor)[];
            required: true;
        };
        width: {
            type: (NumberConstructor | StringConstructor)[];
            required: true;
        };
        column: NumberConstructor;
        columnWidth: NumberConstructor;
        item: {
            required: true;
        };
        itemCount: {
            type: NumberConstructor;
            required: true;
        };
        itemData: {
            type: ArrayConstructor;
            required: true;
        };
        itemKey: FunctionConstructor;
        itemSize: {
            type: (NumberConstructor | FunctionConstructor)[];
            required: true;
        };
        unlimitedSize: {
            type: BooleanConstructor;
            default: boolean;
        };
        queryPrefix: {
            type: StringConstructor;
            default: string;
        };
        position: {
            type: StringConstructor;
            default: string;
        };
        initialScrollOffset: {
            type: NumberConstructor;
            default: number;
        };
        overscanDistance: {
            type: NumberConstructor;
            default: number;
        };
        placeholderCount: {
            type: NumberConstructor;
            default: number;
        };
        useIsScrolling: {
            type: BooleanConstructor;
            default: boolean;
        };
        enhanced: {
            type: BooleanConstructor;
            default: boolean;
        };
        shouldResetStyleCacheOnItemSizeChange: {
            type: BooleanConstructor;
            default: boolean;
        };
        outerElementType: {
            type: StringConstructor;
            default: string;
        };
        innerElementType: {
            type: StringConstructor;
            default: string;
        };
        itemElementType: {
            type: StringConstructor;
            default: string;
        };
        outerTagName: StringConstructor;
        innerTagName: StringConstructor;
        itemTagName: StringConstructor;
        outerRef: StringConstructor;
        onScrollNative: FunctionConstructor;
        onItemsRendered: FunctionConstructor;
    }>> & {}, {}, {}, {}, import("vue").MethodOptions, {}>;
    isScrolling: boolean;
    scrollDirection: string;
    scrollOffset: number;
    scrollUpdateWasRequested: boolean;
    resetIsScrollingTimeoutId: any;
    refreshCount: number;
}, {}, {
    refresh(): void;
    scrollTo(scrollOffset?: number, enhanced?: any): Promise<any>;
    scrollToItem(index: number, align?: string, enhanced?: any): void;
    _callOnItemsRendered: import("memoize-one").MemoizedFn<(this: any, overscanStartIndex: any, overscanStopIndex: any, startIndex: any, stopIndex: any) => any>;
    _callOnScroll: import("memoize-one").MemoizedFn<(this: any, scrollDirection: any, scrollOffset: any, scrollUpdateWasRequested: any, detail: any) => void>;
    _callPropsCallbacks(): void;
    _getRangeToRender(columnIndex?: number): any;
    _outerRefSetter(ref: any): void;
    _resetIsScrollingDebounced(): void;
    _resetIsScrolling(): void;
    _onScroll(event: any): void;
    getRenderItemNode(itemIndex: number, type?: 'node' | 'placeholder'): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    getRenderColumnNode(columnIndex: number): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    getRenderExpandNodes(direction: 'top' | 'bottom'): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    id: StringConstructor;
    height: {
        type: (NumberConstructor | StringConstructor)[];
        required: true;
    };
    width: {
        type: (NumberConstructor | StringConstructor)[];
        required: true;
    };
    column: NumberConstructor;
    columnWidth: NumberConstructor;
    item: {
        required: true;
    };
    itemCount: {
        type: NumberConstructor;
        required: true;
    };
    itemData: {
        type: ArrayConstructor;
        required: true;
    };
    itemKey: FunctionConstructor;
    itemSize: {
        type: (NumberConstructor | FunctionConstructor)[];
        required: true;
    };
    unlimitedSize: {
        type: BooleanConstructor;
        default: boolean;
    };
    queryPrefix: {
        type: StringConstructor;
        default: string;
    };
    position: {
        type: StringConstructor;
        default: string;
    };
    initialScrollOffset: {
        type: NumberConstructor;
        default: number;
    };
    overscanDistance: {
        type: NumberConstructor;
        default: number;
    };
    placeholderCount: {
        type: NumberConstructor;
        default: number;
    };
    useIsScrolling: {
        type: BooleanConstructor;
        default: boolean;
    };
    enhanced: {
        type: BooleanConstructor;
        default: boolean;
    };
    shouldResetStyleCacheOnItemSizeChange: {
        type: BooleanConstructor;
        default: boolean;
    };
    outerElementType: {
        type: StringConstructor;
        default: string;
    };
    innerElementType: {
        type: StringConstructor;
        default: string;
    };
    itemElementType: {
        type: StringConstructor;
        default: string;
    };
    outerTagName: StringConstructor;
    innerTagName: StringConstructor;
    itemTagName: StringConstructor;
    outerRef: StringConstructor;
    onScrollNative: FunctionConstructor;
    onItemsRendered: FunctionConstructor;
}>>, {
    unlimitedSize: boolean;
    position: string;
    initialScrollOffset: number;
    placeholderCount: number;
    useIsScrolling: boolean;
    enhanced: boolean;
    outerElementType: string;
    innerElementType: string;
    itemElementType: string;
    overscanDistance: number;
    queryPrefix: string;
    shouldResetStyleCacheOnItemSizeChange: boolean;
}>;
export { _default as default };
