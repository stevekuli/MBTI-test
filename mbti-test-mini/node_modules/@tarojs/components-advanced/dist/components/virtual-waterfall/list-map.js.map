{"version":3,"file":"list-map.js","sources":["../../../src/components/virtual-waterfall/list-map.ts"],"sourcesContent":["import { isFunction, isNumber } from '@tarojs/shared'\nimport memoizeOne from 'memoize-one'\n\nimport { getOffsetForIndexAndAlignment } from '../../utils'\n\nimport type { IProps } from './preset'\n\ntype TProps = Pick<IProps, 'column' | 'columnWidth' | 'width' | 'height' | 'itemCount' | 'itemData' | 'itemSize' | 'overscanDistance' | 'unlimitedSize'>\n\nexport default class ListMap {\n  _columns: number\n  _columnMap: [number, number][][] = [] // [itemIndex, itemSize]\n  _items: string[] = [] // columnIndex-rowIndex\n  mode?: 'normal' | 'function' | 'unlimited'\n  minItemSize = 0\n  maxItemSize = 0\n  defaultSize = 1\n\n  wrapperHeight = 0\n  wrapperWidth = 0\n  columns = 2\n  columnWidth: string | number = 0\n\n  refreshCounter = 0\n\n  constructor (protected props: TProps, protected refresh?: TFunc) {\n    // Note: 不考虑列表模式切换情况，可能会导致列表抖动体验过差\n    if (this.props.unlimitedSize) {\n      this.mode = 'unlimited'\n    } else if (isFunction(this.props.itemSize)) {\n      this.mode = 'function'\n    } else if (isNumber(this.props.itemSize)) {\n      this.mode = 'normal'\n    }\n\n    this.defaultSize = (isFunction(this.props.itemSize) ? this.props.itemSize() : this.props.itemSize) || 1\n    this.minItemSize = this.defaultSize\n    this.maxItemSize = this.defaultSize\n    this.update(props)\n  }\n\n  get isNormalMode () {\n    return this.mode === 'normal'\n  }\n\n  get isFunctionMode () {\n    return this.mode === 'function'\n  }\n\n  get isUnlimitedMode () {\n    return this.mode === 'unlimited'\n  }\n\n  get length () {\n    return this.props.itemCount || 100\n  }\n\n  get overscan () {\n    return this.props.overscanDistance || 50\n  }\n\n  get columnsSize () {\n    if (this.isNormalMode) {\n      return new Array(this._columns).fill(this.getColumnSize())\n    }\n\n    return new Array(this._columns).fill(0).map((_, i) => this.getColumnSize(i))\n  }\n\n  get maxColumnSize () {\n    if (this.isNormalMode) return this.getColumnSize()\n\n    return Math.max(...this.columnsSize)\n  }\n\n  get minColumnSize () {\n    if (this.isNormalMode) return this.getColumnSize()\n\n    return Math.min(...this.columnsSize)\n  }\n\n  get maxColumnIndex () {\n    if (this.isNormalMode) return 0\n\n    const list = this.columnsSize\n    return list.indexOf(Math.max(...list))\n  }\n\n  get minColumnIndex () {\n    if (this.isNormalMode) return 0\n\n    const list = this.columnsSize\n    return list.indexOf(Math.min(...list))\n  }\n\n  update (props: TProps) {\n    this.props = props\n\n    const { column, columnWidth } = this.props\n    if (typeof column === 'number' && column > 0) {\n      this.columns = column\n      this.columnWidth = this.wrapperWidth / column\n    } else if (typeof columnWidth === 'number' && columnWidth > 0) {\n      this.columns = Math.floor(this.wrapperWidth / columnWidth)\n      this.columnWidth = columnWidth\n    } else {\n      this.columns = 2\n      this.columnWidth = this.wrapperWidth / this.columns\n    }\n    this.columnWidth ||= `calc(100% / ${this.columns})`\n    this.updateColumns(this.columns)\n    // this.updateItem(this.length - 1)\n  }\n\n  updateColumns (columns = 2) {\n    if (!this.isNormalMode && this._columns !== columns) {\n      this._columnMap = new Array(columns).fill(0).map(() => [])\n      this._items = []\n    }\n    this._columns = columns\n  }\n\n  updateItem (itemIndex: number) {\n    if (this.isNormalMode) return\n    if (itemIndex >= this.length) return this.updateItem(this.length - 1)\n\n    for (let i = 0; i <= itemIndex; i++) {\n      const position = this.getItemPosition(i)\n      if (position) continue\n\n      const column = this.minColumnIndex\n      const row = this.getColumnLength(column)\n      this._items[i] = `${column}-${row}`\n      const itemSize = this.getSizeByPosition(column, row, i)\n      if (!this.compareSizeByPosition(column, row, itemSize)) {\n        this.setSizeByPosition(column, row, itemSize, i)\n      }\n    }\n  }\n\n  setSizeByPosition (column = 0, row = 0, itemSize = this.defaultSize, itemIndex = this.getItemIndexByPosition(column, row)) {\n    if (itemIndex >= 0) {\n      if (this.maxItemSize < itemSize || this.maxItemSize === 0) {\n        this.maxItemSize = itemSize\n      }\n      if (this.minItemSize > itemSize || this.minItemSize === 0) {\n        this.minItemSize = itemSize\n      }\n      this._columnMap[column][row] = [itemIndex, itemSize]\n      if (!this.isNormalMode) {\n        this.refresh?.()\n        this.refreshCounter++\n      }\n    }\n  }\n\n  getSize (itemIndex = 0) {\n    const position = this.getItemPosition(itemIndex)\n    if (position) {\n      return this.getSizeByPosition(...position, itemIndex)\n    } else {\n      return this.defaultSize\n    }\n  }\n\n  getSizeByPosition (column = 0, row = 0, itemIndex = this.getItemIndexByPosition(column, row)) {\n    if (this.isNormalMode) return this.defaultSize\n    let itemSize = this.getColumnList(column)[row]?.[1]\n    if (typeof itemSize === 'number') return itemSize\n\n    itemSize = (isFunction(this.props.itemSize) ? this.props.itemSize(itemIndex, this.props.itemData) : this.props.itemSize) || this.defaultSize\n    this.setSizeByPosition(column, row, itemSize)\n    return itemSize\n  }\n\n  // 不支持 normal 模式\n  getColumnList (column: number) {\n    this._columnMap[column] ||= []\n    return this._columnMap[column]\n  }\n\n  getColumnLength (columnIndex: number) {\n    if (this.isNormalMode) return Math.ceil(this.length / this._columns)\n\n    return this.getColumnList(columnIndex).length\n  }\n\n  getColumnSize (columnIndex = 0) {\n    if (this.isNormalMode) {\n      return this.defaultSize * this.getColumnLength(columnIndex)\n    }\n\n    // Note: 不考虑未同步节点情况\n    return this.getOffsetSizeCache(columnIndex, this.getColumnLength(columnIndex))\n  }\n\n  getItemPosition (itemIndex: number) {\n    if (this.isNormalMode) {\n      const column = itemIndex % this._columns\n      const row = Math.floor(itemIndex / this._columns)\n      return [column, row]\n    }\n\n    return this._items[itemIndex]?.split('-').map(Number) || false\n  }\n\n  getItemIndexByPosition (column = 0, row = 0) {\n    if (this.isNormalMode) {\n      return row * this._columns + column\n    }\n\n    const columnList = this.getColumnList(column)\n    const [itemIndex] = columnList[row] || []\n    return itemIndex\n  }\n\n  getOffsetSize (itemIndex: number) {\n    const [column, row] = this.getItemPosition(itemIndex) || []\n    return this.getOffsetSizeCache(column, row)\n  }\n\n  getOffsetSizeByPosition (column = 0, row = 0) {\n    column = Math.max(0, column)\n    row = Math.max(0, row)\n    let sum = 0\n    for (let i = 0; i < row; i++) {\n      sum += this.getSizeByPosition(column, i)\n    }\n    return sum\n  }\n\n  getOffsetSizeCache = memoizeOne((column, row, _flag = this.refreshCounter) => {\n    return this.getOffsetSizeByPosition(column, row)\n  })\n\n  getStartIndex (column: number, offset: number) {\n    if (offset <= 0) return 0\n    if (this.isNormalMode) {\n      const size = this.minItemSize || 1\n      return Math.max(0, Math.floor(offset / size))\n    }\n\n    const columnList = this.getColumnList(column)\n    const columnLength = columnList.length - 1\n    let x = Math.floor(offset / (this.maxItemSize || 1))\n    let y = Math.ceil(offset / (this.minItemSize || 1))\n    this.updateItem(this.getItemIndexByPosition(column, y))\n    x = Math.min(x, columnLength)\n    y = Math.min(y, columnLength)\n    while (this.getOffsetSizeCache(column, x - 1) < offset && this.getOffsetSizeCache(column, y - 1) > offset && x < y) {\n      x < columnLength && x++\n      y > 0 && y--\n    }\n    return Math.max(0, Math.min(this.getOffsetSizeCache(column, x - 1) > offset ? x : y, columnLength) - 1)\n  }\n\n  getStopIndex (column: number, offset: number, start = 0) {\n    if (offset <= 0) return 0\n    if (this.isNormalMode) {\n      const size = this.minItemSize || 1\n      const count = Math.ceil(offset / size)\n      return Math.min(count, this.getColumnSize(column))\n    }\n    const columnList = this.getColumnList(column)\n    const columnLength = columnList.length - 1\n    let x = Math.max(start, Math.floor(offset / (this.maxItemSize || 1)))\n    let y = Math.max(start, Math.ceil(offset / (this.minItemSize || 1)))\n    this.updateItem(this.getItemIndexByPosition(column, y))\n    x = Math.min(x, columnLength)\n    y = Math.min(y, columnLength)\n    while (this.getOffsetSizeCache(column, x) < offset && this.getOffsetSizeCache(column, y) > offset && x < y) {\n      x < columnLength && x++\n      y > 0 && y--\n    }\n    return Math.max(1, Math.min(this.getOffsetSizeCache(column, x) > offset ? x : y, columnLength) + 1)\n  }\n\n  getRangeToRender (direction: 'forward' | 'backward', column: number, offset: number, block = false) {\n    if (this.length === 0) return [0, 0]\n\n    const scrollSize = this.maxColumnSize\n    const backwardDistance = !block || direction === 'backward' ? Math.max(0, this.overscan) : 0\n    const forwardDistance = !block || direction === 'forward' ? Math.max(0, this.overscan) : 0\n\n    const overscanBackward = this.getStartIndex(column, Math.max(0, offset - this.wrapperHeight - backwardDistance))\n    const overscanForward = this.getStopIndex(column, Math.max(0, Math.min(scrollSize, offset + this.wrapperHeight + forwardDistance)), overscanBackward)\n    return [overscanBackward, overscanForward]\n  }\n\n  getOffsetForIndexAndAlignment (index: number, align: string, scrollOffset: number) {\n    return getOffsetForIndexAndAlignment({\n      align,\n      containerSize: this.wrapperHeight,\n      currentOffset: scrollOffset,\n      scrollSize: this.getOffsetSize(this.length),\n      slideSize: this.getColumnSize(index),\n      targetOffset: this.getOffsetSize(index),\n    })\n  }\n\n  compareSizeByPosition (column = 0, row = 0, size = this.getSizeByPosition(column, row)) {\n    if (this.isNormalMode) return true\n\n    const origenSize = this._columnMap[column]?.[row]?.[1]\n    return typeof origenSize === 'number' && origenSize === size\n  }\n}\n"],"names":[],"mappings":"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"}