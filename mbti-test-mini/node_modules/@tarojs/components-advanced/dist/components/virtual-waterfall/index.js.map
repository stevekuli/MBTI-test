{"version":3,"file":"index.js","sources":["../../../src/components/virtual-waterfall/index.ts"],"sourcesContent":["import type { BaseEventOrig, BaseEventOrigFunction, ScrollViewProps, StandardProps } from '@tarojs/components'\nimport type { Component, ComponentType, CSSProperties } from 'react'\n\ninterface VirtualWaterfallProps<T = any> extends Omit<StandardProps, 'children'> {\n  /** 瀑布流占用列数量，默认值依照 width / columnWidth ||= 2 计算 */\n  column?: number\n  /** 瀑布流单列宽度，默认值依照 width / column 计算 */\n  columnWidth?: number\n  /** 高度 */\n  height: string | number\n  /** 宽度 */\n  width: string | number\n  /** 子组件 */\n  item: ComponentType<{\n    /** 组件 ID */\n    id: string\n    /** 组件渲染的数据 */\n    data: T[]\n    /** 组件渲染数据的索引 */\n    index: number\n    /** 组件是否正在滚动，当 useIsScrolling 值为 true 时返回布尔值，否则返回 undefined */\n    isScrolling?: boolean\n  }>\n  /** 列表的长度 */\n  itemCount: number\n  /** 渲染数据 */\n  itemData: T[]\n  /** 单项的大小 */\n  itemSize: number | ((index?: number, itemData?: T[]) => number)\n  /** 解开高度列表单项大小限制，默认值使用: itemSize。\n   *\n   * > Note: 通过 itemSize 设置的初始高度与子节点实际高度差异过大会导致隐患，建议将单页大小设置接近于现实高度，在该模式下可以提升用户体验。\n   * >  - unlimitedSize 模式下如果传入函数，只会调用一次用于设置初始值\n   * >  - 非 unlimitedSize 模式下如果传入函数，为避免性能问题，每个节点只会调用一次用于设置初始值\n   * @default false\n   */\n  unlimitedSize?: boolean\n  /** 布局方式\n   * @default \"absolute\"\n   */\n  position?: 'absolute' | 'relative' | 'brick'\n  /** 初始滚动偏移值 */\n  initialScrollOffset?: number\n  /** 在可视区域之外预渲染的距离，值设置得越高，快速滚动时出现白屏的概率就越小，相应地，每次滚动的性能会变得越差。\n   * > 建议至少大于等于 itemSize 的最大值，但不要设置超过虚拟瀑布流高度。\n   * @default 50\n   */\n  overscanDistance?: number\n  /** 上下滚动预占位节点\n   * @default 0\n   */\n  placeholderCount?: number\n  /** 触顶事件触发时距页面顶部距离\n   * @default 50\n   */\n  upperThreshold?: number\n  /** 触底事件触发时距页面底部距离\n   * @default 50\n   */\n  lowerThreshold?: number\n  /** 是否注入 isScrolling 属性到 item 组件。这个参数一般用于实现滚动骨架屏（或其它 placeholder） 时比较有用。 */\n  useIsScrolling?: boolean\n  /** 通过 ScrollViewContext 优化组件滚动性能\n   * @default true\n   * @note 部分平台不支持，使用时请注意甄别\n   */\n  enhanced?: boolean\n  /** 列表外部容器组件类型。\n   * @default ScrollView\n   */\n  outerElementType?: ComponentType | string\n  /** 列表内部容器组件类型。\n   * @default View\n   */\n  innerElementType?: ComponentType | string\n  /** 列表子节点容器组件类型。\n   * @default View\n   */\n  itemElementType?: ComponentType | string\n  /** 顶部区域 */\n  renderTop?: ComponentType<{\n    /** 组件 ID */\n    id: string\n  }>\n  /** 底部区域 */\n  renderBottom?: ComponentType<{\n    /** 组件 ID */\n    id: string\n  }>\n  /** 滚动时调用函数 */\n  onScroll?: (event: VirtualWaterfallProps.IVirtualWaterfallEvent<VirtualWaterfallProps.IVirtualWaterfallEventDetail>) => void\n  /** 调用平台原生的滚动监听函数。 */\n  onScrollNative?: BaseEventOrigFunction<ScrollViewProps.onScrollDetail>\n  /** 触顶事件 */\n  onScrollToUpper?: () => void\n  /** 触底事件 */\n  onScrollToLower?: () => void\n  style?: CSSProperties\n  /** 这是一个 fix 类型的参数，针对于各端小程序，在层级太深的情况下会生成 Taro 的自定义组件，导致一般的选择器字符会查询不到对应的元素，需要加上类似 #container >>> 的查询前缀\n   * @default ''\n   */\n  queryPrefix?: string\n}\n\ndeclare namespace VirtualWaterfallProps {\n  interface IVirtualWaterfallEventDetail extends ScrollViewProps.onScrollDetail {\n    scrollLeft: number\n    scrollTop: number\n    scrollHeight: number\n    scrollWidth: number\n    clientHeight: number\n    clientWidth: number\n    diffOffset: number\n  }\n\n  interface IVirtualWaterfallEvent<T extends ScrollViewProps.onScrollDetail = ScrollViewProps.onScrollDetail> extends BaseEventOrig {\n    /** 滚动方向，可能值为 forward 往前， backward 往后。 */\n    scrollDirection: 'forward' | 'backward'\n    /** 滚动距离 */\n    scrollOffset: number\n    /** 当滚动是由 scrollTo() 或 scrollToItem() 调用时返回 true，否则返回 false */\n    scrollUpdateWasRequested: boolean\n    /** 滚动信息 */\n    detail: T\n  }\n}\n\n/** 虚拟瀑布流\n * @classification viewContainer\n * @supported weapp, swan, alipay, tt, qq, jd, h5\n * @example_react\n * ```tsx\n * import { VirtualWaterfall } from `@tarojs/components-advanced`\n *\n * function buildData (offset = 0) {\n *   return Array(100).fill(0).map((_, i) => i + offset);\n * }\n *\n * const Row = React.memo(({ id, index, data }) => {\n *   return (\n *     <View id={id} className={index % 2 ? 'ListItemOdd' : 'ListItemEven'}>\n *       Row {index}\n *     </View>\n *   );\n * })\n *\n * export default class Index extends Component {\n *   state = {\n *     data: buildData(0),\n *   }\n *\n *   render() {\n *     const { data } = this.state\n *     const dataLen = data.length\n *     return (\n *       <VirtualWaterfall\n *         height={500} // 列表的高度\n *         width='100%' // 列表的宽度\n *         item={Row} // 列表单项组件，这里只能传入一个组件\n *         itemData={data} // 渲染列表的数据\n *         itemCount={dataLen} // 渲染列表的长度\n *         itemSize={100} // 列表单项的高度\n *       />\n *     );\n *   }\n * }\n * ```\n * @example_vue\n * ```js\n * // app.js 入口文件\n * import Vue from 'vue'\n * import { VirtualWaterfall } from `@tarojs/components-advanced`\n *\n * Vue.use(VirtualWaterfall)\n * ```\n * ```js\n * <! –– row.vue 单项组件 ––>\n * <template>\n *   <view\n *     :class=\"index % 2 ? 'ListItemOdd' : 'ListItemEven'\"\n *   >\n *     Row {{ index }} : {{ data[index] }}\n *   </view>\n * </template>\n *\n * <script>\n * export default {\n *   props: ['index', 'data']\n * }\n * </script>\n * ```\n * ```js\n * <! –– page.vue 页面组件 ––>\n * <template>\n *   <virtual-waterfall\n *     :height=\"500\"\n *     :item-data=\"list\"\n *     :item-count=\"list.length\"\n *     :item-size=\"100\"\n *     :item=\"Row\"\n *     width=\"100%\"\n *   />\n * </template>\n *\n * <script>\n * import Row from './row.vue'\n * import { markRaw } from 'vue'\n *\n * function buildData (offset = 0) {\n *   return Array(100).fill(0).map((_, i) => i + offset)\n * }\n *\n * export default {\n *   data() {\n *     return {\n *       Row: markRaw(Row),\n *       list: buildData(0)\n *     }\n *   },\n * }\n * </script>\n * ```\n * @see https://taro-docs.jd.com/docs/virtual-waterfall\n */\ndeclare class VirtualWaterfallComponent extends Component<VirtualWaterfallProps> {\n  /**\n   * 滚动到指定的地点。\n   */\n  public scrollTo(scrollOffset: number, enhanced?: boolean): void\n\n  /** 滚动到指定的条目。\n   * @param index 指定条目的索引。\n   * @param align 滚动到指定条目时，指定条目的位置。默认值为 auto。\n   *\n   * - start：指定条目在可视区域的顶部。\n   * - end：指定条目在可视区域的底部。\n   * - center：指定条目在可视区域的中间。\n   * - auto：尽可能滚动距离最小保证条目在可视区域中，如果已经在可视区域，就不滚动。\n   * - smart：条目如果已经在可视区域，就不滚动；如果有部分在可视区域，尽可能滚动距离最小保证条目在可视区域中；如果条目完全不在可视区域，那就滚动到条目在可视区域居中显示。\n   */\n  public scrollToItem(index: number, align: 'start' | 'end' | 'center' | 'auto' | 'smart', enhanced?: boolean): void\n}\n\ndeclare type VirtualWaterfall = VirtualWaterfallComponent\nconst VirtualWaterfall: typeof VirtualWaterfallComponent = (process.env.FRAMEWORK === 'vue' || process.env.FRAMEWORK === 'vue3')\n  ? require('./vue').default\n  : require('./react').default\n\nexport { VirtualWaterfall, VirtualWaterfallProps }\nexport default VirtualWaterfall\n"],"names":[],"mappings":"AAoPA,MAAM,gBAAgB,GAAqC,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,KAAK,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,SAAS,KAAK,MAAM;AAC7H,MAAE,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO;AAC1B,MAAE,OAAO,CAAC,SAAS,CAAC,CAAC;;;;"}