import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _createClass from '@babel/runtime/helpers/createClass';
import _inherits from '@babel/runtime/helpers/inherits';
import _createSuper from '@babel/runtime/helpers/createSuper';
import { __rest } from 'tslib';
import './style/index.css.js';
import classNames from 'classnames';
import React from 'react';

var View = /*#__PURE__*/function (_React$Component) {
  _inherits(View, _React$Component);
  var _super = _createSuper(View);
  function View() {
    var _this;
    _classCallCheck(this, View);
    _this = _super.apply(this, arguments);
    _this.state = {
      hover: false,
      touch: false
    };
    _this.startTime = 0;
    return _this;
  }
  _createClass(View, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var _a = this.props,
        className = _a.className,
        hoverClass = _a.hoverClass,
        onTouchStart = _a.onTouchStart,
        onTouchEnd = _a.onTouchEnd,
        onTouchMove = _a.onTouchMove,
        _a$hoverStartTime = _a.hoverStartTime,
        hoverStartTime = _a$hoverStartTime === void 0 ? 50 : _a$hoverStartTime,
        _a$hoverStayTime = _a.hoverStayTime,
        hoverStayTime = _a$hoverStayTime === void 0 ? 400 : _a$hoverStayTime,
        other = __rest(_a, ["className", "hoverClass", "onTouchStart", "onTouchEnd", "onTouchMove", "hoverStartTime", "hoverStayTime"]);
      var cls = classNames('', _defineProperty({}, "".concat(hoverClass), this.state.hover), className);
      var _onTouchStart = function _onTouchStart(e) {
        if (hoverClass) {
          _this2.setState(function () {
            return {
              touch: true
            };
          });
          setTimeout(function () {
            if (_this2.state.touch) {
              _this2.setState(function () {
                return {
                  hover: true
                };
              });
            }
          }, hoverStartTime);
        }
        onTouchStart && onTouchStart(e);
        if (_this2.props.onLongPress) {
          _this2.timeoutEvent = setTimeout(function () {
            _this2.props.onLongPress();
          }, 350);
          _this2.startTime = new Date().getTime();
        }
      };
      var _onTouchMove = function _onTouchMove(e) {
        clearTimeout(_this2.timeoutEvent);
        onTouchMove && onTouchMove(e);
      };
      var _onTouchEnd = function _onTouchEnd(e) {
        var spanTime = new Date().getTime() - _this2.startTime;
        if (spanTime < 350) {
          clearTimeout(_this2.timeoutEvent);
        }
        if (hoverClass) {
          _this2.setState(function () {
            return {
              touch: false
            };
          });
          setTimeout(function () {
            if (!_this2.state.touch) {
              _this2.setState(function () {
                return {
                  hover: false
                };
              });
            }
          }, hoverStayTime);
        }
        onTouchEnd && onTouchEnd(e);
      };
      return React.createElement("div", Object.assign({
        className: cls,
        onTouchStart: _onTouchStart,
        onTouchEnd: _onTouchEnd,
        onTouchMove: _onTouchMove
      }, other), this.props.children);
    }
  }]);
  return View;
}(React.Component);

export { View as default };
//# sourceMappingURL=index.js.map
