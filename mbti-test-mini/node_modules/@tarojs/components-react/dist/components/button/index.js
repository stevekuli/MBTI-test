import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _createClass from '@babel/runtime/helpers/createClass';
import _inherits from '@babel/runtime/helpers/inherits';
import _createSuper from '@babel/runtime/helpers/createSuper';
import './style/index.scss.js';
import classNames from 'classnames';
import React from 'react';
import { omit } from '../../utils/index.js';

var Button = /*#__PURE__*/function (_React$Component) {
  _inherits(Button, _React$Component);
  var _super = _createSuper(Button);
  function Button(props) {
    var _this;
    _classCallCheck(this, Button);
    _this = _super.call(this, props);
    _this.state = {
      hover: false,
      touch: false
    };
    return _this;
  }
  _createClass(Button, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.startTimer && clearTimeout(this.startTimer);
      this.endTimer && clearTimeout(this.endTimer);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props = this.props,
        _this$props$plain = _this$props.plain,
        plain = _this$props$plain === void 0 ? false : _this$props$plain,
        children = _this$props.children,
        _this$props$disabled = _this$props.disabled,
        disabled = _this$props$disabled === void 0 ? false : _this$props$disabled,
        className = _this$props.className,
        style = _this$props.style,
        onClick = _this$props.onClick,
        onTouchStart = _this$props.onTouchStart,
        onTouchEnd = _this$props.onTouchEnd,
        _this$props$hoverClas = _this$props.hoverClass,
        hoverClass = _this$props$hoverClas === void 0 ? 'button-hover' : _this$props$hoverClas,
        _this$props$hoverStar = _this$props.hoverStartTime,
        hoverStartTime = _this$props$hoverStar === void 0 ? 20 : _this$props$hoverStar,
        _this$props$hoverStay = _this$props.hoverStayTime,
        hoverStayTime = _this$props$hoverStay === void 0 ? 70 : _this$props$hoverStay,
        _this$props$loading = _this$props.loading,
        loading = _this$props$loading === void 0 ? false : _this$props$loading,
        type = _this$props.type;
      var cls = classNames(className, 'taro-button-core', _defineProperty({}, "".concat(hoverClass), this.state.hover && !disabled));
      var _onTouchStart = function _onTouchStart(e) {
        _this2.setState(function () {
          return {
            touch: true
          };
        });
        if (hoverClass && hoverClass !== 'none' && !disabled) {
          _this2.startTimer = setTimeout(function () {
            if (_this2.state.touch) {
              _this2.setState(function () {
                return {
                  hover: true
                };
              });
            }
          }, hoverStartTime);
        }
        onTouchStart && onTouchStart(e);
      };
      var _onTouchEnd = function _onTouchEnd(e) {
        _this2.setState(function () {
          return {
            touch: false
          };
        });
        if (hoverClass && hoverClass !== 'none' && !disabled) {
          _this2.endTimer = setTimeout(function () {
            if (!_this2.state.touch) {
              _this2.setState(function () {
                return {
                  hover: false
                };
              });
            }
          }, hoverStayTime);
        }
        onTouchEnd && onTouchEnd(e);
      };
      return React.createElement("button", Object.assign({}, omit(this.props, ['hoverClass', 'onTouchStart', 'onTouchEnd', 'type', 'loading']), {
        type: type,
        className: cls,
        style: style,
        onClick: onClick,
        disabled: disabled,
        onTouchStart: _onTouchStart,
        onTouchEnd: _onTouchEnd,
        loading: loading.toString(),
        plain: plain.toString()
      }), !!loading && React.createElement("i", {
        className: 'weui-loading'
      }), children);
    }
  }]);
  return Button;
}(React.Component);

export { Button as default };
//# sourceMappingURL=index.js.map
