import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _createClass from '@babel/runtime/helpers/createClass';
import _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';
import _inherits from '@babel/runtime/helpers/inherits';
import _createSuper from '@babel/runtime/helpers/createSuper';
import './style/index.scss.js';
import classNames from 'classnames';
import React from 'react';
import { omit } from '../../utils/index.js';

function getTrueType(type, confirmType, password) {
  if (confirmType === 'search') type = 'search';
  if (password) type = 'password';
  if (typeof type === 'undefined') {
    return 'text';
  }
  if (!type) {
    throw new Error('unexpected type');
  }
  if (type === 'digit') type = 'number';
  return type;
}
function fixControlledValue(value) {
  return value !== null && value !== void 0 ? value : '';
}
var Input = /*#__PURE__*/function (_React$Component) {
  _inherits(Input, _React$Component);
  var _super = _createSuper(Input);
  function Input(props) {
    var _this;
    _classCallCheck(this, Input);
    _this = _super.call(this, props);
    _this.handleBeforeInput = function (e) {
      if (!e.data) return;
      var isNumber = e.data && /[0-9]/.test(e.data);
      if (_this.props.type === 'number' && !isNumber) {
        e.preventDefault();
      }
      if (_this.props.type === 'digit' && !isNumber) {
        if (e.data !== '.' || e.data === '.' && e.target.value.indexOf('.') > -1) {
          e.preventDefault();
        }
      }
    };
    _this.handleInput = _this.handleInput.bind(_assertThisInitialized(_this));
    _this.handlePaste = _this.handlePaste.bind(_assertThisInitialized(_this));
    _this.handleFocus = _this.handleFocus.bind(_assertThisInitialized(_this));
    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_this));
    _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized(_this));
    _this.handleComposition = _this.handleComposition.bind(_assertThisInitialized(_this));
    _this.handleBeforeInput = _this.handleBeforeInput.bind(_assertThisInitialized(_this));
    _this.isOnComposition = false;
    _this.onInputExcuted = false;
    return _this;
  }
  _createClass(Input, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _a, _b;
      // 修复无法选择文件
      if (this.props.type === 'file') {
        (_a = this.inputRef) === null || _a === void 0 ? void 0 : _a.addEventListener('change', this.handleInput);
      } else {
        (_b = this.inputRef) === null || _b === void 0 ? void 0 : _b.addEventListener('textInput', this.handleBeforeInput);
      }
      // 处理初始化是否 focus
      if (this.props.focus && this.inputRef) this.inputRef.focus();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _a;
      // 修复无法选择文件
      if (this.props.type === 'file') {
        this.inputRef.removeEventListener('change', this.handleInput);
      } else {
        (_a = this.inputRef) === null || _a === void 0 ? void 0 : _a.removeEventListener('textInput', this.handleBeforeInput);
      }
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (!this.props.focus && nextProps.focus && this.inputRef) this.inputRef.focus();
    }
  }, {
    key: "handleInput",
    value: function handleInput(e) {
      e.stopPropagation();
      var _this$props = this.props,
        type = _this$props.type,
        _this$props$maxlength = _this$props.maxlength,
        maxlength = _this$props$maxlength === void 0 ? 140 : _this$props$maxlength,
        _this$props$confirmTy = _this$props.confirmType,
        confirmType = _this$props$confirmTy === void 0 ? 'done' : _this$props$confirmTy,
        _this$props$password = _this$props.password,
        password = _this$props$password === void 0 ? false : _this$props$password,
        onInput = _this$props.onInput;
      if (!this.isOnComposition && !this.onInputExcuted) {
        var value = e.target.value;
        var inputType = getTrueType(type, confirmType, password);
        this.onInputExcuted = true;
        /* 修复 number 类型 maxLength 无效 */
        if (inputType === 'number' && value && maxlength <= value.length) {
          value = value.substring(0, maxlength);
          e.target.value = value;
        }
        Object.defineProperty(e, 'detail', {
          value: {
            value: value,
            cursor: value.length
          }
        });
        // // 修复 IOS 光标跳转问题
        // if (!(['number', 'file'].indexOf(inputType) >= 0)) {
        //   const pos = e.target.selectionEnd
        //   setTimeout(
        //     () => {
        //       e.target.selectionStart = pos
        //       e.target.selectionEnd = pos
        //     }
        //   )
        // }
        typeof onInput === 'function' && onInput(e);
        this.onInputExcuted = false;
      }
    }
  }, {
    key: "handlePaste",
    value: function handlePaste(e) {
      e.stopPropagation();
      var onPaste = this.props.onPaste;
      this.onInputExcuted = false;
      Object.defineProperty(e, 'detail', {
        value: {
          value: e.target.value
        }
      });
      typeof onPaste === 'function' && onPaste(e);
    }
  }, {
    key: "handleFocus",
    value: function handleFocus(e) {
      e.stopPropagation();
      var onFocus = this.props.onFocus;
      this.onInputExcuted = false;
      Object.defineProperty(e, 'detail', {
        value: {
          value: e.target.value
        }
      });
      onFocus && onFocus(e);
    }
  }, {
    key: "handleBlur",
    value: function handleBlur(e) {
      e.stopPropagation();
      var onBlur = this.props.onBlur;
      Object.defineProperty(e, 'detail', {
        value: {
          value: e.target.value
        }
      });
      onBlur && onBlur(e);
    }
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(e) {
      e.stopPropagation();
      var _this$props2 = this.props,
        onConfirm = _this$props2.onConfirm,
        onKeyDown = _this$props2.onKeyDown;
      var value = e.target.value;
      var keyCode = e.keyCode || e.code;
      this.onInputExcuted = false;
      if (typeof onKeyDown === 'function') {
        Object.defineProperty(e, 'detail', {
          value: {
            value: value,
            cursor: value.length,
            keyCode: keyCode
          }
        });
        onKeyDown(e);
      }
      if (e.keyCode === 13 && typeof onConfirm === 'function') {
        Object.defineProperty(e, 'detail', {
          value: {
            value: value
          }
        });
        onConfirm(e);
      }
    }
  }, {
    key: "handleComposition",
    value: function handleComposition(e) {
      e.stopPropagation();
      if (!(e.target instanceof HTMLInputElement)) return;
      if (e.type === 'compositionend') {
        this.isOnComposition = false;
        this.handleInput(e);
      } else {
        this.isOnComposition = true;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props3 = this.props,
        _this$props3$classNam = _this$props3.className,
        className = _this$props3$classNam === void 0 ? '' : _this$props3$classNam,
        placeholder = _this$props3.placeholder,
        type = _this$props3.type,
        _this$props3$password = _this$props3.password,
        password = _this$props3$password === void 0 ? false : _this$props3$password,
        _this$props3$disabled = _this$props3.disabled,
        disabled = _this$props3$disabled === void 0 ? false : _this$props3$disabled,
        _this$props3$maxlengt = _this$props3.maxlength,
        maxlength = _this$props3$maxlengt === void 0 ? 140 : _this$props3$maxlengt,
        _this$props3$confirmT = _this$props3.confirmType,
        confirmType = _this$props3$confirmT === void 0 ? 'done' : _this$props3$confirmT,
        name = _this$props3.name,
        value = _this$props3.value;
      var cls = classNames('taro-input-core', 'weui-input', className);
      var otherProps = omit(this.props, ['className', 'placeholder', 'disabled', 'password', 'type', 'maxlength', 'confirmType', 'focus', 'name']);
      if ('value' in this.props) {
        otherProps.value = fixControlledValue(value);
      }
      return React.createElement("input", Object.assign({
        ref: function ref(input) {
          _this2.inputRef = input;
        }
      }, otherProps, {
        className: cls,
        type: getTrueType(type, confirmType, password),
        placeholder: placeholder,
        disabled: disabled,
        maxLength: maxlength,
        name: name,
        onInput: this.handleInput,
        onPaste: this.handlePaste,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        onKeyDown: this.handleKeyDown,
        onCompositionStart: this.handleComposition,
        onCompositionEnd: this.handleComposition,
        onBeforeInput: this.handleBeforeInput
      }));
    }
  }]);
  return Input;
}(React.Component);

export { Input as default };
//# sourceMappingURL=index.js.map
