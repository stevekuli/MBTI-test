import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _createClass from '@babel/runtime/helpers/createClass';
import _inherits from '@babel/runtime/helpers/inherits';
import _createSuper from '@babel/runtime/helpers/createSuper';
import './style/index.css.js';
import classNames from 'classnames';
import React from 'react';
import { throttle } from '../../utils/index.js';

function easeOutScroll() {
  var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var callback = arguments.length > 2 ? arguments[2] : undefined;
  if (from === to || typeof from !== 'number') {
    return;
  }
  var change = to - from;
  var dur = 500;
  var sTime = +new Date();
  function linear(t, b, c, d) {
    return c * t / d + b;
  }
  var isLarger = to >= from;
  function step() {
    from = linear(+new Date() - sTime, from, change, dur);
    if (isLarger && from >= to || !isLarger && to >= from) {
      callback(to);
      return;
    }
    callback(from);
    requestAnimationFrame(step);
  }
  step();
}
function scrollIntoView() {
  var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var isHorizontal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var animated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var scrollIntoViewAlignment = arguments.length > 3 ? arguments[3] : undefined;
  var _a;
  (_a = document.querySelector("#".concat(id))) === null || _a === void 0 ? void 0 : _a.scrollIntoView({
    behavior: animated ? 'smooth' : 'auto',
    block: !isHorizontal ? scrollIntoViewAlignment || 'center' : 'center',
    inline: isHorizontal ? scrollIntoViewAlignment || 'start' : 'start'
  });
}
function scrollVertical(top, isAnimation) {
  var _this = this;
  if (isAnimation) {
    easeOutScroll(this._scrollTop, top, function (pos) {
      if (_this.container) _this.container.scrollTop = pos;
    });
  } else {
    if (this.container) this.container.scrollTop = top;
  }
  this._scrollTop = top;
}
function scrollHorizontal(left, isAnimation) {
  var _this2 = this;
  if (isAnimation) {
    easeOutScroll(this._scrollLeft, left, function (pos) {
      if (_this2.container) _this2.container.scrollLeft = pos;
    });
  } else {
    if (this.container) this.container.scrollLeft = left;
  }
  this._scrollLeft = left;
}
var ScrollView = /*#__PURE__*/function (_React$Component) {
  _inherits(ScrollView, _React$Component);
  var _super = _createSuper(ScrollView);
  function ScrollView() {
    var _this3;
    _classCallCheck(this, ScrollView);
    _this3 = _super.apply(this, arguments);
    _this3._scrollTop = null;
    _this3._scrollLeft = null;
    _this3.container = null;
    _this3.onTouchMove = function (e) {
      e.stopPropagation();
    };
    return _this3;
  }
  _createClass(ScrollView, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.handleScroll(this.props, true);
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      this.handleScroll(nextProps);
    }
  }, {
    key: "handleScroll",
    value: function handleScroll(props) {
      var _this4 = this;
      var isInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      // scrollIntoView
      if (props.scrollIntoView && typeof props.scrollIntoView === 'string' && document && document.querySelector && document.querySelector("#".concat(props.scrollIntoView))) {
        var isHorizontal = props.scrollX && !props.scrollY;
        if (isInit) {
          setTimeout(function () {
            return scrollIntoView(props.scrollIntoView, props.scrollWithAnimation, isHorizontal, props.scrollIntoViewAlignment);
          }, 500);
        } else {
          scrollIntoView(props.scrollIntoView, props.scrollWithAnimation, isHorizontal, props.scrollIntoViewAlignment);
        }
      } else {
        var isAnimation = !!props.scrollWithAnimation;
        // Y 轴滚动
        if (props.scrollY && typeof props.scrollTop === 'number' && props.scrollTop !== this._scrollTop) {
          if (isInit) {
            setTimeout(function () {
              return scrollVertical.bind(_this4)(props.scrollTop, isAnimation);
            }, 10);
          } else {
            scrollVertical.bind(this)(props.scrollTop, isAnimation);
          }
        }
        // X 轴滚动
        if (props.scrollX && typeof props.scrollLeft === 'number' && props.scrollLeft !== this._scrollLeft) {
          if (isInit) {
            setTimeout(function () {
              return scrollHorizontal.bind(_this4)(props.scrollLeft, isAnimation);
            }, 10);
          } else {
            scrollHorizontal.bind(this)(props.scrollLeft, isAnimation);
          }
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this5 = this;
      var _this$props = this.props,
        className = _this$props.className,
        _this$props$style = _this$props.style,
        style = _this$props$style === void 0 ? {} : _this$props$style,
        onScroll = _this$props.onScroll,
        onScrollToUpper = _this$props.onScrollToUpper,
        onScrollToLower = _this$props.onScrollToLower,
        onTouchMove = _this$props.onTouchMove,
        scrollX = _this$props.scrollX,
        scrollY = _this$props.scrollY;
      var _this$props2 = this.props,
        _this$props2$upperThr = _this$props2.upperThreshold,
        upperThreshold = _this$props2$upperThr === void 0 ? 50 : _this$props2$upperThr,
        _this$props2$lowerThr = _this$props2.lowerThreshold,
        lowerThreshold = _this$props2$lowerThr === void 0 ? 50 : _this$props2$lowerThr;
      var cls = classNames('taro-scroll', {
        'taro-scroll-view__scroll-x': scrollX,
        'taro-scroll-view__scroll-y': scrollY
      }, className);
      upperThreshold = Number(upperThreshold);
      lowerThreshold = Number(lowerThreshold);
      var upperAndLower = function upperAndLower(e) {
        if (!_this5.container) return;
        var _this5$container = _this5.container,
          offsetWidth = _this5$container.offsetWidth,
          offsetHeight = _this5$container.offsetHeight,
          scrollLeft = _this5$container.scrollLeft,
          scrollTop = _this5$container.scrollTop,
          scrollHeight = _this5$container.scrollHeight,
          scrollWidth = _this5$container.scrollWidth;
        if (onScrollToLower && (_this5.props.scrollY && offsetHeight + scrollTop + lowerThreshold >= scrollHeight || _this5.props.scrollX && offsetWidth + scrollLeft + lowerThreshold >= scrollWidth)) {
          onScrollToLower(e);
        }
        if (onScrollToUpper && (_this5.props.scrollY && scrollTop <= upperThreshold || _this5.props.scrollX && scrollLeft <= upperThreshold)) {
          onScrollToUpper(e);
        }
      };
      var upperAndLowerThrottle = throttle(upperAndLower, 200);
      var _onScroll = function _onScroll(e) {
        var _this5$container2 = _this5.container,
          scrollLeft = _this5$container2.scrollLeft,
          scrollTop = _this5$container2.scrollTop,
          scrollHeight = _this5$container2.scrollHeight,
          scrollWidth = _this5$container2.scrollWidth;
        _this5._scrollLeft = scrollLeft;
        _this5._scrollTop = scrollTop;
        Object.defineProperty(e, 'detail', {
          enumerable: true,
          writable: true,
          value: {
            scrollLeft: scrollLeft,
            scrollTop: scrollTop,
            scrollHeight: scrollHeight,
            scrollWidth: scrollWidth
          }
        });
        upperAndLowerThrottle(e);
        onScroll && onScroll(e);
      };
      var _onTouchMove = function _onTouchMove(e) {
        onTouchMove ? onTouchMove(e) : _this5.onTouchMove(e);
      };
      return React.createElement("div", {
        ref: function ref(container) {
          _this5.container = container;
        },
        style: style,
        className: cls,
        onScroll: _onScroll,
        onTouchMove: _onTouchMove
      }, this.props.children);
    }
  }]);
  return ScrollView;
}(React.Component);

export { ScrollView as default };
//# sourceMappingURL=index.js.map
