/**
 * ✘ report-submit
 * ✔ onSubmit(bindsubmit): no FormId info.
 * ✘ onReset(bindreset)
 */
import * as React from 'react';
import { View } from 'react-native';
import { noop } from '../../utils';
function isFormTypeElement(typeName) {
    return [
        '_Input',
        '_Textarea',
        '_CheckboxGroup',
        '_RadioGroup',
        '_Switch',
        '_Slider',
        '_Picker'
    ].indexOf(typeName) >= 0;
}
class _Form extends React.Component {
    constructor() {
        super(...arguments);
        this.formValues = {};
        this.bindValueChangeEvent = (child) => {
            // onChange: _CheckboxGroup _RadioGroup _Switch _Slider _Picker
            // onBlur: _Input _Textarea
            // @ts-ignore
            const childTypeName = child.type && child.type.displayName;
            const childPropsName = child.props.name;
            const valueChangeCbName = childTypeName === '_Input' || childTypeName === '_Textarea' ? 'onBlur' : 'onChange';
            const tmpProps = Object.assign({}, child.props);
            // Initial value
            if (['_Input', '_Textarea', '_Slider', '_Picker'].indexOf(childTypeName) >= 0) {
                if (child.props.value !== undefined) {
                    this.formValues[childPropsName] = child.props.value;
                }
            }
            else if (childTypeName === '_Switch') {
                if (child.props.checked !== undefined) {
                    this.formValues[childPropsName] = !!child.props.checked;
                }
            }
            else {
                tmpProps._onGroupDataInitial = (value) => {
                    this.formValues[childPropsName] = value;
                };
            }
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const self = this;
            tmpProps[valueChangeCbName] = function (event) {
                const valueChangeCb = child.props[valueChangeCbName] || noop;
                self.formValues[childPropsName] = event.detail.value;
                // eslint-disable-next-line prefer-rest-params
                valueChangeCb(...arguments);
            };
            return React.cloneElement(child, tmpProps, child.props.children);
        };
        this.deppDiveIntoChildren = (children) => {
            const result = React.Children.toArray(children).map((child) => {
                const childTypeName = child.type && child.type.displayName;
                if (!child.type)
                    return child;
                if (childTypeName === '_Button' && ['submit', 'reset'].indexOf(child.props.formType) >= 0) {
                    const onClick = child.props.onClick || noop;
                    return React.cloneElement(child, Object.assign(Object.assign({}, child.props), { onClick: () => {
                            const formType = child.props.formType;
                            this[formType]();
                            onClick();
                        } }));
                }
                return isFormTypeElement(childTypeName) && child.props.name
                    ? this.bindValueChangeEvent(child)
                    : React.cloneElement(child, Object.assign({}, child.props), this.deppDiveIntoChildren(child.props.children));
            });
            return result.length ? result : null;
        };
        this.submit = () => {
            const { onSubmit = noop } = this.props;
            onSubmit({
                detail: {
                    value: this.formValues
                }
            });
        };
        this.reset = () => {
            const { onReset = noop } = this.props;
            onReset();
        };
    }
    render() {
        const { children, style, } = this.props;
        return (React.createElement(View, { style: style }, this.deppDiveIntoChildren(children)));
    }
}
export default _Form;
//# sourceMappingURL=index.js.map