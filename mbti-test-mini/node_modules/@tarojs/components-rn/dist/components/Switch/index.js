/**
 * ✔ checked
 * ✔ disabled
 * ✔ type
 * ✔ onChange(bindchange) :isChecked
 * ✔ color
 *
 * @warn When type="switch", use native Switch
 * @example
 *  <Switch
 *    checked={this.state.isSwitchChecked}
 *    onChange={this.onSwitchChange}
 *    color="red"
 *  />
 */
import * as React from 'react';
import { Switch } from 'react-native';
import Checkbox from '../Checkbox';
import { noop } from '../../utils';
class _Switch extends React.Component {
    constructor() {
        super(...arguments);
        // $touchable: Checkbox | Switch | null
        this.$touchable = React.createRef();
        this.state = {
            checked: !!this.props.checked,
            pChecked: false,
        };
        this._simulateNativePress = (evt) => {
            const { type } = this.props;
            if (type === 'checkbox') {
                const node = this.$touchable.current;
                node && node._simulateNativePress(evt);
            }
            else {
                // this.$touchable._onChange()
                this.setState({ checked: !this.state.checked });
            }
        };
        this.onCheckedChange = (isChecked) => {
            const { onChange = noop } = this.props;
            onChange({ detail: { value: isChecked } });
            this.setState({ checked: isChecked });
        };
        this.onCheckboxToggle = (item) => {
            this.onCheckedChange(item.checked);
        };
    }
    static getDerivedStateFromProps(nextProps, lastState) {
        var _a;
        // eslint-disable-next-line eqeqeq
        const isControlled = nextProps.checked != undefined;
        if (isControlled) {
            if (nextProps.checked !== lastState.pChecked) {
                // 受控更新
                return {
                    checked: nextProps.checked,
                    pChecked: nextProps.checked,
                };
            }
            else if (nextProps.checked !== lastState.checked) {
                // 受控还原
                return {
                    checked: nextProps.checked
                };
            }
        }
        else if (lastState.pChecked !== nextProps.checked) {
            // 初次更新才设置 defaultChecked
            return {
                pChecked: nextProps.checked,
                checked: (_a = nextProps.defaultChecked) !== null && _a !== void 0 ? _a : false,
            };
        }
        return null;
    }
    render() {
        const { style, type, color, disabled } = this.props;
        if (type === 'checkbox') {
            return (React.createElement(Checkbox, { onChange: this.onCheckboxToggle, checked: this.state.checked, disabled: disabled, ref: this.$touchable }));
        }
        return (React.createElement(Switch, { value: this.state.checked, onValueChange: disabled ? undefined : this.onCheckedChange, trackColor: { false: '#FFFFFF', true: color }, ios_backgroundColor: "#FFFFFF", style: style, disabled: disabled, ref: this.$touchable }));
    }
}
_Switch.displayName = '_Switch';
_Switch.defaultProps = {
    type: 'switch',
    color: '#04BE02',
    disabled: false,
};
export default _Switch;
//# sourceMappingURL=index.js.map