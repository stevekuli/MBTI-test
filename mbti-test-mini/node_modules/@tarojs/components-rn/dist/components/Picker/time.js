import * as React from 'react';
import AntDatePicker from '@ant-design/react-native/lib/date-picker';
import { noop } from '../../utils';
import { TouchableWithoutFeedback } from 'react-native';
function formatTimeStr(time = '') {
    const now = new Date();
    let [hour, minute] = time.split(':');
    hour = ~~hour;
    minute = ~~minute;
    now.setHours(hour, minute);
    return now;
}
export default class TimeSelector extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            pValue: '',
            value: '',
            isInOnChangeUpdate: false,
        };
        this.onChange = (date) => {
            const { onChange = noop } = this.props;
            const hh = ('0' + date.getHours()).slice(-2);
            const mm = ('0' + date.getMinutes()).slice(-2);
            const value = `${hh}:${mm}`;
            this.setState({ value });
            onChange({ detail: { value } });
            this.setState({ isInOnChangeUpdate: true });
        };
        this.onDismiss = () => {
            const { onCancel = noop } = this.props;
            onCancel();
        };
    }
    static getDerivedStateFromProps(nextProps, lastState) {
        var _a;
        const nextIncomingValue = nextProps.value;
        // eslint-disable-next-line eqeqeq
        const isControlled = nextIncomingValue != undefined;
        if (isControlled) {
            if (nextIncomingValue !== lastState.pValue) {
                // 受控更新
                return {
                    pValue: nextIncomingValue,
                    value: nextIncomingValue,
                };
            }
            else if (lastState.isInOnChangeUpdate && nextIncomingValue !== lastState.value) {
                // 受控还原
                return {
                    value: nextIncomingValue,
                    isInOnChangeUpdate: false,
                };
            }
        }
        else if (nextIncomingValue !== lastState.pValue) {
            // 初次更新才设置 defaultValue
            return {
                pValue: nextIncomingValue,
                value: (_a = nextProps.defaultValue) !== null && _a !== void 0 ? _a : '00:00'
            };
        }
        return null;
    }
    render() {
        const { children, start, end, disabled } = this.props;
        const { value } = this.state;
        return (React.createElement(AntDatePicker, { mode: 'time', value: formatTimeStr(value), minDate: formatTimeStr(start), maxDate: formatTimeStr(end), onChange: this.onChange, onDismiss: this.onDismiss, disabled: disabled },
            React.createElement(TouchableWithoutFeedback, null, children)));
    }
}
TimeSelector.defaultProps = {
    start: '00:00',
    end: '23:59'
};
//# sourceMappingURL=time.js.map