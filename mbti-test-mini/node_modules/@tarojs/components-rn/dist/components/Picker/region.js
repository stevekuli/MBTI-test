import * as React from 'react';
import AntPicker from '@ant-design/react-native/lib/picker';
import { regionData } from './regionData';
import { noop } from '../../utils';
import { TouchableWithoutFeedback } from 'react-native';
function formateRegionData(clObj = [], customItem, depth = 2) {
    const l = depth;
    const obj = [];
    if (customItem) {
        const objClone = {
            value: customItem,
            label: customItem
        };
        const panding = Object.assign({}, objClone);
        let loop = panding;
        while (depth-- > 0) {
            loop.children = [Object.assign({}, objClone)];
            loop = loop.children[0];
        }
        obj.push(panding);
    }
    for (let i = 0; i < clObj.length; i++) {
        const region = {
            value: clObj[i].value,
            label: clObj[i].value,
        };
        if (clObj[i].children) {
            region.children = formateRegionData(clObj[i].children, customItem, l - 1);
        }
        obj.push(region);
    }
    return obj;
}
export default class RegionSelector extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            value: [],
            pValue: [],
            isInOnChangeUpdate: false,
        };
        this.dismissByOk = false;
        this.regionData = formateRegionData(this.props.regionData || regionData, this.props.customItem);
        this.onChange = (value) => {
            const { onChange = noop } = this.props;
            // 通过 value 查找 code
            let tmp = this.props.regionData || regionData;
            const postcode = [];
            const code = value.map((item) => {
                for (let i = 0; i < tmp.length; i++) {
                    if (tmp[i].value === item) {
                        const code = tmp[i].code;
                        postcode.push(tmp[i].postcode);
                        tmp = tmp[i].children || [];
                        return code;
                    }
                }
            }).filter(code => !!code);
            const detail = { value, code };
            if (postcode[2])
                detail.postcode = postcode[2];
            this.setState({ value, isInOnChangeUpdate: true });
            onChange({ detail });
        };
        this.onOk = () => {
            this.dismissByOk = true;
        };
        this.onVisibleChange = (visible) => {
            if (!visible && !this.dismissByOk) {
                const { onCancel = noop } = this.props;
                onCancel();
            }
            this.dismissByOk = false;
        };
    }
    static getDerivedStateFromProps(nextProps, lastState) {
        var _a;
        // eslint-disable-next-line eqeqeq
        const isControlled = nextProps.value != undefined;
        if (isControlled) {
            if (nextProps.value !== lastState.pValue) {
                // 受控更新
                return {
                    pValue: nextProps.value,
                    value: nextProps.value
                };
            }
            else if (lastState.isInOnChangeUpdate && nextProps.value !== lastState.value) {
                // 受控还原
                return {
                    value: nextProps.value,
                    isInOnChangeUpdate: false
                };
            }
        }
        else if (nextProps.value !== lastState.pValue) {
            // 初次更新才设置 defaultValue
            return {
                pValue: nextProps.value,
                value: (_a = nextProps.defaultValue) !== null && _a !== void 0 ? _a : []
            };
        }
        return null;
    }
    render() {
        const { children, disabled, } = this.props;
        const { value, } = this.state;
        return (
        // @ts-ignore
        React.createElement(AntPicker, { data: this.regionData, value: value, onChange: this.onChange, onOk: this.onOk, onVisibleChange: this.onVisibleChange, disabled: disabled },
            React.createElement(TouchableWithoutFeedback, null, children)));
    }
}
//# sourceMappingURL=region.js.map