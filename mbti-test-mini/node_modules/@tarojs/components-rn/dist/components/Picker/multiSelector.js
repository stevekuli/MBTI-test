import * as React from 'react';
import AntPicker from '@ant-design/react-native/lib/picker';
import { noop } from '../../utils';
import { TouchableWithoutFeedback } from 'react-native';
/**
 * 比较数组内每个数值
 *
 * @returns true = same, false = different
 */
function shallowDiffValue(value = [], lastValue = []) {
    if (value.length !== lastValue.length)
        return false;
    for (let i = 0; i < value.length; i++) {
        if (value[i] !== lastValue[i]) {
            return false;
        }
    }
    return true;
}
function convertToObj(item, rangeKey = '') {
    if (typeof item === 'object') {
        return { value: item[rangeKey], label: item[rangeKey] };
    }
    else {
        return { value: item, label: item };
    }
}
// eslint-disable-next-line default-param-last
function formatRange(range = [], rangeKey) {
    const result = (range[0] || []).map(item => {
        return convertToObj(item, rangeKey);
    });
    let tmp = result;
    for (let i = 1; i < range.length; i++) {
        const nextColData = (range[i] || []).map(item => {
            return convertToObj(item, rangeKey);
        });
        tmp.forEach(item => {
            item.children = nextColData;
        });
        tmp = nextColData;
    }
    return result;
}
function getIndexByValues(range = [], value = []) {
    let tmp = range;
    return value.map(v => {
        for (let i = 0; i < tmp.length; i++) {
            if (tmp[i].value === v) {
                tmp = tmp[i].children || [];
                return i;
            }
        }
        return 0;
    });
}
// Todo: 支持 defaultValue
export default class MultiSelector extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            cols: 3,
            pRange: [],
            pValue: [],
            range: [],
            value: []
        };
        this.dismissByOk = false;
        this.onChange = (value) => {
            const { onChange = noop } = this.props;
            const { range } = this.state;
            onChange({ detail: { value: getIndexByValues(range, value) } });
        };
        this.onPickerChange = (value) => {
            const { onColumnChange = noop } = this.props;
            const { range, value: stateValue } = this.state;
            const indexes = getIndexByValues(range, value);
            // 通过比对确定是哪一列数据变了
            let changingColIndex = 0;
            for (let i = 0; i < stateValue.length; i++) {
                if (stateValue[i] !== value[i]) {
                    changingColIndex = i;
                    break;
                }
            }
            onColumnChange({ detail: { column: changingColIndex, value: indexes[changingColIndex] } });
            this.setState({ value });
        };
        this.onOk = () => {
            this.dismissByOk = true;
        };
        this.onVisibleChange = (visible) => {
            if (!visible && !this.dismissByOk) {
                const { onCancel = noop } = this.props;
                onCancel();
            }
            this.dismissByOk = false;
        };
    }
    static getDerivedStateFromProps(nextProps, lastState) {
        let ret = null;
        if (nextProps.range !== lastState.pRange) {
            ret = ret || {};
            nextProps.range && (ret.cols = nextProps.range.length);
            ret.pRange = nextProps.range;
            ret.range = formatRange(nextProps.range, nextProps.rangeKey);
            // ------------------------------------------------------------------
            // ⚠️@todo range 变 value 不变，这种情况下，因为 value 没变，用户切换不了选项
            // ------------------------------------------------------------------
        }
        if (!shallowDiffValue(nextProps.value, lastState.pValue)) {
            // 初始化的时候和点击确认时候，会走到里面
            ret = ret || {};
            ret.pValue = nextProps.value;
            let tmp = (ret && ret.range) || lastState.range;
            ret.value = (nextProps.value || []).map((valIndex = 0) => {
                const v = tmp[valIndex] && tmp[valIndex].value;
                tmp = (tmp[valIndex] && tmp[valIndex].children) || [];
                return v;
            });
        }
        return ret;
    }
    render() {
        const { children, disabled, itemStyle, indicatorStyle } = this.props;
        const { cols, range, value } = this.state;
        return (
        // @ts-ignore
        React.createElement(AntPicker, { data: range, value: value, cols: cols, itemStyle: itemStyle, indicatorStyle: indicatorStyle, onChange: this.onChange, onPickerChange: this.onPickerChange, onOk: this.onOk, onVisibleChange: this.onVisibleChange, disabled: disabled },
            React.createElement(TouchableWithoutFeedback, null, children)));
    }
}
MultiSelector.defaultProps = {
    range: [],
    value: []
};
//# sourceMappingURL=multiSelector.js.map