import * as React from 'react';
import AntDatePicker from '@ant-design/react-native/lib/date-picker';
import { noop } from '../../utils';
import { TouchableWithoutFeedback } from 'react-native';
import View from '../View';
function formatTimeStr(time = '') {
    let [year, month, day] = time.split('-');
    year = ~~year || 2000;
    month = ~~month || 1;
    day = ~~day || 1;
    return new Date(year, month - 1, day);
}
function dateToString(date, fields = 'day') {
    const yyyy = date.getFullYear() + '';
    const MM = ('0' + (date.getMonth() + 1)).slice(-2);
    const dd = ('0' + date.getDate()).slice(-2);
    let ret = yyyy;
    if (fields === 'month' || fields === 'day') {
        ret += `-${MM}`;
        if (fields === 'day') {
            ret += `-${dd}`;
        }
    }
    return ret;
}
export default class DateSelector extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            pValue: '',
            value: '',
            isInOnChangeUpdate: false,
        };
        this.dismissByOk = false;
        this.onChange = (date) => {
            const { fields = 'day', onChange = noop } = this.props;
            const ret = dateToString(date, fields);
            this.setState({
                isInOnChangeUpdate: true,
                value: ret,
            });
            onChange({
                detail: {
                    value: ret
                }
            });
        };
        this.onDismiss = () => {
            const { onCancel = noop } = this.props;
            onCancel();
        };
    }
    static getDerivedStateFromProps(nextProps, lastState) {
        var _a;
        // eslint-disable-next-line eqeqeq
        const isControlled = nextProps.value != undefined;
        if (isControlled) {
            if (nextProps.value !== lastState.pValue) {
                return {
                    value: nextProps.value,
                    pValue: nextProps.value,
                };
            }
            else if (lastState.isInOnChangeUpdate && nextProps.value !== lastState.value) {
                return {
                    value: nextProps.value,
                    isInOnChangeUpdate: false
                };
            }
        }
        else if (nextProps.value !== lastState.pValue) {
            return {
                value: (_a = nextProps.defaultValue) !== null && _a !== void 0 ? _a : dateToString(new Date()),
                pValue: nextProps.value,
            };
        }
        return null;
    }
    render() {
        const { children, start = '1970-01-01', end = '2999-01-01', fields, disabled, } = this.props;
        const { value, } = this.state;
        let mode = 'date';
        if (fields === 'year') {
            mode = 'year';
        }
        else if (fields === 'month') {
            mode = 'month';
        }
        return (React.createElement(AntDatePicker, { mode: mode, value: formatTimeStr(value), minDate: formatTimeStr(start), maxDate: formatTimeStr(end), onChange: this.onChange, onDismiss: this.onDismiss, disabled: disabled },
            React.createElement(TouchableWithoutFeedback, null,
                React.createElement(View, null, children))));
    }
}
DateSelector.defaultProps = {
    fields: 'day',
};
//# sourceMappingURL=date.js.map