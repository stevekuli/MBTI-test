/**
 * ✔ percent
 * ✔ showInfo(show-info)
 * ✔ strokeWidth(stroke-width)
 * - color
 * ✔ activeColor
 * ✔ backgroundColor
 * ✔ active
 * ✔ activeMode(active-mode)
 *
 * @warn Height and width accept percentages after 0.42
 *
 * @example
 *  <Progress
 *    percent={this.state.progressPercent}
 *    showInfo={true}
 *    activeColor="orange"
 *    backgroundColor="pink"
 *    active={true}
 *    activeMode="forwards"
 *    style={{ marginTop: 10 }}
 *  />
 */
import * as React from 'react';
import { View, Text, Animated, Easing, } from 'react-native';
import styles from './styles';
export default class _Progress extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            percent: 0,
            prevPercent: 0,
            valve: new Animated.Value(0)
        };
        this.animate = () => {
            const { active, activeMode } = this.props;
            const { percent, prevPercent, valve } = this.state;
            const toValve = percent / 100;
            if (!active || (activeMode !== 'backwards' && activeMode !== 'forwards')) {
                Animated.timing(valve, {
                    toValue: toValve,
                    duration: 0,
                    useNativeDriver: false
                }).start();
                return;
            }
            const sequence = [];
            const duration = (activeMode === 'forwards' ? Math.abs(percent - prevPercent) : percent) / 100 * 1000;
            if (activeMode === 'backwards') {
                sequence.push(Animated.timing(valve, {
                    toValue: 0,
                    duration: 0,
                    useNativeDriver: false
                }));
            }
            sequence.push(Animated.timing(valve, {
                toValue: toValve,
                easing: Easing.linear,
                duration,
                useNativeDriver: false
            }));
            Animated.sequence(sequence).start();
        };
    }
    static getDerivedStateFromProps(props, state) {
        return props.percent !== state.percent ? {
            percent: props.percent,
            prevPercent: state.percent,
            valve: state.valve
        } : null;
    }
    componentDidMount() {
        this.animate();
    }
    getSnapshotBeforeUpdate(_prevProps, prevState) {
        return prevState.percent !== this.state.percent;
    }
    componentDidUpdate(_prevProps, _prevState, snapshot) {
        if (snapshot) {
            this.animate();
        }
    }
    render() {
        const { style, percent, showInfo, borderRadius, strokeWidth, activeColor, backgroundColor, } = this.props;
        const width = this.state.valve.interpolate({
            inputRange: [0, 1],
            outputRange: ['0%', '100%']
        });
        return (React.createElement(View, { style: [styles.wrapper, style] },
            React.createElement(View, { style: [
                    styles.bar, {
                        height: strokeWidth,
                        backgroundColor
                    }
                ] },
                React.createElement(Animated.View, { style: [
                        styles.barThumb, {
                            width,
                            height: '100%',
                            backgroundColor: activeColor,
                            borderBottomRightRadius: Number(borderRadius),
                            borderTopRightRadius: Number(borderRadius),
                        }
                    ] })),
            showInfo && React.createElement(Text, { style: styles.info },
                percent,
                "%")));
    }
}
_Progress.defaultProps = {
    percent: 0,
    strokeWidth: 6,
    activeColor: '#09BB07',
    backgroundColor: '#EBEBEB',
    activeMode: 'backwards',
    borderRadius: 0,
};
//# sourceMappingURL=index.js.map