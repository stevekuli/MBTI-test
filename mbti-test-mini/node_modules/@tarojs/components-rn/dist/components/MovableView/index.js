import * as React from 'react';
import { PanResponder, Animated } from 'react-native';
import View from '../View';
class _MovableView extends React.Component {
    constructor(props) {
        super(props);
        this.$ref = React.createRef();
        this.createPanResponder = () => {
            this.panResponder = PanResponder.create({
                onMoveShouldSetPanResponder: () => !this.props.disabled,
                onMoveShouldSetPanResponderCapture: () => !this.props.disabled,
                onPanResponderGrant: () => {
                    var _a, _b;
                    const { pan } = this.state;
                    const { direction } = this.props;
                    pan.setOffset({
                        x: direction === 'all' || direction === 'horizontal' ? pan.x._value : 0,
                        y: direction === 'all' || direction === 'vertical' ? pan.y._value : 0
                    });
                    (_b = (_a = this.props).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a);
                },
                onPanResponderMove: (e, gestureState) => {
                    var _a, _b;
                    const { pan } = this.state;
                    const { direction } = this.props;
                    Animated.event([
                        null,
                        {
                            dx: direction === 'all' || direction === 'horizontal' ? this.state.pan.x : new Animated.Value(0),
                            dy: direction === 'all' || direction === 'vertical' ? this.state.pan.y : new Animated.Value(0),
                        }
                    ], {
                        useNativeDriver: false
                    })(e, gestureState);
                    (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, {
                        x: pan.x,
                        y: pan.y,
                        source: 'touch'
                    });
                },
                onPanResponderRelease: () => {
                    var _a, _b;
                    const { pan } = this.state;
                    const { layout = { width: 0, height: 0 } } = this.props;
                    this.state.pan.flattenOffset();
                    const x = pan.x._value > layout.width - this.W ? layout.width - this.W : pan.x._value < 0 ? 0 : pan.x._value;
                    const y = pan.y._value > layout.height - this.H ? layout.height - this.H : pan.y._value < 0 ? 0 : pan.y._value;
                    const needChange = x !== pan.x._value || y !== pan.y._value;
                    Animated.spring(this.state.pan, {
                        toValue: { x: x, y: y },
                        useNativeDriver: false
                    }).start(() => {
                        var _a, _b;
                        if (needChange) {
                            (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, {
                                x,
                                y,
                                source: 'friction'
                            });
                        }
                    });
                    (_b = (_a = this.props).onDragEnd) === null || _b === void 0 ? void 0 : _b.call(_a);
                }
            });
        };
        this._onLayout = (event) => {
            const { width, height } = event.nativeEvent.layout;
            this.W = width;
            this.H = height;
        };
        this.state = {
            pan: new Animated.ValueXY(),
            xOffset: 0,
            yOffset: 0
        };
        const { x = 0, y = 0 } = props;
        Animated.spring(this.state.pan, {
            toValue: { x: Number(x), y: Number(y) },
            useNativeDriver: false
        }).start();
        this.createPanResponder();
    }
    componentDidMount() {
        const { pan } = this.state;
        const { onMove } = this.props;
        if (typeof onMove === 'function')
            pan.addListener((values) => onMove(values));
    }
    componentWillUnmount() {
        const { pan } = this.state;
        pan.removeAllListeners();
    }
    render() {
        const { style } = this.props;
        return (React.createElement(Animated.View, Object.assign({ testID: "movableView", ref: this.$ref, onLayout: this._onLayout }, this.panResponder.panHandlers, { style: [{
                    alignSelf: 'flex-start'
                }, style, this.state.pan.getLayout()] }),
            React.createElement(View, null, this.props.children)));
    }
}
_MovableView.defaultProps = {
    direction: 'none',
    disabled: false,
    animation: true
};
export default _MovableView;
//# sourceMappingURL=index.js.map