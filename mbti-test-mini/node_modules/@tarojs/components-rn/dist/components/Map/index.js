/**
 * 地图组件【EXPERIMENTAL】
 *
 * 安卓和 iOS 统一用谷歌地图
 *
 * @see https://developers.weixin.qq.com/miniprogram/dev/component/map.html
 * @see https://docs.expo.io/versions/v27.0.0/sdk/map-view
 * @see https://github.com/react-community/react-native-maps
 *
 * 颜色并不支持8位十六进制
 *
 * ✔ longitude
 * ✔ latitude
 * ✘ scale
 * ✔ markers (部分支持)
 * ✔ polyline (部分属性支持)
 * ✔ polygons (不支持 zIndex)
 * ✔ circles
 * ✘ includePoints
 * ✔ showLocation
 * ✘ subkey
 * ✘ enable3D
 * ✔ showCompass
 * ✘ enableOverlooking
 * ✔ enableZoom
 * ✔ enableScroll
 * ✔ enableRotate
 * ✔ onMarkerClick (onMarkerTap)
 * ✔ onCalloutClick (onCalloutTap)
 * ✘ onControlClick (onControlTap)
 * ✔ onRegionChange (不支持 causedBy)
 * ✔ onClick (onTap)
 * ✔ onUpdated
 * ✔ onPoiClick (onPoiTap)
 */
import * as React from 'react';
import { Text, View, Dimensions } from 'react-native';
// @ts-ignore // The type definitions for MapView have not been created.
import MapView, { Callout, Polygon, Circle, Polyline, Marker } from 'react-native-maps';
import { noop } from '../../utils';
const { width, height } = Dimensions.get('window');
const ASPECT_RATIO = width / height;
const LATITUDE_DELTA = 0.0922;
const LONGITUDE_DELTA = LATITUDE_DELTA * ASPECT_RATIO;
class _Map extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            networkState: ''
        };
        this._onRegionChange = () => {
            const { onRegionChange } = this.props;
            onRegionChange && onRegionChange({
                type: 'begin',
                timeStamp: Date.now()
            });
        };
        this._onRegionChangeComplete = () => {
            const { onRegionChange } = this.props;
            onRegionChange && onRegionChange({
                type: 'end',
                timeStamp: Date.now()
            });
        };
        this._onClick = (e) => {
            const { onClick } = this.props;
            onClick && onClick(e.nativeEvent.coordinate);
        };
        this._onMapReady = () => {
            const { onUpdated } = this.props;
            onUpdated && onUpdated();
        };
        this._onPoiClick = () => {
            const { onPoiClick } = this.props;
            onPoiClick && onPoiClick();
        };
        this.getCallout = (marker) => {
            const { onCalloutClick } = this.props;
            const { id, callout } = marker;
            if (!callout)
                return null;
            return (React.createElement(Callout, { onPress: () => {
                    onCalloutClick && onCalloutClick(id);
                } },
                React.createElement(View, { style: {
                        borderRadius: callout.borderRadius,
                        borderWidth: callout.borderWidth,
                        borderColor: callout.borderColor,
                        backgroundColor: callout.bgColor,
                        padding: callout.padding
                    } },
                    React.createElement(Text, { style: {
                            fontSize: callout.fontSize,
                            color: callout.color,
                            textAlign: callout.textAlign
                        } }, callout.content))));
        };
    }
    render() {
        const { latitude, longitude, markers, polyline, polygons, circles, showLocation, showCompass, enableZoom, enableScroll, enableRotate, onMarkerClick } = this.props;
        return (React.createElement(MapView, { style: { flex: 1 }, 
            // provider={MapView.PROVIDER_GOOGLE}
            initialRegion: {
                latitude,
                longitude,
                latitudeDelta: LATITUDE_DELTA,
                longitudeDelta: LONGITUDE_DELTA
            }, region: {
                latitude,
                longitude,
                latitudeDelta: LATITUDE_DELTA,
                longitudeDelta: LONGITUDE_DELTA
            }, minZoomLevel: 5, maxZoomLevel: 18, showsUserLocation: showLocation, showsCompass: showCompass, zoomEnabled: enableZoom, scrollEnabled: enableScroll, rotateEnabled: enableRotate, onRegionChange: this._onRegionChange, onRegionChangeComplete: this._onRegionChangeComplete, onPress: this._onClick, onMapReady: this._onMapReady, onPoiClick: this._onPoiClick },
            (markers || []).map((marker) => (React.createElement(Marker, { key: marker.id, coordinate: {
                    latitude: marker.latitude,
                    longitude: marker.longitude
                }, title: marker.title, image: { uri: marker.iconPath }, rotation: marker.rotate, opacity: marker.alpha, anchor: marker.anchor, onPress: () => {
                    onMarkerClick && onMarkerClick(marker.id);
                } }, this.getCallout(marker)))),
            (polyline || []).map((p, index) => (React.createElement(Polyline, { key: `polyline_${index}`, coordinates: p.points, strokeColor: p.color, strokeWidth: p.width }))),
            (polygons || []).map((p, index) => (React.createElement(Polygon, { key: `polygon_${index}`, coordinates: p.points, strokeColor: p.strokeColor, strokeWidth: p.strokeWidth, fillColor: p.fillColor }))),
            (circles || []).map((c, index) => (React.createElement(Circle, { key: `circle_${index}`, center: { latitude: c.latitude, longitude: c.longitude }, strokeColor: c.color, fillColor: c.fillColor, radius: c.radius, strokeWidth: c.strokeWidth })))));
    }
}
_Map.defaultProps = {
    longitude: 0,
    latitude: 0,
    scale: 16,
    markers: [],
    polyline: [],
    polygons: [],
    circles: [],
    includePoints: [],
    subkey: '',
    enableZoom: true,
    enableScroll: true,
    onMarkerClick: noop,
    onCalloutClick: noop,
    onControlClick: noop,
    onRegionChange: noop,
    onClick: noop,
    onUpdated: noop,
    onPoiClick: noop
};
export default _Map;
//# sourceMappingURL=index.js.map