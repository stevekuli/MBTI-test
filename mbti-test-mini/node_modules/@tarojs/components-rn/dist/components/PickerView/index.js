var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import AntPickerView from '@ant-design/react-native/lib/picker-view';
import { noop } from '../../utils';
export default class _Picker extends React.Component {
    constructor() {
        super(...arguments);
        this.onChange = (val) => {
            const { onChange = noop } = this.props;
            onChange({ detail: { value: val } });
        };
        this.handleChildren = (children) => {
            return children.map((child, index) => {
                return {
                    label: this.getLabelFromChildren(child),
                    value: index
                };
            });
        };
        this.joinString = (data) => {
            return (Array.isArray(data) ? data : [data]).join('');
        };
        this.getLabelFromChildren = (child) => {
            return child.props && child.props.children ? this.getLabelFromChildren(child.props.children) : this.joinString(child);
        };
        this.getDataFromChildren = (children) => {
            return (Array.isArray(children) ? children : [children]).map((child) => {
                return this.handleChildren(child.props && child.props.children ? child.props.children : [child]);
            });
        };
    }
    render() {
        const _a = this.props, { data, value, children } = _a, restProps = __rest(_a, ["data", "value", "children"]);
        if (!children)
            return null;
        return (React.createElement(AntPickerView, Object.assign({}, restProps, { cols: 1, value: value, data: data.length > 0 ? data : this.getDataFromChildren(children), onChange: this.onChange, cascade: false })));
    }
}
_Picker.defaultProps = {
    data: [],
    value: []
};
//# sourceMappingURL=index.js.map