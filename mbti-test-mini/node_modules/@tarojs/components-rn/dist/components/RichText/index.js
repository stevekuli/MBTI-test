/**
 * âœ” nodes
 */
import * as React from 'react';
import { View } from 'react-native';
import { WebView } from 'react-native-webview';
import { omit } from '../../utils';
class _RichText extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            webViewHeight: 0
        };
        this.webview = React.createRef();
        this.renderChildrens = (arr) => {
            if (arr.length === 0)
                return '';
            return arr.map((list) => {
                if (list.type === 'text') {
                    return list.text;
                }
                return this.renderNodes(list);
            }).join('');
        };
        this.renderNodes = (item) => {
            const child = item.children ? this.renderChildrens(item.children) : '';
            return `<${item.name} ${item.attrs && Object.keys(item.attrs).map(key => {
                return `${key}="${item.attrs[key]}"`;
            }).join(' ')}>${child}</${item.name}>`;
        };
        this.onWebViewMessage = (event) => {
            this.setState({
                webViewHeight: Number(event.nativeEvent.data)
            });
        };
    }
    render() {
        const { style, nodes } = this.props;
        const otherProps = omit(this.props, ['style', 'nodes']);
        const html = typeof nodes === 'string'
            ? nodes
            : nodes.map((item) => {
                return this.renderNodes(item);
            }).join('');
        return (React.createElement(View, { style: Object.assign({
                height: this.state.webViewHeight,
                width: '100%',
            }, style) },
            React.createElement(WebView, Object.assign({ ref: this.webview, source: { html: '<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>' + html }, scalesPageToFit: false, onMessage: this.onWebViewMessage, injectedJavaScript: `
            document.documentElement.style.padding = 0;
            document.documentElement.style.margin = 0;
            document.body.style.padding = 0;
            document.body.style.margin = 0;
            window.ReactNativeWebView.postMessage(document.body.scrollHeight);
            true;
          `, onLoadEnd: () => { var _a; return (_a = this.webview.current) === null || _a === void 0 ? void 0 : _a.injectJavaScript('window.ReactNativeWebView.postMessage(document.body.scrollHeight);'); }, style: {
                    backgroundColor: 'transparent'
                } }, otherProps))));
    }
}
_RichText.defaultProps = {
    nodes: ''
};
export default _RichText;
//# sourceMappingURL=index.js.map