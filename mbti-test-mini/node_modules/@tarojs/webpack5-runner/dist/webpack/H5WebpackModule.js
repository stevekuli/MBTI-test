"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.H5WebpackModule = void 0;
const helper_1 = require("@tarojs/helper");
const postcss_h5_1 = require("../postcss/postcss.h5");
const WebpackModule_1 = require("./WebpackModule");
const taroModuleRgx = [/@tarojs[/\\_]components/, /\btaro-components\b/];
const defaultEsnextModuleRgx = [
    /@tarojs[/\\_]components/,
    /\btaro-components\b/,
    /@tarojs[/\\_]taro-h5/,
    /\btaro-h5\b/,
    /@tarojs[/\\_]router/,
    /\btaro-router\b/
];
const isTaroModule = (filename) => taroModuleRgx.some(reg => reg.test(filename));
const getEsnextModuleRules = (esnextModules) => {
    return [...defaultEsnextModuleRgx, ...esnextModules];
};
class H5WebpackModule {
    constructor(combination) {
        this.combination = combination;
    }
    getModules() {
        const { styleLoaderOption = {}, sassLoaderOption = {}, lessLoaderOption = {}, stylusLoaderOption = {}, staticDirectory = 'static' } = this.combination.config;
        const { postcssOption, cssModuleOption } = this.parsePostCSSOptions();
        const resolveUrlLoader = WebpackModule_1.WebpackModule.getResolveUrlLoader();
        const sassLoader = WebpackModule_1.WebpackModule.getSassLoader(sassLoaderOption);
        const scssLoader = WebpackModule_1.WebpackModule.getScssLoader(sassLoaderOption);
        const lessLoader = WebpackModule_1.WebpackModule.getLessLoader(lessLoaderOption);
        const stylusLoader = WebpackModule_1.WebpackModule.getStylusLoader(stylusLoaderOption);
        const rule = {
            taroStyle: this.getTaroStyleRule(styleLoaderOption),
            customStyle: this.getCustomStyleRule(styleLoaderOption),
            css: {
                test: helper_1.REG_STYLE,
                oneOf: this.getCSSLoaders(cssModuleOption)
            },
            postcss: this.getPostCSSRule(postcssOption),
            sass: {
                test: helper_1.REG_SASS_SASS,
                use: [resolveUrlLoader, sassLoader]
            },
            scss: {
                test: helper_1.REG_SASS_SCSS,
                use: [resolveUrlLoader, scssLoader]
            },
            less: {
                test: helper_1.REG_LESS,
                use: [lessLoader]
            },
            stylus: {
                test: helper_1.REG_STYLUS,
                use: [stylusLoader]
            },
            script: this.getScriptRule(),
            media: this.getMediaRule(staticDirectory),
            font: this.getFontRule(staticDirectory),
            image: this.getImageRule(staticDirectory)
        };
        return { rule };
    }
    parsePostCSSOptions() {
        const { postcss: postcssOption = {} } = this.combination.config;
        const defaultCssModuleOption = {
            enable: false,
            config: {
                namingPattern: 'global',
                generateScopedName: '[name]__[local]___[hash:base64:5]'
            }
        };
        const cssModuleOption = (0, helper_1.recursiveMerge)({}, defaultCssModuleOption, postcssOption.cssModules);
        return {
            postcssOption,
            cssModuleOption
        };
    }
    /** Taro 内置样式（@tarojs/components）必须在顶部注入，以保证可被覆盖 */
    getTaroStyleRule(styleLoaderOption) {
        const defaultConfig = {
            insert: function insertAtTop(element) {
                // eslint-disable-next-line no-var
                var parent = document.querySelector('head');
                if (parent) {
                    // eslint-disable-next-line no-var
                    var lastInsertedElement = window._lastElementInsertedByStyleLoader;
                    if (!lastInsertedElement) {
                        parent.insertBefore(element, parent.firstChild);
                    }
                    else if (lastInsertedElement.nextSibling) {
                        parent.insertBefore(element, lastInsertedElement.nextSibling);
                    }
                    else {
                        parent.appendChild(element);
                    }
                    window._lastElementInsertedByStyleLoader = element;
                }
            }
        };
        const options = (0, helper_1.recursiveMerge)({}, defaultConfig, styleLoaderOption);
        const topStyleLoader = WebpackModule_1.WebpackModule.getStyleLoader(options);
        return {
            test: helper_1.REG_STYLE,
            use: [topStyleLoader],
            include: [(filename) => isTaroModule(filename)]
        };
    }
    /** 开发者的样式在尾部注入 */
    getCustomStyleRule(styleLoaderOption) {
        const { mode, enableExtract = mode === 'production' } = this.combination.config;
        const extractCssLoader = WebpackModule_1.WebpackModule.getExtractCSSLoader();
        const styleLoader = WebpackModule_1.WebpackModule.getStyleLoader(styleLoaderOption);
        const lastStyleLoader = enableExtract ? extractCssLoader : styleLoader;
        return {
            test: helper_1.REG_STYLE,
            use: [lastStyleLoader],
            exclude: [(filename) => isTaroModule(filename)]
        };
    }
    getCSSLoaders(cssModuleOption) {
        const { cssLoaderOption = {} } = this.combination.config;
        const cssLoader = WebpackModule_1.WebpackModule.getCSSLoader(cssLoaderOption);
        const cssLoaders = [{
                use: [cssLoader]
            }];
        if (cssModuleOption.enable) {
            const cssModuleOptionConfig = (0, helper_1.recursiveMerge)({}, {
                namingPattern: 'module',
                generateScopedName: '[name]__[local]___[hash:base64:5]'
            }, cssModuleOption.config);
            const cssLoaderWithModule = WebpackModule_1.WebpackModule.getCSSLoaderWithModule(cssModuleOptionConfig, cssLoaderOption);
            const styleModuleReg = /(.*\.module).*\.(css|s[ac]ss|less|styl)\b/;
            const styleGlobalReg = /(.*\.global).*\.(css|s[ac]ss|less|styl)\b/;
            let cssModuleCondition;
            if (cssModuleOptionConfig.namingPattern === 'module') {
                /* 不排除 node_modules 内的样式 */
                cssModuleCondition = styleModuleReg;
                // for vue
                cssLoaders.unshift({
                    resourceQuery: /module=/,
                    use: [cssLoaderWithModule]
                });
            }
            else {
                cssModuleCondition = {
                    and: [
                        { not: styleGlobalReg },
                        { not: helper_1.isNodeModule }
                    ]
                };
            }
            cssLoaders.unshift({
                include: [cssModuleCondition],
                use: [cssLoaderWithModule]
            });
        }
        return cssLoaders;
    }
    getPostCSSRule(postcssOption) {
        const { appPath, config } = this.combination;
        const { esnextModules = [], designWidth = 750, deviceRatio } = config;
        const esnextModuleRules = getEsnextModuleRules(esnextModules);
        /**
         * isEsnextModule
         *
         * 使用正则匹配判断是否是es模块
         * 规则参考：https://github.com/webpack/webpack/blob/master/lib/RuleSet.js#L413
         */
        const isEsnextModule = (filename) => esnextModuleRules.some(pattern => {
            if (pattern instanceof RegExp) {
                return pattern.test(filename);
            }
            else {
                return filename.indexOf(pattern) > -1;
            }
        });
        this.__postcssOption = (0, postcss_h5_1.getDefaultPostcssConfig)({
            designWidth,
            deviceRatio,
            option: postcssOption,
            alias: config.alias,
        });
        const postcssLoader = WebpackModule_1.WebpackModule.getPostCSSLoader({
            postcssOptions: {
                plugins: (0, postcss_h5_1.getPostcssPlugins)(appPath, this.__postcssOption)
            }
        });
        return {
            test: helper_1.REG_STYLE,
            use: [postcssLoader],
            exclude: [
                filename => {
                    if (isTaroModule(filename)) {
                        return true;
                    }
                    else if (isEsnextModule(filename)) {
                        return false;
                    }
                    else {
                        return (0, helper_1.isNodeModule)(filename);
                    }
                }
            ]
        };
    }
    getScriptRule() {
        const { sourceDir } = this.combination;
        const { compile = {} } = this.combination.config;
        const rule = WebpackModule_1.WebpackModule.getScriptRule();
        rule.include = [
            sourceDir,
            filename => /(?<=node_modules[\\/]).*taro/.test(filename)
        ];
        if (Array.isArray(compile.include)) {
            rule.include.unshift(...compile.include);
        }
        rule.exclude = [filename => /@tarojs[\\/]components/.test(filename)];
        if (Array.isArray(compile.exclude)) {
            rule.exclude.unshift(...compile.exclude);
        }
        return rule;
    }
    getMediaRule(staticDirectory) {
        const sourceRoot = this.combination.sourceRoot;
        const { mediaUrlLoaderOption } = this.combination.config;
        const options = Object.assign({
            name(filename) {
                return filename.replace(sourceRoot + '/', `${staticDirectory}/media/`);
            }
        }, mediaUrlLoaderOption);
        return WebpackModule_1.WebpackModule.getMediaRule(sourceRoot, options);
    }
    getFontRule(staticDirectory) {
        const sourceRoot = this.combination.sourceRoot;
        const { fontUrlLoaderOption } = this.combination.config;
        const options = Object.assign({
            name(filename) {
                return filename.replace(sourceRoot + '/', `${staticDirectory}/fonts/`);
            }
        }, fontUrlLoaderOption);
        return WebpackModule_1.WebpackModule.getFontRule(sourceRoot, options);
    }
    getImageRule(staticDirectory) {
        const sourceRoot = this.combination.sourceRoot;
        const { imageUrlLoaderOption } = this.combination.config;
        const options = Object.assign({
            name(filename) {
                return filename.replace(sourceRoot + '/', `${staticDirectory}/images/`);
            }
        }, imageUrlLoaderOption);
        return WebpackModule_1.WebpackModule.getImageRule(sourceRoot, options);
    }
}
exports.H5WebpackModule = H5WebpackModule;
//# sourceMappingURL=H5WebpackModule.js.map