var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import ImageResizer from '@bam.tech/react-native-image-resizer';
import { Image } from 'react-native';
import { errorHandler, successHandler } from '../../utils';
/**
 * 压缩图片
 * @param opts
 */
export function compressImage(opt) {
    return __awaiter(this, void 0, void 0, function* () {
        const { src, quality = 80, success, fail, complete } = opt;
        const res = { errMsg: 'compressImage:ok', tempFilePath: '' };
        const _createResizedImage = (width = 800, height = 800) => __awaiter(this, void 0, void 0, function* () {
            try {
                const compressFormat = src.toLocaleLowerCase().endsWith('.png') ? 'PNG' : 'JPEG';
                const { uri } = yield ImageResizer.createResizedImage(src, width, height, compressFormat, quality);
                res.tempFilePath = uri;
                return successHandler(success, complete)(res);
            }
            catch (err) {
                res.errMsg = err.message;
                return errorHandler(fail, complete)(res);
            }
        });
        return Image.getSize(src, (width, height) => __awaiter(this, void 0, void 0, function* () {
            return yield _createResizedImage(width, height);
        }), () => __awaiter(this, void 0, void 0, function* () {
            return yield _createResizedImage();
        }));
    });
}
//# sourceMappingURL=index.js.map