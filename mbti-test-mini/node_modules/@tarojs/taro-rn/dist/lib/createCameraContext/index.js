var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { errorHandler, successHandler } from '../../utils';
import { requestCameraPermissionsAsync, requestMicrophonePermissionsAsync } from 'expo-camera';
const globalAny = global;
class CameraContext {
    constructor(cameraRef) {
        /**
         * 开始录像
         */
        this.startRecord = (option) => {
            Promise.all([requestCameraPermissionsAsync(), requestMicrophonePermissionsAsync()]).then(([cameraPermission, microphonePermission]) => {
                var _a, _b, _c, _d, _e;
                if (cameraPermission.granted && microphonePermission.granted) {
                    (_a = this.cameraRef) === null || _a === void 0 ? void 0 : _a.recordAsync().then((res) => {
                        var _a, _b;
                        const { uri } = res;
                        const result = {
                            tempVideoPath: uri,
                            tempThumbPath: '',
                            errMsg: 'stopRecord: ok'
                        };
                        (_b = (_a = this.recordCallback) === null || _a === void 0 ? void 0 : _a.success) === null || _b === void 0 ? void 0 : _b.call(_a, result);
                    }).catch((e) => {
                        var _a, _b, _c, _d;
                        const res = {
                            errMsg: e.message
                        };
                        (_a = option === null || option === void 0 ? void 0 : option.fail) === null || _a === void 0 ? void 0 : _a.call(option, res);
                        (_b = option === null || option === void 0 ? void 0 : option.complete) === null || _b === void 0 ? void 0 : _b.call(option, res);
                        (_d = (_c = this.recordCallback) === null || _c === void 0 ? void 0 : _c.fail) === null || _d === void 0 ? void 0 : _d.call(_c, { errMsg: e });
                    }).finally(() => {
                        var _a, _b;
                        (_b = (_a = this.recordCallback) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a, { errMsg: '' });
                    });
                    const res = {
                        errMsg: 'startRecord: ok'
                    };
                    (_b = option === null || option === void 0 ? void 0 : option.success) === null || _b === void 0 ? void 0 : _b.call(option, res);
                    (_c = option === null || option === void 0 ? void 0 : option.complete) === null || _c === void 0 ? void 0 : _c.call(option, res);
                }
                else {
                    const res = {
                        errMsg: 'startRecord: fail',
                        err: Error('You have not enabled camera or microphone permissions')
                    };
                    (_d = option === null || option === void 0 ? void 0 : option.fail) === null || _d === void 0 ? void 0 : _d.call(option, res);
                    (_e = option === null || option === void 0 ? void 0 : option.complete) === null || _e === void 0 ? void 0 : _e.call(option, res);
                }
            });
        };
        /**
         * 结束录像
         */
        this.stopRecord = (option) => {
            var _a;
            this.recordCallback = option;
            (_a = this.cameraRef) === null || _a === void 0 ? void 0 : _a.stopRecording();
        };
        /**
         * 拍摄照片
         */
        this.takePhoto = (option) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const { quality = 'normal', success, fail, complete } = option;
            let _quality = 0;
            switch (quality) {
                case 'high':
                    _quality = 1;
                    break;
                case 'normal':
                    _quality = 0.6;
                    break;
                case 'low':
                    _quality = 0.3;
                    break;
            }
            try {
                const { granted } = yield requestCameraPermissionsAsync();
                if (granted) {
                    if ((_a = this.cameraRef) === null || _a === void 0 ? void 0 : _a.takePictureAsync) {
                        const { uri } = yield this.cameraRef.takePictureAsync({ quality: _quality });
                        const res = {
                            tempImagePath: uri,
                            errMsg: 'takePhoto: ok'
                        };
                        return successHandler(success, complete)(res);
                    }
                    else {
                        const err = {
                            errMsg: 'takePhoto: fail',
                            err: Error('unknown')
                        };
                        return errorHandler(fail, complete)(err);
                    }
                }
                else {
                    const err = {
                        errMsg: 'takePhoto: fail',
                        err: Error('You have not enabled camera permissions')
                    };
                    return errorHandler(fail, complete)(err);
                }
            }
            catch (error) {
                const err = {
                    errMsg: 'takePhoto: fail',
                    err: error
                };
                return errorHandler(fail, complete)(err);
            }
        });
        /**
         * 获取 Camera 实时帧数据
         * not support
         */
        this.onCameraFrame = () => {
            return {
                start() {
                    console.log('not support');
                },
                stop() {
                    console.log('not support');
                }
            };
        };
        this.setZoom = () => {
            console.log('not support');
        };
        this.cameraRef = cameraRef;
    }
}
/**
 * 创建 video 上下文 VideoContext 对象。
 * {string} @param - id video 组件的 id
 * {object} @param t - 在自定义组件下，当前组件实例的this，以操作组件内 video 组件
 */
export function createCameraContext() {
    const ref = globalAny._taroCamera;
    if (ref) {
        return new CameraContext(ref);
    }
    else {
        return undefined;
    }
}
//# sourceMappingURL=index.js.map