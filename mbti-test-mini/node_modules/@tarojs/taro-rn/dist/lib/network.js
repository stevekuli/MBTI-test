import NetInfo, { NetInfoStateType } from '@react-native-community/netinfo';
let _unsubscribe = null;
let _callbacks = new Set();
function getTypeFromState(connectionInfo) {
    let type;
    if (connectionInfo.type === NetInfoStateType.wifi) {
        type = NetInfoStateType.wifi;
    }
    else if (connectionInfo.type === NetInfoStateType.cellular && connectionInfo.details.cellularGeneration) {
        type = connectionInfo.details.cellularGeneration;
    }
    else if (connectionInfo.type === NetInfoStateType.none) {
        type = 'none';
    }
    else {
        type = 'unknown';
    }
    return type;
}
export function getNetworkType(opts = {}) {
    const { success, fail, complete } = opts;
    return new Promise((resolve, reject) => {
        NetInfo.fetch()
            .then((connectionInfo) => {
            const res = {
                errMsg: 'getNetworkType:ok',
                networkType: getTypeFromState(connectionInfo),
            };
            success === null || success === void 0 ? void 0 : success(res);
            complete === null || complete === void 0 ? void 0 : complete(res);
            resolve(res);
        }).catch((err) => {
            const res = {
                errMsg: err.message
            };
            fail === null || fail === void 0 ? void 0 : fail(res);
            complete === null || complete === void 0 ? void 0 : complete(res);
            reject(err);
        });
    });
}
export function onNetworkStatusChange(fnc) {
    _callbacks.add(fnc);
    if (!_unsubscribe) {
        _unsubscribe = NetInfo.addEventListener((connectionInfo) => {
            _callbacks.forEach(cb => {
                const { isConnected } = connectionInfo;
                cb === null || cb === void 0 ? void 0 : cb({ isConnected, networkType: getTypeFromState(connectionInfo) });
            });
        });
    }
}
export function offNetworkStatusChange(fnc) {
    if (fnc && typeof fnc === 'function') {
        _callbacks.delete(fnc);
    }
    else if (fnc === undefined) {
        _callbacks.clear();
        _unsubscribe === null || _unsubscribe === void 0 ? void 0 : _unsubscribe();
        _unsubscribe = null;
    }
    else {
        console.warn('offNetworkStatusChange failed');
    }
}
//# sourceMappingURL=network.js.map