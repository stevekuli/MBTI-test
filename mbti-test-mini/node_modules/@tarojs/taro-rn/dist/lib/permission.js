var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Linking, AppState } from 'react-native';
import { getCameraPermissionsAsync, getMicrophonePermissionsAsync, requestCameraPermissionsAsync, requestMicrophonePermissionsAsync } from 'expo-camera';
import { getMediaLibraryPermissionsAsync, requestMediaLibraryPermissionsAsync } from 'expo-image-picker';
import { getForegroundPermissionsAsync, 
// getBackgroundPermissionsAsync,
requestForegroundPermissionsAsync,
// requestBackgroundPermissionsAsync
 } from 'expo-location';
import { errorHandler, successHandler } from '../utils';
const scopeMap = {
    'scope.userLocation': [getForegroundPermissionsAsync, requestForegroundPermissionsAsync],
    'scope.record': [getMicrophonePermissionsAsync, requestMicrophonePermissionsAsync],
    'scope.writePhotosAlbum': [getMediaLibraryPermissionsAsync, requestMediaLibraryPermissionsAsync],
    'scope.camera': [getCameraPermissionsAsync, requestCameraPermissionsAsync],
    // 'scope.userLocationBackground': [getBackgroundPermissionsAsync, requestBackgroundPermissionsAsync],
    // 'scope.NOTIFICATIONS': Permissions.NOTIFICATIONS,
    // 'scope.USER_FACING_NOTIFICATIONS': Permissions.USER_FACING_NOTIFICATIONS,
    // 'scope.CONTACTS': Permissions.CONTACTS,
    // 'scope.CALENDAR': Permissions.CALENDAR,
    // 'scope.REMINDERS': Permissions.REMINDERS, // ios only
    // 'scope.SYSTEM_BRIGHTNESS': Permissions.SYSTEM_BRIGHTNESS
};
let stateListener; // 缓存监听函数
let appStateSubscription;
const getAuthSetting = () => __awaiter(void 0, void 0, void 0, function* () {
    let auths = {};
    yield Promise.all(Object.keys(scopeMap).map((key) => __awaiter(void 0, void 0, void 0, function* () {
        const { granted } = yield scopeMap[key][0]();
        auths[key] = granted;
    })));
    return auths;
});
const handleAppStateChange = (_nextAppState, resolve, reject, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const { success, fail, complete } = opts;
    const res = {};
    if (AppState.currentState === 'active') {
        try {
            res.authSetting = yield getAuthSetting();
            res.errMsg = 'openSetting:ok';
            success === null || success === void 0 ? void 0 : success(res);
            complete === null || complete === void 0 ? void 0 : complete(res);
            appStateSubscription === null || appStateSubscription === void 0 ? void 0 : appStateSubscription.remove();
            resolve(res);
        }
        catch (error) {
            res.errMsg = 'openSetting:fail';
            fail === null || fail === void 0 ? void 0 : fail(res);
            complete === null || complete === void 0 ? void 0 : complete(res);
            reject(error);
        }
    }
    // AppState.currentState = nextAppState;
});
export function authorize(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const { scope, success, fail, complete } = opts;
        const res = {};
        try {
            const { granted } = yield scopeMap[scope][1]();
            if (granted) {
                res.errMsg = 'authorize:ok';
                return successHandler(success, complete)(res);
            }
            else {
                res.errMsg = 'authorize:denied/undetermined';
                return errorHandler(fail, complete)(res);
            }
        }
        catch (error) {
            res.errMsg = 'authorize:fail';
            return errorHandler(fail, complete)(res);
        }
    });
}
export function getSetting(opts = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { success, fail, complete } = opts;
        const res = {};
        try {
            res.authSetting = yield getAuthSetting();
            res.errMsg = 'getSetting:ok';
            return successHandler(success, complete)(res);
        }
        catch (error) {
            res.errMsg = 'getSetting:fail';
            return errorHandler(fail, complete)(res);
        }
    });
}
export function openSetting(opts = {}) {
    return new Promise((resolve, reject) => {
        stateListener = (next) => handleAppStateChange(next, resolve, reject, opts);
        appStateSubscription = AppState.addEventListener('change', stateListener);
        Linking.openSettings();
    });
}
//# sourceMappingURL=permission.js.map