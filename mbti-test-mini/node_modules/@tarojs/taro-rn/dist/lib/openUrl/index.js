var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Linking } from 'react-native';
import { successHandler, errorHandler } from '../../utils';
export function openUrl(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const { url, success, fail, complete } = opts || {};
        const res = { errMsg: 'openUrl:ok' };
        const isSupport = yield Linking.canOpenURL(url);
        if (isSupport) {
            yield Linking.openURL(url);
            return successHandler(success, complete)(res);
        }
        else {
            res.errMsg = 'openUrl:fail. Do not support the openUrl Api';
            return errorHandler(fail, complete)(res);
        }
    });
}
export default {
    openUrl
};
//# sourceMappingURL=index.js.map