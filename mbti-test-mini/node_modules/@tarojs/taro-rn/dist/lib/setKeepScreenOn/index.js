var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { activateKeepAwake, deactivateKeepAwake } from 'expo-keep-awake';
import { successHandler, errorHandler } from '../../utils';
/**
 * keepScreenOn
 * @param {{}} opts
 * @param {boolean} opts.keepScreenOn - 是否保持屏幕常亮
 */
export function setKeepScreenOn(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const res = { errMsg: 'setKeepScreenOn:ok' };
        const { keepScreenOn, success, fail, complete } = opts;
        try {
            if (keepScreenOn) {
                activateKeepAwake();
            }
            else {
                deactivateKeepAwake();
            }
            return successHandler(success, complete)(res);
        }
        catch (e) {
            res.errMsg = `setKeepScreenOn:fail invalid ${e}`;
            return errorHandler(fail, complete)(res);
        }
    });
}
//# sourceMappingURL=index.js.map