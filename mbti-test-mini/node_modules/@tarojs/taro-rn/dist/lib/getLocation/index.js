var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import Geolocation from '@react-native-community/geolocation';
import { requestForegroundPermissionsAsync } from 'expo-location';
import { errorHandler } from '../../utils';
export function getLocation(opts = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { isHighAccuracy = false, highAccuracyExpireTime = 3000, success, fail, complete } = opts;
        try {
            // @ts-ignore
            // todo: fix types
            const { granted } = yield requestForegroundPermissionsAsync();
            if (!granted) {
                const res = { errMsg: 'Permissions denied!' };
                return errorHandler(fail, complete)(res);
            }
        }
        catch (err) {
            const res = { errMsg: 'Permissions denied!' };
            return errorHandler(fail, complete)(res);
        }
        return new Promise((resolve, reject) => {
            Geolocation.getCurrentPosition(({ coords }) => {
                const { latitude, longitude, altitude, accuracy, speed } = coords;
                const res = {
                    latitude,
                    longitude,
                    speed: speed !== null && speed !== void 0 ? speed : 0,
                    altitude: altitude !== null && altitude !== void 0 ? altitude : 0,
                    accuracy,
                    verticalAccuracy: 0,
                    horizontalAccuracy: 0,
                    errMsg: 'getLocation:ok'
                };
                success === null || success === void 0 ? void 0 : success(res);
                complete === null || complete === void 0 ? void 0 : complete(res);
                resolve(res);
            }, (err) => {
                const res = {
                    errMsg: 'getLocation fail',
                    err
                };
                fail === null || fail === void 0 ? void 0 : fail(res);
                complete === null || complete === void 0 ? void 0 : complete(res);
                reject(res);
            }, {
                // 当 maximumAge 为 0 时，如果不设置 timeout 或 timeout 太少可能会超时
                timeout: highAccuracyExpireTime,
                // maximumAge 设置为 0 则会获取当前位置，而不是获取一个前不久缓存的位置
                maximumAge: 0,
                enableHighAccuracy: isHighAccuracy
            });
        });
    });
}
//# sourceMappingURL=index.js.map