var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { CameraRoll } from "@react-native-camera-roll/camera-roll";
import { requestCameraPermissionsAsync } from 'expo-camera';
import * as ImagePicker from 'expo-image-picker';
import { successHandler, errorHandler } from '../utils';
export const MEDIA_TYPE = {
    VIDEOS: 'Videos',
    IMAGES: 'Images'
};
export function saveMedia(opts, type, API) {
    return __awaiter(this, void 0, void 0, function* () {
        const { filePath, success, fail, complete } = opts;
        const { granted } = yield ImagePicker.requestMediaLibraryPermissionsAsync();
        if (!granted) {
            const res = { errMsg: 'Permissions denied!' };
            return errorHandler(fail, complete)(res);
        }
        const res = { errMsg: `${API}:ok` };
        const saveType = (type === 'video' || type === 'photo') ? type : 'auto';
        try {
            const url = yield CameraRoll.save(filePath, { type: saveType });
            res.path = url;
            return successHandler(success, complete)(res);
        }
        catch (err) {
            res.errMsg = err.message;
            return errorHandler(fail, complete)(res);
        }
    });
}
export function chooseMedia(opts, mediaTypes) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!opts || typeof opts !== 'object') {
            opts = {};
        }
        const { sizeType = [], sourceType = [], success, fail, complete, maxDuration } = opts;
        const options = {
            mediaTypes,
            quality: sizeType[0] === 'compressed' ? 0.7 : 1,
            videoMaxDuration: maxDuration
        };
        const isCamera = sourceType[0] === 'camera';
        const { granted } = isCamera ? yield requestCameraPermissionsAsync() : yield ImagePicker.requestMediaLibraryPermissionsAsync();
        if (!granted) {
            const res = { errMsg: 'Permissions denied!' };
            return errorHandler(fail, complete)(res);
        }
        let launchMediaAsync = isCamera ? ImagePicker.launchCameraAsync : ImagePicker.launchImageLibraryAsync;
        try {
            const resp = yield launchMediaAsync(options);
            const { uri, duration, width, height } = resp;
            resp.path = uri;
            let res = {};
            if (mediaTypes === MEDIA_TYPE.VIDEOS) {
                res = {
                    tempFilePath: uri,
                    duration,
                    width,
                    height
                };
            }
            else {
                res = {
                    tempFilePaths: [uri],
                    tempFiles: [resp]
                };
            }
            if (res.tempFilePath || (!!res.tempFilePaths && res.tempFilePaths.length > 0)) {
                return successHandler(success, complete)(res);
            }
            else {
                const res = {
                    errMsg: mediaTypes === MEDIA_TYPE.VIDEOS ? 'chooseVideo:fail cancel' : 'chooseImage:fail cancel',
                };
                return errorHandler(fail, complete)(res);
            }
        }
        catch (err) {
            const res = {
                errMsg: mediaTypes === MEDIA_TYPE.VIDEOS ? 'chooseVideo fail' : 'chooseImage fail',
                err
            };
            return errorHandler(fail, complete)(res);
        }
    });
}
//# sourceMappingURL=media.js.map