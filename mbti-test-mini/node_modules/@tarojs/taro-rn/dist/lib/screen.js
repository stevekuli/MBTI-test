var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as Brightness from 'expo-brightness';
import { errorHandler, shouldBeObject, successHandler } from '../utils';
/**
 * 设置屏幕亮度
 * @param opts
 * @param {number} opts.value - 屏幕亮度值，范围 0 ~ 1。0 最暗，1 最亮
 */
export function setScreenBrightness(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const { value, success, fail, complete } = opts;
        let res = { errMsg: 'setScreenBrightness:ok' };
        const isObject = shouldBeObject(opts);
        if (!isObject.res) {
            res = { errMsg: `setScreenBrightness${isObject.msg}` };
            return errorHandler(fail, complete)(res);
        }
        try {
            yield Brightness.setBrightnessAsync(value);
            return successHandler(success, complete)(res);
        }
        catch (e) {
            res.errMsg = `setScreenBrightness:fail invalid ${e}`;
            return errorHandler(fail, complete)(res);
        }
    });
}
/**
 * 获取屏幕亮度
 * @param opts
 */
export function getScreenBrightness(opts = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { success, fail, complete } = opts;
        const isObject = shouldBeObject(opts);
        if (!isObject.res) {
            const res = { errMsg: `getScreenBrightness${isObject.msg}` };
            return errorHandler(fail, complete)(res);
        }
        try {
            const value = yield Brightness.getBrightnessAsync();
            const res = {
                errMsg: 'getScreenBrightness: ok',
                value
            };
            // @ts-ignore
            return successHandler(success, complete)(res);
        }
        catch (e) {
            const res = {
                errMsg: `getScreenBrightness:fail invalid ${e}`
            };
            return errorHandler(fail, complete)(res);
        }
    });
}
//# sourceMappingURL=screen.js.map