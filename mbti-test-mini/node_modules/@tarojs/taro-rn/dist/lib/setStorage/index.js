var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import AsyncStorage from '@react-native-async-storage/async-storage';
import { errorHandler, successHandler } from '../../utils';
export function setStorage(option) {
    return __awaiter(this, void 0, void 0, function* () {
        const { key, data, success, fail, complete } = option;
        const res = { errMsg: 'setStorage:ok' };
        try {
            yield AsyncStorage.setItem(key, JSON.stringify(data));
            return successHandler(success, complete)(res);
        }
        catch (err) {
            res.errMsg = err.message;
            return errorHandler(fail, complete)(res);
        }
    });
}
//# sourceMappingURL=index.js.map