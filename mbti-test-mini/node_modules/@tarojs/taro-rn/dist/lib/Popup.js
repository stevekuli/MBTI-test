import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Modal, View, StyleSheet, Dimensions, Animated, Easing } from 'react-native';
import { ViewPropTypes } from 'deprecated-react-native-prop-types';
import { Mask } from './Mask';
const { width, height } = Dimensions.get('window');
const styles = StyleSheet.create({
    popup: {
        position: 'absolute',
        bottom: 0,
        left: 0,
        width,
        backgroundColor: '#EFEFF4'
    }
});
class Popup extends Component {
    constructor(props) {
        var _a;
        super(props);
        this.state = { visible: (_a = props.visible) !== null && _a !== void 0 ? _a : false, translateY: new Animated.Value(height) };
        this.handleLayout = this.handleLayout.bind(this);
    }
    UNSAFE_componentWillReceiveProps(nextProp) {
        if (this.props.visible !== nextProp.visible) {
            if (nextProp.visible) {
                this.setState({ visible: true });
                return;
            }
            Animated.timing(this.state.translateY, {
                toValue: this.height,
                duration: 300,
                easing: Easing.easeInOut,
                useNativeDriver: true
            }).start(() => this.setState({ visible: false }));
        }
    }
    handleLayout() {
        this.popup.measure((_x, _y, _w, h) => {
            this.height = h;
            this.setState({ translateY: new Animated.Value(h) });
            Animated.timing(this.state.translateY, {
                toValue: 0,
                duration: 300,
                easing: Easing.easeInOut,
                useNativeDriver: true
            }).start();
        });
    }
    render() {
        const { style, maskStyle, onShow, onClose, children } = this.props;
        return (React.createElement(Modal, { visible: this.state.visible, transparent: true, onShow: onShow, onRequestClose: onClose },
            React.createElement(Mask, { style: maskStyle, onPress: onClose },
                React.createElement(Animated.View, { style: [styles.popup, style, {
                            transform: [{ translateY: this.state.translateY }]
                        }] },
                    React.createElement(View, { ref: (ref) => { this.popup = ref; }, onLayout: this.handleLayout }, children)))));
    }
}
Popup.propTypes = {
    visible: PropTypes.bool,
    onShow: PropTypes.func,
    onClose: PropTypes.func,
    style: ViewPropTypes.style,
    maskStyle: ViewPropTypes.style,
    children: PropTypes.node
};
export { Popup };
//# sourceMappingURL=Popup.js.map