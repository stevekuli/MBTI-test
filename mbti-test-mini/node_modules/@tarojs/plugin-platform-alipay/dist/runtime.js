import { processApis, singleQuote, toCamelCase, mergeReconciler, mergeInternalComponents } from '@tarojs/shared';

const needPromiseApis = new Set([
    'addCardAuth',
    'getOpenUserInfo',
    'chooseAlipayContact',
    'chooseCity',
    'chooseContact',
    'choosePhoneContact',
    'datePicker',
    'getAddress',
    'getAuthCode',
    'getPhoneNumber',
    'getRunData',
    'getRunScene',
    'getServerTime',
    'getTitleColor',
    'rsa',
    'paySignCenter',
    'tradePay',
    'isCollected',
    'multiLevelSelect',
    'onLocatedComplete',
    'optionsSelect',
    'prompt',
    'regionPicker',
    'setLocatedCity',
    'showAuthGuide',
    'textRiskIdentification',
    'vibrate',
    'watchShake',
    'connectBLEDevice',
    'disconnectBLEDevice',
    'makeBluetoothPair',
    'writeBLECharacteristicValue',
    'readBLECharacteristicValue',
    'notifyBLECharacteristicValueChange',
    'getBLEDeviceServices',
    'getBLEDeviceCharacteristics',
    'openBluetoothAdapter',
    'closeBluetoothAdapter',
    'getBluetoothAdapterState',
    'startBluetoothDevicesDiscovery',
    'stopBluetoothDevicesDiscovery',
    'getBluetoothDevices',
    'getConnectedBluetoothDevices'
]);

const apiDiff = {
    login: {
        alias: 'getAuthCode',
        options: {
            set: [
                {
                    key: 'scopes',
                    value: 'auth_base'
                }
            ]
        }
    },
    showActionSheet: {
        options: {
            change: [{
                    old: 'itemList',
                    new: 'items'
                }]
        }
    },
    showToast: {
        options: {
            change: [{
                    old: 'title',
                    new: 'content'
                }, {
                    old: 'icon',
                    new: 'type'
                }],
            set: [{
                    key: 'type',
                    value(options) {
                        if (options.type === 'error') {
                            return 'fail';
                        }
                        return options.type;
                    }
                }]
        }
    },
    showLoading: {
        options: {
            change: [{
                    old: 'title',
                    new: 'content'
                }],
            set: [{
                    key: 'content',
                    value: function value(options) {
                        if (options.content === undefined) {
                            options.content = '';
                        }
                        return options.content;
                    }
                }]
        }
    },
    setNavigationBarTitle: {
        alias: 'setNavigationBar'
    },
    setNavigationBarColor: {
        alias: 'setNavigationBar'
    },
    saveImageToPhotosAlbum: {
        alias: 'saveImage',
        options: {
            change: [{
                    old: 'filePath',
                    new: 'url'
                }]
        }
    },
    previewImage: {
        options: {
            set: [{
                    key: 'current',
                    value(options) {
                        return options.urls.indexOf(options.current || options.urls[0]);
                    }
                }]
        }
    },
    getFileInfo: {
        options: {
            change: [{
                    old: 'filePath',
                    new: 'apFilePath'
                }]
        }
    },
    getSavedFileInfo: {
        options: {
            change: [{
                    old: 'filePath',
                    new: 'apFilePath'
                }]
        }
    },
    removeSavedFile: {
        options: {
            change: [{
                    old: 'filePath',
                    new: 'apFilePath'
                }]
        }
    },
    saveFile: {
        options: {
            change: [{
                    old: 'tempFilePath',
                    new: 'apFilePath'
                }]
        }
    },
    openLocation: {
        options: {
            set: [{
                    key: 'latitude',
                    value(options) {
                        return String(options.latitude);
                    }
                }, {
                    key: 'longitude',
                    value(options) {
                        return String(options.longitude);
                    }
                }]
        }
    },
    uploadFile: {
        options: {
            change: [{
                    old: 'name',
                    new: 'fileName'
                }]
        }
    },
    getClipboardData: {
        alias: 'getClipboard'
    },
    setClipboardData: {
        alias: 'setClipboard',
        options: {
            change: [{
                    old: 'data',
                    new: 'text'
                }]
        }
    },
    makePhoneCall: {
        options: {
            change: [{
                    old: 'phoneNumber',
                    new: 'number'
                }]
        }
    },
    scanCode: {
        alias: 'scan',
        options: {
            change: [{
                    old: 'onlyFromCamera',
                    new: 'hideAlbum'
                }],
            set: [{
                    key: 'type',
                    value(options) {
                        return (options.scanType && options.scanType[0].slice(0, -4)) || 'qr';
                    }
                }]
        }
    },
    setScreenBrightness: {
        options: {
            change: [{
                    old: 'value',
                    new: 'brightness'
                }]
        }
    },
    onBLEConnectionStateChange: {
        alias: 'onBLEConnectionStateChanged'
    },
    offBLEConnectionStateChange: {
        alias: 'offBLEConnectionStateChanged'
    },
    createBLEConnection: {
        alias: 'connectBLEDevice'
    },
    closeBLEConnection: {
        alias: 'disconnectBLEDevice'
    }
};
/**
 * 抹平API返回值的差异
 * key 为 alipay小程序中的api名称
 */
const asyncResultApiDiff = {
    alert: {
        res: {
            set: [
                {
                    key: 'confirm',
                    value(res) {
                        return res.success;
                    }
                }
            ],
        }
    },
    getScreenBrightness: {
        res: {
            set: [
                {
                    key: 'value',
                    value(res) {
                        return res.brightness;
                    }
                }
            ],
            remove: ['brightness']
        }
    },
    scan: {
        res: {
            set: [
                {
                    key: 'result',
                    value(res) {
                        return res.code;
                    }
                }
            ]
        }
    },
    getClipboard: {
        res: {
            set: [
                {
                    key: 'data',
                    value(res) {
                        return res.text;
                    }
                }
            ]
        }
    },
    chooseImage: {
        res: {
            set: [
                {
                    key: 'tempFilePaths',
                    value(res) {
                        return res.apFilePaths;
                    }
                }
            ]
        }
    },
    downloadFile: {
        res: {
            set: [
                {
                    key: 'tempFilePath',
                    value(res) {
                        return res.apFilePath;
                    }
                }
            ]
        }
    },
    getAuthCode: {
        res: {
            set: [{
                    key: 'code',
                    value(res) {
                        return res.authCode;
                    }
                }]
        }
    },
    getExtConfig: {
        res: {
            set: [{
                    key: 'extConfig',
                    value(res) {
                        return res.data;
                    }
                }]
        }
    },
    saveFile: {
        res: {
            set: [
                {
                    key: 'savedFilePath',
                    value(res) {
                        return res.apFilePath;
                    }
                }
            ]
        }
    },
    getBLEDeviceServices: {
        res: {
            set: [
                {
                    key: 'services',
                    value(res) {
                        return res.services.map(item => {
                            return { uuid: item.serviceId, isPrimary: item.isPrimary };
                        });
                    }
                }
            ]
        }
    }
};
function request(options) {
    options = options || {};
    if (typeof options === 'string') {
        options = {
            url: options
        };
    }
    const defaultHeaders = {
        'content-type': 'application/json'
    };
    options.headers = defaultHeaders;
    if (options.header) {
        for (const k in options.header) {
            const lowerK = k.toLocaleLowerCase();
            options.headers[lowerK] = options.header[k];
        }
        delete options.header;
    }
    const originSuccess = options.success;
    const originFail = options.fail;
    const originComplete = options.complete;
    let requestTask;
    const p = new Promise((resolve, reject) => {
        options.success = res => {
            res.statusCode = res.status;
            delete res.status;
            res.header = res.headers;
            delete res.headers;
            originSuccess && originSuccess(res);
            resolve(res);
        };
        options.fail = res => {
            originFail && originFail(res);
            reject(res);
        };
        options.complete = res => {
            originComplete && originComplete(res);
        };
        // 改为实时获取原生API，防止用户修改原生API后无法同步
        const nativeRequest = my.canIUse('request') ? my.request : my.httpRequest;
        requestTask = nativeRequest(options);
    });
    p.abort = (cb) => {
        cb && cb();
        if (requestTask) {
            requestTask.abort();
        }
        return p;
    };
    return p;
}
function handleSyncApis(key, global, args) {
    if (key === 'getStorageSync') {
        const arg1 = args[0];
        if (arg1 != null) {
            const res = global[key]({ key: arg1 });
            // 支付宝小程序遗留bug：值可能在data或APDataStorage字段下
            let data = null;
            if (res.hasOwnProperty('data')) {
                data = res.data;
            }
            else if (res.hasOwnProperty('APDataStorage')) {
                data = res.APDataStorage;
            }
            return data === null ? '' : data;
        }
        return console.error('getStorageSync 传入参数错误');
    }
    if (key === 'setStorageSync') {
        const arg1 = args[0];
        const arg2 = args[1];
        if (arg1 != null) {
            return global[key]({
                key: arg1,
                data: arg2
            });
        }
        return console.error('setStorageSync 传入参数错误');
    }
    if (key === 'removeStorageSync') {
        const arg1 = args[0];
        if (arg1 != null) {
            return global[key]({ key: arg1 });
        }
        return console.error('removeStorageSync 传入参数错误');
    }
    if (key === 'createSelectorQuery') {
        const query = global[key]();
        query.in = function () { return query; };
        return query;
    }
    return global[key].apply(global, args);
}
function transformMeta(api, options) {
    let apiAlias = api;
    if (api === 'showModal') {
        options.cancelButtonText = options.cancelText || '取消';
        options.confirmButtonText = options.confirmText || '确定';
        apiAlias = 'confirm';
        if (options.showCancel === false) {
            options.buttonText = options.confirmText || '确定';
            apiAlias = 'alert';
        }
    }
    else {
        Object.keys(apiDiff).forEach(item => {
            const apiItem = apiDiff[item];
            if (api === item) {
                if (apiItem.alias) {
                    apiAlias = apiItem.alias;
                }
                if (apiItem.options) {
                    const change = apiItem.options.change;
                    const set = apiItem.options.set;
                    if (change) {
                        change.forEach(changeItem => {
                            options[changeItem.new] = options[changeItem.old];
                        });
                    }
                    if (set) {
                        set.forEach(setItem => {
                            options[setItem.key] = typeof setItem.value === 'function' ? setItem.value(options) : setItem.value;
                        });
                    }
                }
            }
        });
    }
    return {
        key: apiAlias,
        options
    };
}
function modifyApis(apis) {
    Object.keys(apiDiff).map(key => {
        apis.add(key);
        const platformKey = apiDiff[key].alias;
        platformKey && apis.delete(platformKey);
    });
    apis.add('showModal');
    apis.delete('confirm');
    apis.delete('alert');
}
function modifyAsyncResult(key, res) {
    if (key === 'connectSocket') {
        res.onClose = function (cb) {
            my.onSocketClose(cb);
        };
        res.onError = function (cb) {
            my.onSocketError(cb);
        };
        res.onMessage = function (cb) {
            my.onSocketMessage(cb);
        };
        res.onOpen = function (cb) {
            my.onSocketOpen(cb);
        };
        res.send = function (opt) {
            my.sendSocketMessage(opt);
        };
        res.close = function () {
            my.closeSocket();
        };
    }
    Object.keys(asyncResultApiDiff).forEach(apiKey => {
        const apiItem = asyncResultApiDiff[apiKey];
        if (key !== apiKey) {
            return;
        }
        if (!apiItem.res) {
            return;
        }
        const set = apiItem.res.set;
        const remove = apiItem.res.remove;
        if (set) {
            set.forEach(setItem => {
                res[setItem.key] = typeof setItem.value === 'function' ? setItem.value(res) : setItem.value;
            });
        }
        if (remove) {
            remove.forEach(removeItem => {
                delete res[removeItem];
            });
        }
    });
}
function initNativeApi(taro) {
    processApis(taro, my, {
        needPromiseApis,
        handleSyncApis,
        transformMeta,
        modifyApis,
        modifyAsyncResult,
        request
    });
}

const components = {
    // ======== 调整属性 ========
    View: {
        'disable-scroll': 'false',
        hidden: 'false',
        bindAppear: '',
        bindDisappear: '',
        bindFirstAppear: ''
    },
    Text: {
        'number-of-lines': ''
    },
    Map: {
        skew: '0',
        rotate: '0',
        polygons: '[]',
        'include-padding': '',
        'ground-overlays': '[]',
        'tile-overlay': '',
        'custom-map-style': '',
        panels: '[]',
        setting: '{}',
        optimize: 'false',
        'show-compass': 'false',
        'show-scale': 'false',
        'enable-overlooking': 'false',
        'enable-zoom': 'true',
        'enable-scroll': 'true',
        'enable-rotate': 'false',
        'enable-traffic': 'false',
        'enable-poi': 'true',
        'enable-building': 'true',
        'enable-satellite': 'false',
        bindRegionChange: '',
        bindPanelTap: '',
        bindInitComplete: ''
    },
    Button: {
        scope: '',
        'public-id': '',
        bindGetAuthorize: '',
        bindError: '',
        bindGetUserInfo: '',
        bindGetPhoneNumber: '',
        bindFollowLifestyle: ''
    },
    Checkbox: {
        bindChange: ''
    },
    Input: {
        'always-system': 'false',
        'random-number': 'false',
        controlled: 'false',
        enableNative: 'true',
        name: ''
    },
    Slider: {
        'track-size': '4',
        'handle-size': '22',
        'handle-color': singleQuote('#ffffff')
    },
    Switch: {
        controlled: 'false'
    },
    Textarea: {
        'show-count': 'true',
        controlled: 'false',
        enableNative: 'false'
    },
    MovableView: {
        bindChangeEnd: ''
    },
    ScrollView: {
        'scroll-animation-duration': '',
        'trap-scroll': 'false'
    },
    Swiper: {
        'active-class': '',
        'changing-class': '',
        acceleration: 'false',
        'disable-programmatic-animation': 'false',
        'disable-touch': 'false',
        bindAnimationEnd: ''
    },
    Image: {
        'default-source': ''
    },
    Camera: {
        mode: singleQuote('normal'),
        'output-dimension': singleQuote('720P'),
        'frame-size': singleQuote('medium'),
        bindScanCode: '',
        bindReady: '',
    },
    Canvas: {
        type: '',
        width: singleQuote('300px'),
        height: singleQuote('225px'),
        bindReady: ''
    },
    Video: {
        'poster-size': singleQuote('contain'),
        'show-thin-progress-bar': 'false',
        'mobilenet-hint-type': '1',
        'floating-mode': singleQuote('none'),
        enableNative: 'true',
        bindLoading: '',
        bindUserAction: '',
        bindStop: '',
        bindRenderStart: ''
    },
    // ======== 额外组件 ========
    Lottie: {
        autoplay: 'false',
        path: '',
        speed: '1.0',
        'repeat-count': '0',
        'auto-reverse': 'false',
        'assets-path': '',
        placeholder: '',
        djangoId: '',
        md5: '',
        optimize: 'false',
        bindDataReady: '',
        bindDataFailed: '',
        bindAnimationStart: '',
        bindAnimationEnd: '',
        bindAnimationRepeat: '',
        bindAnimationCancel: '',
        bindDataLoadReady: ''
    },
    Lifestyle: {
        'public-id': '',
        memo: '',
        bindFollow: ''
    },
    LifeFollow: {
        sceneId: '',
        checkFollow: '',
        bindCheckFollow: '',
        bindClose: ''
    },
    ContactButton: {
        'tnt-inst-id': '',
        scene: '',
        size: '25',
        color: singleQuote('#00A3FF'),
        icon: '',
        'alipay-card-no': '',
        'ext-info': ''
    },
    ArCamera: {
        devicePosition: singleQuote('back'),
        marker: '',
        mode: singleQuote('imageTracking'),
        useCapturedImage: 'false',
        bindInit: '',
        bindStop: '',
        bindError: '',
        bindARFrame: ''
    },
    PageContainer: {
        show: 'false',
        duration: '300',
        'z-index': '100',
        overlay: 'true',
        position: singleQuote('bottom'),
        round: 'false',
        'close-on-slide-down': 'false',
        'overlay-style': '',
        'custom-style': '',
        bindBeforeEnter: '',
        bindEnter: '',
        bindEnterCancelled: '',
        bindAfterEnter: '',
        bindBeforeLeave: '',
        bindLeave: '',
        bindLeaveCancelled: '',
        bindAfterLeave: '',
        bindClickOverlay: '',
    },
    ShareElement: {
        name: '',
        transform: 'false',
        duration: '300',
        'easing-function': singleQuote('ease-out'),
    },
    RootPortal: {
        enable: 'true'
    },
    PageMeta: {
        'background-color': '',
        'background-color-top': '',
        'background-color-bottom': '',
        'root-background-color': '',
        'scroll-top': "''",
        'scroll-duration': '300',
        'page-style': "''",
        'root-font-size': "''",
        'page-font-size': "''",
        bindScroll: '',
    },
};

const BUBBLE_EVENTS = new Set([
    'touchStart',
    'touchMove',
    'touchEnd',
    'touchCancel',
    'tap',
    'longTap'
]);
const hostConfig = {
    initNativeApi,
    getMiniLifecycle(config) {
        config.component[0] = 'didMount';
        config.component[1] = 'didUnmount';
        return config;
    },
    getEventCenter(Events) {
        if (!my.taroEventCenter) {
            my.taroEventCenter = new Events();
        }
        return my.taroEventCenter;
    },
    modifyTaroEvent(event, node) {
        if (node.tagName === 'SWIPER' && event.type === 'animationend') {
            event.type = 'animationfinish';
        }
    },
    isBubbleEvents(eventName) {
        return BUBBLE_EVENTS.has(eventName);
    },
    transferHydrateData(data, element, componentsAlias) {
        var _a;
        if (element.isTransferElement) {
            const pages = getCurrentPages();
            const page = pages[pages.length - 1];
            data["nn" /* Shortcuts.NodeName */] = element.dataName;
            page.setData({
                [toCamelCase(data.nn)]: data
            });
            return {
                sid: element.sid,
                ["v" /* Shortcuts.Text */]: '',
                ["nn" /* Shortcuts.NodeName */]: ((_a = componentsAlias['#text']) === null || _a === void 0 ? void 0 : _a._num) || '8'
            };
        }
    },
    modifyRecursiveComponentConfig(componentConfig, { isCustomWrapper }) {
        // 修改组件的生命周期配置
        return isCustomWrapper
            ? Object.assign(Object.assign({}, componentConfig), { deriveDataFromProps(nextProps) {
                    if (this.data.i !== undefined && this.props.i !== nextProps.i) {
                        this.setData({ i: nextProps.i });
                    }
                } }) : componentConfig;
    },
};

// 支付宝真机只有 navigator.swuserAgent
const { userAgent } = navigator;
Object.defineProperty(navigator, 'userAgent', {
    configurable: true,
    enumerable: true,
    get() {
        return userAgent || navigator.swuserAgent || '';
    }
});
mergeReconciler(hostConfig);
mergeInternalComponents(components);
//# sourceMappingURL=runtime.js.map
