import { navigationRef } from './rootNavigation';
import { errorHandler, successHandler } from './utils/index';
function setNavigateConfig(obj) {
    var _a, _b, _c;
    const oldParams = ((_b = (_a = navigationRef.current) === null || _a === void 0 ? void 0 : _a.getCurrentRoute()) === null || _b === void 0 ? void 0 : _b.params) || {};
    const params = (oldParams === null || oldParams === void 0 ? void 0 : oldParams.navigateConfig) || {};
    (_c = navigationRef.current) === null || _c === void 0 ? void 0 : _c.setParams({
        navigateConfig: Object.assign({}, Object.assign({}, params), Object.assign({}, obj))
    });
}
export function setNavigationBarTitle(option) {
    var _a;
    const { title, fail, success, complete } = option;
    let msg;
    try {
        (_a = navigationRef.current) === null || _a === void 0 ? void 0 : _a.setOptions({
            title: title
        });
    }
    catch (error) {
        msg = error;
        return errorHandler(fail, complete)({ errMsg: msg });
    }
    msg = 'setNavigationBarTitle:ok';
    return successHandler(success, complete)({ errMsg: msg });
}
export function setNavigationBarColor(option) {
    var _a, _b;
    const { backgroundColor, frontColor, fail, success, complete } = option;
    let msg;
    const options = (_a = navigationRef.current) === null || _a === void 0 ? void 0 : _a.getCurrentOptions();
    const defaultStyle = (options === null || options === void 0 ? void 0 : options.headerStyle) || {};
    const headerStyle = Object.assign({}, defaultStyle, {
        backgroundColor: backgroundColor
    });
    const params = Object.assign({}, options, {
        headerStyle: headerStyle,
        headerTintColor: frontColor
    });
    try {
        (_b = navigationRef.current) === null || _b === void 0 ? void 0 : _b.setOptions(Object.assign({}, params));
    }
    catch (error) {
        msg = error;
        return errorHandler(fail, complete)({ errMsg: msg });
    }
    msg = 'setNavigationBarColor:ok';
    return successHandler(success, complete)({ errMsg: msg });
}
export function showNavigationBarLoading(option = {}) {
    const { fail, success, complete } = option;
    let msg;
    try {
        setNavigateConfig({ showLoading: true });
    }
    catch (error) {
        msg = error;
        return errorHandler(fail, complete)({ errMsg: msg });
    }
    msg = 'showNavigationBarLoading:ok';
    return successHandler(success, complete)({ errMsg: msg });
}
export function hideNavigationBarLoading(option = {}) {
    const { fail, success, complete } = option;
    let msg;
    try {
        setNavigateConfig({ showLoading: false });
    }
    catch (error) {
        msg = error;
        return errorHandler(fail, complete)({ errMsg: msg });
    }
    msg = 'hideNavigationBarLoading:ok';
    return successHandler(success, complete)({ errMsg: msg });
}
//# sourceMappingURL=navigationBar.js.map