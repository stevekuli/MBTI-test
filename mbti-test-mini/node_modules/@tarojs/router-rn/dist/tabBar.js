import { navigationRef } from './rootNavigation';
import { errorHandler, setTabConfig, successHandler } from './utils/index';
const globalAny = global;
const INIT_TABBAR_ICON_CONFIG = {
    needAnimate: true,
    tabBarVisible: true,
    tabStyle: {},
    tabItems: {}
};
globalAny.__taroTabBarIconConfig = INIT_TABBAR_ICON_CONFIG;
function setTabBarItemConfig(index, obj) {
    const tabBarConfig = globalAny.__taroTabBarIconConfig;
    const items = tabBarConfig.tabItems[index] || {};
    tabBarConfig.tabItems[index] = Object.assign({}, items, obj);
    globalAny.__taroTabBarIconConfig = tabBarConfig;
}
export function showTabBar(options = {}) {
    var _a;
    const { fail, success, complete, animation = true } = options;
    let msg;
    setTabConfig('tabBarVisible', true);
    setTabConfig('needAnimate', animation);
    try {
        (_a = navigationRef.current) === null || _a === void 0 ? void 0 : _a.setOptions({
            tabBarVisible: true
        });
    }
    catch (error) {
        msg = error;
        return errorHandler(fail, complete)({ errMsg: msg });
    }
    msg = 'showTabBar:ok';
    return successHandler(success, complete)({ errMsg: msg });
}
export function hideTabBar(options = {}) {
    var _a;
    const { fail, success, complete, animation = true } = options;
    let msg;
    setTabConfig('tabBarVisible', false);
    setTabConfig('needAnimate', animation);
    try {
        (_a = navigationRef.current) === null || _a === void 0 ? void 0 : _a.setOptions({
            tabBarVisible: false
        });
    }
    catch (error) {
        msg = error;
        return errorHandler(fail, complete)({ errMsg: msg });
    }
    msg = 'hideTabBar:ok';
    return successHandler(success, complete)({ errMsg: msg });
}
export function showTabBarRedDot(options) {
    var _a;
    const { index, fail, success, complete } = options;
    let msg;
    setTabBarItemConfig(index, { showRedDot: true });
    try {
        (_a = navigationRef.current) === null || _a === void 0 ? void 0 : _a.setOptions({
            tabBarIcon: null
        });
    }
    catch (error) {
        msg = error;
        return errorHandler(fail, complete)({ errMsg: msg });
    }
    msg = 'showTabBarRedDot:ok';
    return successHandler(success, complete)({ errMsg: msg });
}
export function hideTabBarRedDot(options) {
    var _a;
    const { index, fail, success, complete } = options;
    let msg;
    setTabBarItemConfig(index, { showRedDot: false });
    try {
        (_a = navigationRef.current) === null || _a === void 0 ? void 0 : _a.setOptions({
            tabBarIcon: null
        });
    }
    catch (error) {
        msg = error;
        return errorHandler(fail, complete)({ errMsg: msg });
    }
    msg = 'hideTabBarRedDot:ok';
    return successHandler(success, complete)({ errMsg: msg });
}
export function setTabBarBadge(options) {
    var _a;
    const { index, text, complete, fail, success } = options;
    let msg;
    setTabBarItemConfig(index, { tabBarBadge: text });
    try {
        (_a = navigationRef.current) === null || _a === void 0 ? void 0 : _a.setOptions({
            tabBarBadge: text
        });
    }
    catch (error) {
        msg = error;
        return errorHandler(fail, complete)({ errMsg: msg });
    }
    msg = 'setTabBarBadge:ok';
    return successHandler(success, complete)({ errMsg: msg });
}
export function removeTabBarBadge(options) {
    var _a;
    const { index, fail, success, complete } = options;
    let msg = '';
    setTabBarItemConfig(index, { tabBarBadge: null });
    try {
        (_a = navigationRef.current) === null || _a === void 0 ? void 0 : _a.setOptions({
            tabBarBadge: null
        });
    }
    catch (error) {
        msg = error;
        return errorHandler(fail, complete)({ errMsg: msg });
    }
    msg = 'removeTabBarBadge:ok';
    return successHandler(success, complete)({ errMsg: msg });
}
export function setTabBarItem(options) {
    var _a;
    const { fail, complete, success, index, text, iconPath, selectedIconPath } = options;
    let msg;
    setTabBarItemConfig(index, {
        tabBarLabel: text,
        iconPath: iconPath,
        selectedIconPath: selectedIconPath
    });
    try {
        // 会直接更新当前调用的tab,只是为了触发导航的tabbar的更新
        (_a = navigationRef.current) === null || _a === void 0 ? void 0 : _a.setOptions({
            tabBarIcon: null
        });
    }
    catch (error) {
        msg = error;
        return errorHandler(fail, complete)({ errMsg: msg });
    }
    msg = 'setTabBarItem:ok';
    return successHandler(success, complete)({ errMsg: msg });
}
export function setTabBarStyle(option) {
    var _a;
    const { backgroundColor, borderStyle, color, selectedColor, fail, success, complete } = option;
    let msg;
    setTabConfig('tabStyle', { backgroundColor, borderStyle, color, selectedColor });
    try {
        // 设置tabBarIcon 只是为了触发导航的tabbar的更新
        (_a = navigationRef.current) === null || _a === void 0 ? void 0 : _a.setOptions({
            tabBarIcon: null
        });
    }
    catch (error) {
        msg = error;
        return errorHandler(fail, complete)({ errMsg: msg });
    }
    msg = 'setTabBarStyle:ok';
    return successHandler(success, complete)({ errMsg: msg });
}
//# sourceMappingURL=tabBar.js.map