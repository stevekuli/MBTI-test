import * as React from 'react';
import { Image, StyleSheet, Text, View } from 'react-native';
import Badge from './Badge';
const styles = StyleSheet.create({
    label: {
        textAlign: 'center',
        backgroundColor: 'transparent'
    },
    labelBeneath: {
        fontSize: 12
    },
    labelBeside: {
        fontSize: 12,
        marginTop: 5
    },
    button: {
        display: 'flex'
    },
    icon: {
        justifyContent: 'flex-end'
    },
    tabItem: {
        alignSelf: 'center',
        alignItems: 'center',
        justifyContent: 'center',
        height: '100%',
        width: '100%'
    },
    itemVertical: {
        flex: 1
    },
    itemHorizontal: {
        height: '100%',
        marginTop: 5
    },
    redDot: {
        position: 'absolute',
        top: -2,
        right: -5,
        backgroundColor: '#FA5151',
        zIndex: 100,
        borderRadius: 18,
        paddingTop: 4,
        paddingBottom: 4,
        paddingLeft: 4,
        paddingRight: 4
    },
    badge: {
        position: 'absolute',
        top: -3,
        zIndex: 10,
        left: 15
    },
    // todo
    badgeHorizontal: {},
    badgeVertical: {}
});
export default class TabBarItem extends React.PureComponent {
    render() {
        const { label, horizontal, showRedDot, badge, size = 20, labelColor, iconSource, tabOptions, tabStyle = {}, labelStyle = {}, allowFontScaling = true, showLabel = true } = this.props;
        const tabBarBadgeStyle = (tabOptions === null || tabOptions === void 0 ? void 0 : tabOptions.tabBarBadgeStyle) || {};
        return (React.createElement(View, { style: [styles.tabItem, styles.itemHorizontal, tabStyle] },
            React.createElement(View, { style: styles.icon },
                !!iconSource && React.createElement(Image, { style: { width: size, height: size }, source: iconSource }),
                !!showRedDot && !badge && React.createElement(View, { style: styles.redDot }),
                !!badge && React.createElement(Badge, { visible: badge != null, style: [
                        styles.badge,
                        horizontal ? styles.badgeHorizontal : styles.badgeVertical,
                        tabBarBadgeStyle
                    ], size: (size * 3) / 4 }, ('' + badge).length >= 4 ? '...' : badge)),
            showLabel && React.createElement(Text, { numberOfLines: 1, allowFontScaling: allowFontScaling, style: [
                    styles.label,
                    horizontal ? styles.labelBeside : styles.labelBeneath,
                    labelStyle,
                    { color: labelColor }
                ] }, label)));
    }
}
//# sourceMappingURL=TabBarItem.js.map