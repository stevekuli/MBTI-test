declare const CoverImage: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const CoverView: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const MatchMedia: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const MovableArea: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const MovableView: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const PageContainer: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const RootPortal: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const ShareElement: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Swiper: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const SwiperItem: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const View: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Progress: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const RichText: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Button: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Checkbox: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const CheckboxGroup: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Editor: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Form: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Input: {
    emits: string[];
    props: Record<string, any>;
    setup(props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const KeyboardAccessory: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Label: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Picker: {
    emits: string[];
    props: Record<string, any>;
    setup(props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const PickerView: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const PickerViewColumn: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Radio: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const RadioGroup: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Slider: {
    emits: string[];
    props: Record<string, any>;
    setup(props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Switch: {
    emits: string[];
    props: Record<string, any>;
    setup(props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Textarea: {
    emits: string[];
    props: Record<string, any>;
    setup(props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const FunctionalPageNavigator: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Navigator: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Audio: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Camera: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const LivePlayer: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Video: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const VoipRoom: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Map: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Canvas: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const WebView: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Ad: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const AdCustom: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const OfficialAccount: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const OpenData: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const NavigationBar: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const PageMeta: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Block: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const CustomWrapper: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
declare const Slot: {
    emits: string[];
    setup(__props: any, { slots, emit }: {
        slots: any;
        emit: any;
    }): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};
export { CoverImage, CoverView, MatchMedia, MovableArea, MovableView, PageContainer, RootPortal, ShareElement, Swiper, SwiperItem, View, Progress, RichText, Button, Checkbox, CheckboxGroup, Editor, Form, Input, KeyboardAccessory, Label, Picker, PickerView, PickerViewColumn, Radio, RadioGroup, Slider, Switch, Textarea, FunctionalPageNavigator, Navigator, Audio, Camera, LivePlayer, Video, VoipRoom, Map, Canvas, WebView, Ad, AdCustom, OfficialAccount, OpenData, NavigationBar, PageMeta, Block, CustomWrapper, Slot };
export { default as ScrollView } from "./scroll-view.js";
export { default as Icon } from "./icon.js";
export { default as Text } from "./text.js";
export { default as Image } from "./image.js";
