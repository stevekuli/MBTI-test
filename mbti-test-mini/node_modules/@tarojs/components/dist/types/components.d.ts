/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { Type } from "./components/icon/icon";
import { Mode } from "./components/image/image";
import { Fields, Mode as Mode1, PickerText, PickerValue } from "./components/picker/picker";
import { Nodes } from "./components/rich-text/rich-text";
import { TextProps } from "types";
import { ScrollViewContext } from "@tarojs/taro";
import { Conf } from "./components/tabbar/tabbar";
import { Danmu } from "./components/video/video-danmu";
export namespace Components {
    interface TaroAdCore {
    }
    interface TaroAdCustomCore {
    }
    interface TaroAnimationVideoCore {
    }
    interface TaroAnimationViewCore {
    }
    interface TaroArCameraCore {
    }
    interface TaroAudioCore {
        "autoplay": boolean;
        "controls": boolean;
        "loop": boolean;
        "muted": boolean;
        "nativeProps": {};
        "src": string;
    }
    interface TaroAwemeDataCore {
    }
    interface TaroBlockCore {
    }
    interface TaroButtonCore {
        "disabled": boolean;
        "formType": 'submit' | 'reset' | null;
        "hoverClass": string;
        "hoverStartTime": number;
        "hoverStayTime": number;
        "loading": boolean;
        "plain": boolean;
        "size": string;
        "type": string;
    }
    interface TaroCameraCore {
    }
    interface TaroCanvasCore {
        "canvasId": string;
        "height": string;
        "nativeProps": {};
        "width": string;
    }
    interface TaroChannelLiveCore {
    }
    interface TaroChannelVideoCore {
    }
    interface TaroCheckboxCore {
        "checked": boolean;
        "color": string;
        "disabled": boolean;
        "id": string;
        "name": string;
        "nativeProps": {};
        "value": string | number;
    }
    interface TaroCheckboxGroupCore {
        "name": any;
    }
    interface TaroCommentDetailCore {
    }
    interface TaroCommentListCore {
    }
    interface TaroContactButtonCore {
    }
    interface TaroCoverImageCore {
        "nativeProps": {};
        "src": string;
    }
    interface TaroCoverViewCore {
        "animation": string;
        "hoverClass": string;
        "hoverStartTime": number;
        "hoverStayTime": number;
    }
    interface TaroCustomWrapperCore {
    }
    interface TaroEditorCore {
    }
    interface TaroFollowSwanCore {
    }
    interface TaroFormCore {
    }
    interface TaroFunctionalPageNavigatorCore {
    }
    interface TaroGridViewCore {
    }
    interface TaroIconCore {
        "color": string;
        "size": string | number;
        "type": Type;
    }
    interface TaroImageCore {
        "lazyLoad": boolean;
        "mode": Mode;
        "nativeProps": {};
        "src": string;
    }
    interface TaroInlinePaymentPanelCore {
    }
    interface TaroInputCore {
        "autoFocus": boolean;
        "confirmType": string;
        "disabled": boolean;
        "focus": () => Promise<void>;
        "maxlength": number;
        "name": string;
        "nativeProps": {};
        "password": boolean;
        "placeholder": string;
        "type": string;
        "value": string;
    }
    interface TaroKeyboardAccessoryCore {
    }
    interface TaroLabelCore {
        "for": string;
    }
    interface TaroLifestyleCore {
    }
    interface TaroLikeCore {
    }
    interface TaroListViewCore {
    }
    interface TaroLivePlayerCore {
    }
    interface TaroLivePusherCore {
    }
    interface TaroLoginCore {
    }
    interface TaroLottieCore {
    }
    interface TaroMapCore {
    }
    interface TaroMatchMediaCore {
    }
    interface TaroMovableAreaCore {
        /**
          * 当里面的 movable-view 设置为支持双指缩放时，设置此值可将缩放手势生效区域修改为整个movable-area
         */
        "scaleArea": boolean;
    }
    interface TaroMovableViewCore {
        /**
          * 是否使用动画
         */
        "animation": boolean;
        /**
          * 阻尼系数，用于控制x或y改变时的动画和过界回弹的动画，值越大移动越快
         */
        "damping": number;
        /**
          * 移动方向，属性值有all、vertical、horizontal、none
         */
        "direction": "all" | "vertical" | "horizontal" | "none";
        /**
          * 是否禁用
         */
        "disabled": boolean;
        /**
          * 结束缩放
         */
        "endScale": () => Promise<void>;
        /**
          * 摩擦系数，用于控制惯性滑动的动画，值越大摩擦力越大，滑动越快停止；必须大于0，否则会被设置成默认值
         */
        "friction": number;
        /**
          * 是否带有惯性
         */
        "inertia": boolean;
        /**
          * 超过可移动区域后，是否还可以移动
         */
        "outOfBounds": boolean;
        /**
          * 是否支持双指缩放，默认缩放手势生效区域是在movable-view内
         */
        "scale": boolean;
        /**
          * 定义缩放倍数最大值
         */
        "scaleMax": number;
        /**
          * 定义缩放倍数最小值
         */
        "scaleMin": number;
        /**
          * 定义缩放倍数，取值范围为 0.5 - 10
         */
        "scaleValue": number;
        /**
          * 设置父节点
         */
        "setParent": ({ element, area }: { element: HTMLElement; area: { width: number; height: number; }; }) => Promise<void>;
        /**
          * 更新缩放
         */
        "setScale": (scale: number) => Promise<void>;
        /**
          * 定义x轴方向的偏移，如果x的值不在可移动范围内，会自动移动到可移动范围；改变x的值会触发动画；单位支持px；
         */
        "x": number | string;
        /**
          * 定义y轴方向的偏移，如果y的值不在可移动范围内，会自动移动到可移动范围；改变y的值会触发动画；单位支持px；
         */
        "y": number | string;
    }
    interface TaroNativeSlotCore {
    }
    interface TaroNavigationBarCore {
    }
    /**
     * TODO: 参数还需要进一步细化对齐
     * Navigator组件
     * https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html
     */
    interface TaroNavigatorCore {
        "delta": number;
        "hoverClass": string;
        "isHover": boolean;
        "openType": string;
        "url": string;
    }
    interface TaroOfficialAccountCore {
    }
    interface TaroOpenDataCore {
    }
    interface TaroPageContainerCore {
    }
    interface TaroPageMetaCore {
    }
    interface TaroPickerCore {
        "disabled": boolean;
        "end": string;
        "fields": Fields;
        "mode": Mode;
        "name": string;
        "range": any[];
        "rangeKey": string;
        "start": string;
        "textProps": PickerText;
        "value": PickerValue;
    }
    interface TaroPickerGroup {
        "columnId": string;
        "handleMoveEnd": (clientY: number) => Promise<void>;
        "handleMoveStart": (clientY: number) => Promise<void>;
        "handleMoving": (clientY: number) => Promise<void>;
        "height": number;
        "mode": 'time' | 'date';
        "range": any[];
        "rangeKey": string;
        "updateDay"?: (value: number, fields: number) => void;
        "updateHeight": (height: number, columnId: string, needRevise?: boolean) => void;
    }
    interface TaroPickerViewColumnCore {
        "col": string;
        "initialPosition": string;
        "paddingVertical": number;
    }
    interface TaroPickerViewCore {
        "indicatorClass": string;
        "indicatorStyle": string;
        "maskClass": string;
        "maskStyle": string;
        "value": number[];
    }
    interface TaroProgressCore {
        "active": boolean;
        "activeColor": string;
        "backgroundColor": string;
        "borderRadius": number | string;
        "fontSize": number | string;
        "percent": number;
        "showInfo": boolean;
        "strokeWidth": number | string;
    }
    interface TaroPullToRefreshCore {
        "damping": number;
        "distanceToRefresh": number;
        "indicator": { activate: string; deactivate: string; release: string; finish: string; };
        "prefixCls": string;
    }
    interface TaroRadioCore {
        "checked": boolean;
        "disabled": boolean;
        "id": string;
        "name": string;
        "nativeProps": {};
        "value": string;
    }
    interface TaroRadioGroupCore {
        "name": any;
    }
    interface TaroRichTextCore {
        "nodes": Nodes;
        "selectable": boolean;
        "space"?: keyof TextProps.TSpace;
        "userSelect": boolean;
    }
    interface TaroRootPortalCore {
    }
    interface TaroRtcRoomCore {
    }
    interface TaroRtcRoomItemCore {
    }
    interface TaroScrollViewCore {
        "animated": boolean;
        "lowerThreshold": number | string;
        "mpScrollIntoView": string;
        "mpScrollIntoViewAlignment": 'start' | 'center' | 'end' | 'nearest';
        "mpScrollIntoViewMethod": (selector: string) => Promise<void>;
        "mpScrollLeft": number | string;
        "mpScrollToMethod": (object: ScrollViewContext.scrollTo.Option) => Promise<void>;
        "mpScrollTop": number | string;
        "scrollX": boolean;
        "scrollY": boolean;
        "upperThreshold": number | string;
    }
    interface TaroShareElementCore {
    }
    interface TaroSliderCore {
        "activeColor": string;
        "backgroundColor": string;
        "blockColor": string;
        "blockSize": number;
        "disabled": boolean;
        "max": number;
        "min": number;
        "name": string;
        "showValue": boolean;
        "step": number;
        "value": number;
    }
    interface TaroSlotCore {
    }
    interface TaroSnapshotCore {
    }
    interface TaroStickyHeaderCore {
    }
    interface TaroStickySectionCore {
    }
    interface TaroSwiperCore {
        /**
          * 是否自动切换
         */
        "autoplay": boolean;
        /**
          * 是否采用衔接滑动
         */
        "circular": boolean;
        /**
          * 当前所在滑块的 index
         */
        "current": number;
        /**
          * 当前所在滑块的 item-id
         */
        "currentItemId": string;
        /**
          * 同时显示的滑块数量
         */
        "displayMultipleItems": number;
        /**
          * 滑动动画时长
         */
        "duration": number;
        /**
          * 给 previewImage API 使用，全屏显示 swiper
         */
        "full": boolean;
        /**
          * 当前选中的指示点颜色
         */
        "indicatorActiveColor": string;
        /**
          * 指示点颜色
         */
        "indicatorColor": string;
        /**
          * 是否显示面板指示点
         */
        "indicatorDots": boolean;
        /**
          * 自动切换时间间隔
         */
        "interval": number;
        /**
          * 后边距，可用于露出后一项的一小部分，接受 px 值
         */
        "nextMargin": string;
        /**
          * 前边距，可用于露出前一项的一小部分，接受 px 值
         */
        "previousMargin": string;
        /**
          * 滑动方向是否为纵向
         */
        "vertical": boolean;
        /**
          * 给 previewImage API 使用，缩放支持
         */
        "zoom": boolean;
    }
    interface TaroSwiperItemCore {
        "deep": boolean;
        "itemId": string;
    }
    interface TaroSwitchCore {
        "checked": boolean;
        "color": string;
        "disabled": boolean;
        "name": string;
        "nativeProps": {};
        "type": string;
    }
    interface TaroTabItemCore {
    }
    interface TaroTabbar {
        "conf": Conf;
    }
    interface TaroTabsCore {
    }
    interface TaroTextCore {
        "numberOfLines"?: number;
        "selectable": boolean;
        "space"?: keyof TextProps.TSpace;
        "userSelect": boolean;
    }
    interface TaroTextareaCore {
        "autoFocus": boolean;
        "autoHeight": boolean;
        "disabled": boolean;
        "focus": () => Promise<void>;
        "maxlength": number;
        "name": string;
        "nativeProps": {};
        "placeholder": string;
        "value": string;
    }
    interface TaroVideoControl {
        "controls": boolean;
        "currentTime": number;
        "duration": number;
        "getIsDraggingProgressBall": () => Promise<boolean>;
        "isPlaying": boolean;
        "pauseFunc": () => void;
        "playFunc": () => void;
        "seekFunc": (position: number) => void;
        "setCurrentTime": (time: number) => Promise<void>;
        "setProgressBall": (percentage: number) => Promise<void>;
        "showPlayBtn": boolean;
        "showProgress": boolean;
        "toggleVisibility": (nextVisible?: boolean) => Promise<void>;
    }
    interface TaroVideoCore {
        /**
          * 是否自动播放
         */
        "autoplay": boolean;
        /**
          * 是否显示默认播放控件（播放/暂停按钮、播放进度、时间）
         */
        "controls": boolean;
        /**
          * 是否显示弹幕按钮
         */
        "danmuBtn": boolean;
        /**
          * 弹幕列表
         */
        "danmuList": [];
        /**
          * 指定视频时长
         */
        "duration": number;
        /**
          * 是否展示弹幕
         */
        "enableDanmu": boolean;
        /**
          * 是否开启播放手势，即双击切换播放/暂停
         */
        "enablePlayGesture": boolean;
        /**
          * 是否开启控制进度的手势
         */
        "enableProgressGesture": boolean;
        /**
          * 退出全屏
         */
        "exitFullScreen": () => Promise<void>;
        "getHlsObject": () => Promise<HLS>;
        /**
          * 指定视频初始播放位置
         */
        "initialTime": number;
        /**
          * 是否循环播放
         */
        "loop": boolean;
        /**
          * 是否静音播放
         */
        "muted": boolean;
        "nativeProps": {};
        /**
          * 当视频大小与 video 容器大小不一致时，视频的表现形式
         */
        "objectFit": 'contain' | 'fill' | 'cover';
        /**
          * 暂停视频
         */
        "pause": () => Promise<void>;
        /**
          * 播放视频
         */
        "play": () => Promise<void>;
        /**
          * 视频封面的图片网络资源地址或云文件ID（2.3.0）。若 controls 属性值为 false 则设置 poster 无效
         */
        "poster": string;
        /**
          * 进入全屏。若有自定义内容需在全屏时展示，需将内容节点放置到 video 节点内。
         */
        "requestFullScreen": () => Promise<void>;
        /**
          * 跳转到指定位置
         */
        "seek": (position: number) => Promise<void>;
        /**
          * 是否显示视频中间的播放按钮
         */
        "showCenterPlayBtn": boolean;
        /**
          * 是否显示全屏按钮
         */
        "showFullscreenBtn": boolean;
        /**
          * 是否显示静音按钮
         */
        "showMuteBtn": boolean;
        /**
          * 是否显示视频底部控制栏的播放按钮
         */
        "showPlayBtn": boolean;
        /**
          * 若不设置，宽度大于 240 时才会显示
         */
        "showProgress": boolean;
        /**
          * 要播放视频的资源地址
         */
        "src": string;
        /**
          * 停止视频
         */
        "stop": () => Promise<void>;
        /**
          * 在非全屏模式下，是否开启亮度与音量调节手势
         */
        "vslideGesture": boolean;
        /**
          * 在全屏模式下，是否开启亮度与音量调节手势
         */
        "vslideGestureInFullscreen": boolean;
    }
    interface TaroVideoDanmu {
        "enable": boolean;
        "sendDanmu": (danmuList?: Partial<Danmu> | Partial<Danmu>[]) => Promise<void>;
        "tick": (currentTime: number) => Promise<void>;
    }
    interface TaroViewCore {
        "animation": string;
        "hoverClass": string;
        "hoverStartTime": number;
        "hoverStayTime": number;
    }
    interface TaroVoipRoomCore {
    }
    interface TaroWebViewCore {
        "src": string;
    }
}
export interface TaroAudioCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroAudioCoreElement;
}
export interface TaroButtonCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroButtonCoreElement;
}
export interface TaroCanvasCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroCanvasCoreElement;
}
export interface TaroCheckboxCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroCheckboxCoreElement;
}
export interface TaroCheckboxGroupCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroCheckboxGroupCoreElement;
}
export interface TaroCoverImageCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroCoverImageCoreElement;
}
export interface TaroCoverViewCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroCoverViewCoreElement;
}
export interface TaroFormCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroFormCoreElement;
}
export interface TaroImageCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroImageCoreElement;
}
export interface TaroInputCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroInputCoreElement;
}
export interface TaroMovableViewCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroMovableViewCoreElement;
}
export interface TaroNavigatorCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroNavigatorCoreElement;
}
export interface TaroPickerCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroPickerCoreElement;
}
export interface TaroPickerGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroPickerGroupElement;
}
export interface TaroPickerViewColumnCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroPickerViewColumnCoreElement;
}
export interface TaroPickerViewCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroPickerViewCoreElement;
}
export interface TaroPullToRefreshCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroPullToRefreshCoreElement;
}
export interface TaroRadioCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroRadioCoreElement;
}
export interface TaroRadioGroupCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroRadioGroupCoreElement;
}
export interface TaroScrollViewCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroScrollViewCoreElement;
}
export interface TaroSliderCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroSliderCoreElement;
}
export interface TaroSwiperCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroSwiperCoreElement;
}
export interface TaroSwitchCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroSwitchCoreElement;
}
export interface TaroTabbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroTabbarElement;
}
export interface TaroTextareaCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroTextareaCoreElement;
}
export interface TaroVideoCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroVideoCoreElement;
}
export interface TaroViewCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroViewCoreElement;
}
export interface TaroWebViewCoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaroWebViewCoreElement;
}
declare global {
    interface HTMLTaroAdCoreElement extends Components.TaroAdCore, HTMLStencilElement {
    }
    var HTMLTaroAdCoreElement: {
        prototype: HTMLTaroAdCoreElement;
        new (): HTMLTaroAdCoreElement;
    };
    interface HTMLTaroAdCustomCoreElement extends Components.TaroAdCustomCore, HTMLStencilElement {
    }
    var HTMLTaroAdCustomCoreElement: {
        prototype: HTMLTaroAdCustomCoreElement;
        new (): HTMLTaroAdCustomCoreElement;
    };
    interface HTMLTaroAnimationVideoCoreElement extends Components.TaroAnimationVideoCore, HTMLStencilElement {
    }
    var HTMLTaroAnimationVideoCoreElement: {
        prototype: HTMLTaroAnimationVideoCoreElement;
        new (): HTMLTaroAnimationVideoCoreElement;
    };
    interface HTMLTaroAnimationViewCoreElement extends Components.TaroAnimationViewCore, HTMLStencilElement {
    }
    var HTMLTaroAnimationViewCoreElement: {
        prototype: HTMLTaroAnimationViewCoreElement;
        new (): HTMLTaroAnimationViewCoreElement;
    };
    interface HTMLTaroArCameraCoreElement extends Components.TaroArCameraCore, HTMLStencilElement {
    }
    var HTMLTaroArCameraCoreElement: {
        prototype: HTMLTaroArCameraCoreElement;
        new (): HTMLTaroArCameraCoreElement;
    };
    interface HTMLTaroAudioCoreElement extends Components.TaroAudioCore, HTMLStencilElement {
    }
    var HTMLTaroAudioCoreElement: {
        prototype: HTMLTaroAudioCoreElement;
        new (): HTMLTaroAudioCoreElement;
    };
    interface HTMLTaroAwemeDataCoreElement extends Components.TaroAwemeDataCore, HTMLStencilElement {
    }
    var HTMLTaroAwemeDataCoreElement: {
        prototype: HTMLTaroAwemeDataCoreElement;
        new (): HTMLTaroAwemeDataCoreElement;
    };
    interface HTMLTaroBlockCoreElement extends Components.TaroBlockCore, HTMLStencilElement {
    }
    var HTMLTaroBlockCoreElement: {
        prototype: HTMLTaroBlockCoreElement;
        new (): HTMLTaroBlockCoreElement;
    };
    interface HTMLTaroButtonCoreElement extends Components.TaroButtonCore, HTMLStencilElement {
    }
    var HTMLTaroButtonCoreElement: {
        prototype: HTMLTaroButtonCoreElement;
        new (): HTMLTaroButtonCoreElement;
    };
    interface HTMLTaroCameraCoreElement extends Components.TaroCameraCore, HTMLStencilElement {
    }
    var HTMLTaroCameraCoreElement: {
        prototype: HTMLTaroCameraCoreElement;
        new (): HTMLTaroCameraCoreElement;
    };
    interface HTMLTaroCanvasCoreElement extends Components.TaroCanvasCore, HTMLStencilElement {
    }
    var HTMLTaroCanvasCoreElement: {
        prototype: HTMLTaroCanvasCoreElement;
        new (): HTMLTaroCanvasCoreElement;
    };
    interface HTMLTaroChannelLiveCoreElement extends Components.TaroChannelLiveCore, HTMLStencilElement {
    }
    var HTMLTaroChannelLiveCoreElement: {
        prototype: HTMLTaroChannelLiveCoreElement;
        new (): HTMLTaroChannelLiveCoreElement;
    };
    interface HTMLTaroChannelVideoCoreElement extends Components.TaroChannelVideoCore, HTMLStencilElement {
    }
    var HTMLTaroChannelVideoCoreElement: {
        prototype: HTMLTaroChannelVideoCoreElement;
        new (): HTMLTaroChannelVideoCoreElement;
    };
    interface HTMLTaroCheckboxCoreElement extends Components.TaroCheckboxCore, HTMLStencilElement {
    }
    var HTMLTaroCheckboxCoreElement: {
        prototype: HTMLTaroCheckboxCoreElement;
        new (): HTMLTaroCheckboxCoreElement;
    };
    interface HTMLTaroCheckboxGroupCoreElement extends Components.TaroCheckboxGroupCore, HTMLStencilElement {
    }
    var HTMLTaroCheckboxGroupCoreElement: {
        prototype: HTMLTaroCheckboxGroupCoreElement;
        new (): HTMLTaroCheckboxGroupCoreElement;
    };
    interface HTMLTaroCommentDetailCoreElement extends Components.TaroCommentDetailCore, HTMLStencilElement {
    }
    var HTMLTaroCommentDetailCoreElement: {
        prototype: HTMLTaroCommentDetailCoreElement;
        new (): HTMLTaroCommentDetailCoreElement;
    };
    interface HTMLTaroCommentListCoreElement extends Components.TaroCommentListCore, HTMLStencilElement {
    }
    var HTMLTaroCommentListCoreElement: {
        prototype: HTMLTaroCommentListCoreElement;
        new (): HTMLTaroCommentListCoreElement;
    };
    interface HTMLTaroContactButtonCoreElement extends Components.TaroContactButtonCore, HTMLStencilElement {
    }
    var HTMLTaroContactButtonCoreElement: {
        prototype: HTMLTaroContactButtonCoreElement;
        new (): HTMLTaroContactButtonCoreElement;
    };
    interface HTMLTaroCoverImageCoreElement extends Components.TaroCoverImageCore, HTMLStencilElement {
    }
    var HTMLTaroCoverImageCoreElement: {
        prototype: HTMLTaroCoverImageCoreElement;
        new (): HTMLTaroCoverImageCoreElement;
    };
    interface HTMLTaroCoverViewCoreElement extends Components.TaroCoverViewCore, HTMLStencilElement {
    }
    var HTMLTaroCoverViewCoreElement: {
        prototype: HTMLTaroCoverViewCoreElement;
        new (): HTMLTaroCoverViewCoreElement;
    };
    interface HTMLTaroCustomWrapperCoreElement extends Components.TaroCustomWrapperCore, HTMLStencilElement {
    }
    var HTMLTaroCustomWrapperCoreElement: {
        prototype: HTMLTaroCustomWrapperCoreElement;
        new (): HTMLTaroCustomWrapperCoreElement;
    };
    interface HTMLTaroEditorCoreElement extends Components.TaroEditorCore, HTMLStencilElement {
    }
    var HTMLTaroEditorCoreElement: {
        prototype: HTMLTaroEditorCoreElement;
        new (): HTMLTaroEditorCoreElement;
    };
    interface HTMLTaroFollowSwanCoreElement extends Components.TaroFollowSwanCore, HTMLStencilElement {
    }
    var HTMLTaroFollowSwanCoreElement: {
        prototype: HTMLTaroFollowSwanCoreElement;
        new (): HTMLTaroFollowSwanCoreElement;
    };
    interface HTMLTaroFormCoreElement extends Components.TaroFormCore, HTMLStencilElement {
    }
    var HTMLTaroFormCoreElement: {
        prototype: HTMLTaroFormCoreElement;
        new (): HTMLTaroFormCoreElement;
    };
    interface HTMLTaroFunctionalPageNavigatorCoreElement extends Components.TaroFunctionalPageNavigatorCore, HTMLStencilElement {
    }
    var HTMLTaroFunctionalPageNavigatorCoreElement: {
        prototype: HTMLTaroFunctionalPageNavigatorCoreElement;
        new (): HTMLTaroFunctionalPageNavigatorCoreElement;
    };
    interface HTMLTaroGridViewCoreElement extends Components.TaroGridViewCore, HTMLStencilElement {
    }
    var HTMLTaroGridViewCoreElement: {
        prototype: HTMLTaroGridViewCoreElement;
        new (): HTMLTaroGridViewCoreElement;
    };
    interface HTMLTaroIconCoreElement extends Components.TaroIconCore, HTMLStencilElement {
    }
    var HTMLTaroIconCoreElement: {
        prototype: HTMLTaroIconCoreElement;
        new (): HTMLTaroIconCoreElement;
    };
    interface HTMLTaroImageCoreElement extends Components.TaroImageCore, HTMLStencilElement {
    }
    var HTMLTaroImageCoreElement: {
        prototype: HTMLTaroImageCoreElement;
        new (): HTMLTaroImageCoreElement;
    };
    interface HTMLTaroInlinePaymentPanelCoreElement extends Components.TaroInlinePaymentPanelCore, HTMLStencilElement {
    }
    var HTMLTaroInlinePaymentPanelCoreElement: {
        prototype: HTMLTaroInlinePaymentPanelCoreElement;
        new (): HTMLTaroInlinePaymentPanelCoreElement;
    };
    interface HTMLTaroInputCoreElement extends Components.TaroInputCore, HTMLStencilElement {
    }
    var HTMLTaroInputCoreElement: {
        prototype: HTMLTaroInputCoreElement;
        new (): HTMLTaroInputCoreElement;
    };
    interface HTMLTaroKeyboardAccessoryCoreElement extends Components.TaroKeyboardAccessoryCore, HTMLStencilElement {
    }
    var HTMLTaroKeyboardAccessoryCoreElement: {
        prototype: HTMLTaroKeyboardAccessoryCoreElement;
        new (): HTMLTaroKeyboardAccessoryCoreElement;
    };
    interface HTMLTaroLabelCoreElement extends Components.TaroLabelCore, HTMLStencilElement {
    }
    var HTMLTaroLabelCoreElement: {
        prototype: HTMLTaroLabelCoreElement;
        new (): HTMLTaroLabelCoreElement;
    };
    interface HTMLTaroLifestyleCoreElement extends Components.TaroLifestyleCore, HTMLStencilElement {
    }
    var HTMLTaroLifestyleCoreElement: {
        prototype: HTMLTaroLifestyleCoreElement;
        new (): HTMLTaroLifestyleCoreElement;
    };
    interface HTMLTaroLikeCoreElement extends Components.TaroLikeCore, HTMLStencilElement {
    }
    var HTMLTaroLikeCoreElement: {
        prototype: HTMLTaroLikeCoreElement;
        new (): HTMLTaroLikeCoreElement;
    };
    interface HTMLTaroListViewCoreElement extends Components.TaroListViewCore, HTMLStencilElement {
    }
    var HTMLTaroListViewCoreElement: {
        prototype: HTMLTaroListViewCoreElement;
        new (): HTMLTaroListViewCoreElement;
    };
    interface HTMLTaroLivePlayerCoreElement extends Components.TaroLivePlayerCore, HTMLStencilElement {
    }
    var HTMLTaroLivePlayerCoreElement: {
        prototype: HTMLTaroLivePlayerCoreElement;
        new (): HTMLTaroLivePlayerCoreElement;
    };
    interface HTMLTaroLivePusherCoreElement extends Components.TaroLivePusherCore, HTMLStencilElement {
    }
    var HTMLTaroLivePusherCoreElement: {
        prototype: HTMLTaroLivePusherCoreElement;
        new (): HTMLTaroLivePusherCoreElement;
    };
    interface HTMLTaroLoginCoreElement extends Components.TaroLoginCore, HTMLStencilElement {
    }
    var HTMLTaroLoginCoreElement: {
        prototype: HTMLTaroLoginCoreElement;
        new (): HTMLTaroLoginCoreElement;
    };
    interface HTMLTaroLottieCoreElement extends Components.TaroLottieCore, HTMLStencilElement {
    }
    var HTMLTaroLottieCoreElement: {
        prototype: HTMLTaroLottieCoreElement;
        new (): HTMLTaroLottieCoreElement;
    };
    interface HTMLTaroMapCoreElement extends Components.TaroMapCore, HTMLStencilElement {
    }
    var HTMLTaroMapCoreElement: {
        prototype: HTMLTaroMapCoreElement;
        new (): HTMLTaroMapCoreElement;
    };
    interface HTMLTaroMatchMediaCoreElement extends Components.TaroMatchMediaCore, HTMLStencilElement {
    }
    var HTMLTaroMatchMediaCoreElement: {
        prototype: HTMLTaroMatchMediaCoreElement;
        new (): HTMLTaroMatchMediaCoreElement;
    };
    interface HTMLTaroMovableAreaCoreElement extends Components.TaroMovableAreaCore, HTMLStencilElement {
    }
    var HTMLTaroMovableAreaCoreElement: {
        prototype: HTMLTaroMovableAreaCoreElement;
        new (): HTMLTaroMovableAreaCoreElement;
    };
    interface HTMLTaroMovableViewCoreElement extends Components.TaroMovableViewCore, HTMLStencilElement {
    }
    var HTMLTaroMovableViewCoreElement: {
        prototype: HTMLTaroMovableViewCoreElement;
        new (): HTMLTaroMovableViewCoreElement;
    };
    interface HTMLTaroNativeSlotCoreElement extends Components.TaroNativeSlotCore, HTMLStencilElement {
    }
    var HTMLTaroNativeSlotCoreElement: {
        prototype: HTMLTaroNativeSlotCoreElement;
        new (): HTMLTaroNativeSlotCoreElement;
    };
    interface HTMLTaroNavigationBarCoreElement extends Components.TaroNavigationBarCore, HTMLStencilElement {
    }
    var HTMLTaroNavigationBarCoreElement: {
        prototype: HTMLTaroNavigationBarCoreElement;
        new (): HTMLTaroNavigationBarCoreElement;
    };
    /**
     * TODO: 参数还需要进一步细化对齐
     * Navigator组件
     * https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html
     */
    interface HTMLTaroNavigatorCoreElement extends Components.TaroNavigatorCore, HTMLStencilElement {
    }
    var HTMLTaroNavigatorCoreElement: {
        prototype: HTMLTaroNavigatorCoreElement;
        new (): HTMLTaroNavigatorCoreElement;
    };
    interface HTMLTaroOfficialAccountCoreElement extends Components.TaroOfficialAccountCore, HTMLStencilElement {
    }
    var HTMLTaroOfficialAccountCoreElement: {
        prototype: HTMLTaroOfficialAccountCoreElement;
        new (): HTMLTaroOfficialAccountCoreElement;
    };
    interface HTMLTaroOpenDataCoreElement extends Components.TaroOpenDataCore, HTMLStencilElement {
    }
    var HTMLTaroOpenDataCoreElement: {
        prototype: HTMLTaroOpenDataCoreElement;
        new (): HTMLTaroOpenDataCoreElement;
    };
    interface HTMLTaroPageContainerCoreElement extends Components.TaroPageContainerCore, HTMLStencilElement {
    }
    var HTMLTaroPageContainerCoreElement: {
        prototype: HTMLTaroPageContainerCoreElement;
        new (): HTMLTaroPageContainerCoreElement;
    };
    interface HTMLTaroPageMetaCoreElement extends Components.TaroPageMetaCore, HTMLStencilElement {
    }
    var HTMLTaroPageMetaCoreElement: {
        prototype: HTMLTaroPageMetaCoreElement;
        new (): HTMLTaroPageMetaCoreElement;
    };
    interface HTMLTaroPickerCoreElement extends Components.TaroPickerCore, HTMLStencilElement {
    }
    var HTMLTaroPickerCoreElement: {
        prototype: HTMLTaroPickerCoreElement;
        new (): HTMLTaroPickerCoreElement;
    };
    interface HTMLTaroPickerGroupElement extends Components.TaroPickerGroup, HTMLStencilElement {
    }
    var HTMLTaroPickerGroupElement: {
        prototype: HTMLTaroPickerGroupElement;
        new (): HTMLTaroPickerGroupElement;
    };
    interface HTMLTaroPickerViewColumnCoreElement extends Components.TaroPickerViewColumnCore, HTMLStencilElement {
    }
    var HTMLTaroPickerViewColumnCoreElement: {
        prototype: HTMLTaroPickerViewColumnCoreElement;
        new (): HTMLTaroPickerViewColumnCoreElement;
    };
    interface HTMLTaroPickerViewCoreElement extends Components.TaroPickerViewCore, HTMLStencilElement {
    }
    var HTMLTaroPickerViewCoreElement: {
        prototype: HTMLTaroPickerViewCoreElement;
        new (): HTMLTaroPickerViewCoreElement;
    };
    interface HTMLTaroProgressCoreElement extends Components.TaroProgressCore, HTMLStencilElement {
    }
    var HTMLTaroProgressCoreElement: {
        prototype: HTMLTaroProgressCoreElement;
        new (): HTMLTaroProgressCoreElement;
    };
    interface HTMLTaroPullToRefreshCoreElement extends Components.TaroPullToRefreshCore, HTMLStencilElement {
    }
    var HTMLTaroPullToRefreshCoreElement: {
        prototype: HTMLTaroPullToRefreshCoreElement;
        new (): HTMLTaroPullToRefreshCoreElement;
    };
    interface HTMLTaroRadioCoreElement extends Components.TaroRadioCore, HTMLStencilElement {
    }
    var HTMLTaroRadioCoreElement: {
        prototype: HTMLTaroRadioCoreElement;
        new (): HTMLTaroRadioCoreElement;
    };
    interface HTMLTaroRadioGroupCoreElement extends Components.TaroRadioGroupCore, HTMLStencilElement {
    }
    var HTMLTaroRadioGroupCoreElement: {
        prototype: HTMLTaroRadioGroupCoreElement;
        new (): HTMLTaroRadioGroupCoreElement;
    };
    interface HTMLTaroRichTextCoreElement extends Components.TaroRichTextCore, HTMLStencilElement {
    }
    var HTMLTaroRichTextCoreElement: {
        prototype: HTMLTaroRichTextCoreElement;
        new (): HTMLTaroRichTextCoreElement;
    };
    interface HTMLTaroRootPortalCoreElement extends Components.TaroRootPortalCore, HTMLStencilElement {
    }
    var HTMLTaroRootPortalCoreElement: {
        prototype: HTMLTaroRootPortalCoreElement;
        new (): HTMLTaroRootPortalCoreElement;
    };
    interface HTMLTaroRtcRoomCoreElement extends Components.TaroRtcRoomCore, HTMLStencilElement {
    }
    var HTMLTaroRtcRoomCoreElement: {
        prototype: HTMLTaroRtcRoomCoreElement;
        new (): HTMLTaroRtcRoomCoreElement;
    };
    interface HTMLTaroRtcRoomItemCoreElement extends Components.TaroRtcRoomItemCore, HTMLStencilElement {
    }
    var HTMLTaroRtcRoomItemCoreElement: {
        prototype: HTMLTaroRtcRoomItemCoreElement;
        new (): HTMLTaroRtcRoomItemCoreElement;
    };
    interface HTMLTaroScrollViewCoreElement extends Components.TaroScrollViewCore, HTMLStencilElement {
    }
    var HTMLTaroScrollViewCoreElement: {
        prototype: HTMLTaroScrollViewCoreElement;
        new (): HTMLTaroScrollViewCoreElement;
    };
    interface HTMLTaroShareElementCoreElement extends Components.TaroShareElementCore, HTMLStencilElement {
    }
    var HTMLTaroShareElementCoreElement: {
        prototype: HTMLTaroShareElementCoreElement;
        new (): HTMLTaroShareElementCoreElement;
    };
    interface HTMLTaroSliderCoreElement extends Components.TaroSliderCore, HTMLStencilElement {
    }
    var HTMLTaroSliderCoreElement: {
        prototype: HTMLTaroSliderCoreElement;
        new (): HTMLTaroSliderCoreElement;
    };
    interface HTMLTaroSlotCoreElement extends Components.TaroSlotCore, HTMLStencilElement {
    }
    var HTMLTaroSlotCoreElement: {
        prototype: HTMLTaroSlotCoreElement;
        new (): HTMLTaroSlotCoreElement;
    };
    interface HTMLTaroSnapshotCoreElement extends Components.TaroSnapshotCore, HTMLStencilElement {
    }
    var HTMLTaroSnapshotCoreElement: {
        prototype: HTMLTaroSnapshotCoreElement;
        new (): HTMLTaroSnapshotCoreElement;
    };
    interface HTMLTaroStickyHeaderCoreElement extends Components.TaroStickyHeaderCore, HTMLStencilElement {
    }
    var HTMLTaroStickyHeaderCoreElement: {
        prototype: HTMLTaroStickyHeaderCoreElement;
        new (): HTMLTaroStickyHeaderCoreElement;
    };
    interface HTMLTaroStickySectionCoreElement extends Components.TaroStickySectionCore, HTMLStencilElement {
    }
    var HTMLTaroStickySectionCoreElement: {
        prototype: HTMLTaroStickySectionCoreElement;
        new (): HTMLTaroStickySectionCoreElement;
    };
    interface HTMLTaroSwiperCoreElement extends Components.TaroSwiperCore, HTMLStencilElement {
    }
    var HTMLTaroSwiperCoreElement: {
        prototype: HTMLTaroSwiperCoreElement;
        new (): HTMLTaroSwiperCoreElement;
    };
    interface HTMLTaroSwiperItemCoreElement extends Components.TaroSwiperItemCore, HTMLStencilElement {
    }
    var HTMLTaroSwiperItemCoreElement: {
        prototype: HTMLTaroSwiperItemCoreElement;
        new (): HTMLTaroSwiperItemCoreElement;
    };
    interface HTMLTaroSwitchCoreElement extends Components.TaroSwitchCore, HTMLStencilElement {
    }
    var HTMLTaroSwitchCoreElement: {
        prototype: HTMLTaroSwitchCoreElement;
        new (): HTMLTaroSwitchCoreElement;
    };
    interface HTMLTaroTabItemCoreElement extends Components.TaroTabItemCore, HTMLStencilElement {
    }
    var HTMLTaroTabItemCoreElement: {
        prototype: HTMLTaroTabItemCoreElement;
        new (): HTMLTaroTabItemCoreElement;
    };
    interface HTMLTaroTabbarElement extends Components.TaroTabbar, HTMLStencilElement {
    }
    var HTMLTaroTabbarElement: {
        prototype: HTMLTaroTabbarElement;
        new (): HTMLTaroTabbarElement;
    };
    interface HTMLTaroTabsCoreElement extends Components.TaroTabsCore, HTMLStencilElement {
    }
    var HTMLTaroTabsCoreElement: {
        prototype: HTMLTaroTabsCoreElement;
        new (): HTMLTaroTabsCoreElement;
    };
    interface HTMLTaroTextCoreElement extends Components.TaroTextCore, HTMLStencilElement {
    }
    var HTMLTaroTextCoreElement: {
        prototype: HTMLTaroTextCoreElement;
        new (): HTMLTaroTextCoreElement;
    };
    interface HTMLTaroTextareaCoreElement extends Components.TaroTextareaCore, HTMLStencilElement {
    }
    var HTMLTaroTextareaCoreElement: {
        prototype: HTMLTaroTextareaCoreElement;
        new (): HTMLTaroTextareaCoreElement;
    };
    interface HTMLTaroVideoControlElement extends Components.TaroVideoControl, HTMLStencilElement {
    }
    var HTMLTaroVideoControlElement: {
        prototype: HTMLTaroVideoControlElement;
        new (): HTMLTaroVideoControlElement;
    };
    interface HTMLTaroVideoCoreElement extends Components.TaroVideoCore, HTMLStencilElement {
    }
    var HTMLTaroVideoCoreElement: {
        prototype: HTMLTaroVideoCoreElement;
        new (): HTMLTaroVideoCoreElement;
    };
    interface HTMLTaroVideoDanmuElement extends Components.TaroVideoDanmu, HTMLStencilElement {
    }
    var HTMLTaroVideoDanmuElement: {
        prototype: HTMLTaroVideoDanmuElement;
        new (): HTMLTaroVideoDanmuElement;
    };
    interface HTMLTaroViewCoreElement extends Components.TaroViewCore, HTMLStencilElement {
    }
    var HTMLTaroViewCoreElement: {
        prototype: HTMLTaroViewCoreElement;
        new (): HTMLTaroViewCoreElement;
    };
    interface HTMLTaroVoipRoomCoreElement extends Components.TaroVoipRoomCore, HTMLStencilElement {
    }
    var HTMLTaroVoipRoomCoreElement: {
        prototype: HTMLTaroVoipRoomCoreElement;
        new (): HTMLTaroVoipRoomCoreElement;
    };
    interface HTMLTaroWebViewCoreElement extends Components.TaroWebViewCore, HTMLStencilElement {
    }
    var HTMLTaroWebViewCoreElement: {
        prototype: HTMLTaroWebViewCoreElement;
        new (): HTMLTaroWebViewCoreElement;
    };
    interface HTMLElementTagNameMap {
        "taro-ad-core": HTMLTaroAdCoreElement;
        "taro-ad-custom-core": HTMLTaroAdCustomCoreElement;
        "taro-animation-video-core": HTMLTaroAnimationVideoCoreElement;
        "taro-animation-view-core": HTMLTaroAnimationViewCoreElement;
        "taro-ar-camera-core": HTMLTaroArCameraCoreElement;
        "taro-audio-core": HTMLTaroAudioCoreElement;
        "taro-aweme-data-core": HTMLTaroAwemeDataCoreElement;
        "taro-block-core": HTMLTaroBlockCoreElement;
        "taro-button-core": HTMLTaroButtonCoreElement;
        "taro-camera-core": HTMLTaroCameraCoreElement;
        "taro-canvas-core": HTMLTaroCanvasCoreElement;
        "taro-channel-live-core": HTMLTaroChannelLiveCoreElement;
        "taro-channel-video-core": HTMLTaroChannelVideoCoreElement;
        "taro-checkbox-core": HTMLTaroCheckboxCoreElement;
        "taro-checkbox-group-core": HTMLTaroCheckboxGroupCoreElement;
        "taro-comment-detail-core": HTMLTaroCommentDetailCoreElement;
        "taro-comment-list-core": HTMLTaroCommentListCoreElement;
        "taro-contact-button-core": HTMLTaroContactButtonCoreElement;
        "taro-cover-image-core": HTMLTaroCoverImageCoreElement;
        "taro-cover-view-core": HTMLTaroCoverViewCoreElement;
        "taro-custom-wrapper-core": HTMLTaroCustomWrapperCoreElement;
        "taro-editor-core": HTMLTaroEditorCoreElement;
        "taro-follow-swan-core": HTMLTaroFollowSwanCoreElement;
        "taro-form-core": HTMLTaroFormCoreElement;
        "taro-functional-page-navigator-core": HTMLTaroFunctionalPageNavigatorCoreElement;
        "taro-grid-view-core": HTMLTaroGridViewCoreElement;
        "taro-icon-core": HTMLTaroIconCoreElement;
        "taro-image-core": HTMLTaroImageCoreElement;
        "taro-inline-payment-panel-core": HTMLTaroInlinePaymentPanelCoreElement;
        "taro-input-core": HTMLTaroInputCoreElement;
        "taro-keyboard-accessory-core": HTMLTaroKeyboardAccessoryCoreElement;
        "taro-label-core": HTMLTaroLabelCoreElement;
        "taro-lifestyle-core": HTMLTaroLifestyleCoreElement;
        "taro-like-core": HTMLTaroLikeCoreElement;
        "taro-list-view-core": HTMLTaroListViewCoreElement;
        "taro-live-player-core": HTMLTaroLivePlayerCoreElement;
        "taro-live-pusher-core": HTMLTaroLivePusherCoreElement;
        "taro-login-core": HTMLTaroLoginCoreElement;
        "taro-lottie-core": HTMLTaroLottieCoreElement;
        "taro-map-core": HTMLTaroMapCoreElement;
        "taro-match-media-core": HTMLTaroMatchMediaCoreElement;
        "taro-movable-area-core": HTMLTaroMovableAreaCoreElement;
        "taro-movable-view-core": HTMLTaroMovableViewCoreElement;
        "taro-native-slot-core": HTMLTaroNativeSlotCoreElement;
        "taro-navigation-bar-core": HTMLTaroNavigationBarCoreElement;
        "taro-navigator-core": HTMLTaroNavigatorCoreElement;
        "taro-official-account-core": HTMLTaroOfficialAccountCoreElement;
        "taro-open-data-core": HTMLTaroOpenDataCoreElement;
        "taro-page-container-core": HTMLTaroPageContainerCoreElement;
        "taro-page-meta-core": HTMLTaroPageMetaCoreElement;
        "taro-picker-core": HTMLTaroPickerCoreElement;
        "taro-picker-group": HTMLTaroPickerGroupElement;
        "taro-picker-view-column-core": HTMLTaroPickerViewColumnCoreElement;
        "taro-picker-view-core": HTMLTaroPickerViewCoreElement;
        "taro-progress-core": HTMLTaroProgressCoreElement;
        "taro-pull-to-refresh-core": HTMLTaroPullToRefreshCoreElement;
        "taro-radio-core": HTMLTaroRadioCoreElement;
        "taro-radio-group-core": HTMLTaroRadioGroupCoreElement;
        "taro-rich-text-core": HTMLTaroRichTextCoreElement;
        "taro-root-portal-core": HTMLTaroRootPortalCoreElement;
        "taro-rtc-room-core": HTMLTaroRtcRoomCoreElement;
        "taro-rtc-room-item-core": HTMLTaroRtcRoomItemCoreElement;
        "taro-scroll-view-core": HTMLTaroScrollViewCoreElement;
        "taro-share-element-core": HTMLTaroShareElementCoreElement;
        "taro-slider-core": HTMLTaroSliderCoreElement;
        "taro-slot-core": HTMLTaroSlotCoreElement;
        "taro-snapshot-core": HTMLTaroSnapshotCoreElement;
        "taro-sticky-header-core": HTMLTaroStickyHeaderCoreElement;
        "taro-sticky-section-core": HTMLTaroStickySectionCoreElement;
        "taro-swiper-core": HTMLTaroSwiperCoreElement;
        "taro-swiper-item-core": HTMLTaroSwiperItemCoreElement;
        "taro-switch-core": HTMLTaroSwitchCoreElement;
        "taro-tab-item-core": HTMLTaroTabItemCoreElement;
        "taro-tabbar": HTMLTaroTabbarElement;
        "taro-tabs-core": HTMLTaroTabsCoreElement;
        "taro-text-core": HTMLTaroTextCoreElement;
        "taro-textarea-core": HTMLTaroTextareaCoreElement;
        "taro-video-control": HTMLTaroVideoControlElement;
        "taro-video-core": HTMLTaroVideoCoreElement;
        "taro-video-danmu": HTMLTaroVideoDanmuElement;
        "taro-view-core": HTMLTaroViewCoreElement;
        "taro-voip-room-core": HTMLTaroVoipRoomCoreElement;
        "taro-web-view-core": HTMLTaroWebViewCoreElement;
    }
}
declare namespace LocalJSX {
    interface TaroAdCore {
    }
    interface TaroAdCustomCore {
    }
    interface TaroAnimationVideoCore {
    }
    interface TaroAnimationViewCore {
    }
    interface TaroArCameraCore {
    }
    interface TaroAudioCore {
        "autoplay"?: boolean;
        "controls"?: boolean;
        "loop"?: boolean;
        "muted"?: boolean;
        "nativeProps"?: {};
        "onEnded"?: (event: TaroAudioCoreCustomEvent<any>) => void;
        "onError"?: (event: TaroAudioCoreCustomEvent<any>) => void;
        "onPause"?: (event: TaroAudioCoreCustomEvent<any>) => void;
        "onPlay"?: (event: TaroAudioCoreCustomEvent<any>) => void;
        "onTimeupdate"?: (event: TaroAudioCoreCustomEvent<any>) => void;
        "src"?: string;
    }
    interface TaroAwemeDataCore {
    }
    interface TaroBlockCore {
    }
    interface TaroButtonCore {
        "disabled"?: boolean;
        "formType"?: 'submit' | 'reset' | null;
        "hoverClass"?: string;
        "hoverStartTime"?: number;
        "hoverStayTime"?: number;
        "loading"?: boolean;
        "onTarobuttonreset"?: (event: TaroButtonCoreCustomEvent<any>) => void;
        "onTarobuttonsubmit"?: (event: TaroButtonCoreCustomEvent<any>) => void;
        "plain"?: boolean;
        "size"?: string;
        "type"?: string;
    }
    interface TaroCameraCore {
    }
    interface TaroCanvasCore {
        "canvasId"?: string;
        "height"?: string;
        "nativeProps"?: {};
        "onLongtap"?: (event: TaroCanvasCoreCustomEvent<any>) => void;
        "width"?: string;
    }
    interface TaroChannelLiveCore {
    }
    interface TaroChannelVideoCore {
    }
    interface TaroCheckboxCore {
        "checked"?: boolean;
        "color"?: string;
        "disabled"?: boolean;
        "id"?: string;
        "name"?: string;
        "nativeProps"?: {};
        "onCheckboxchange"?: (event: TaroCheckboxCoreCustomEvent<any>) => void;
        "value"?: string | number;
    }
    interface TaroCheckboxGroupCore {
        "name"?: any;
        "onChange"?: (event: TaroCheckboxGroupCoreCustomEvent<any>) => void;
    }
    interface TaroCommentDetailCore {
    }
    interface TaroCommentListCore {
    }
    interface TaroContactButtonCore {
    }
    interface TaroCoverImageCore {
        "nativeProps"?: {};
        "onError"?: (event: TaroCoverImageCoreCustomEvent<any>) => void;
        "onLoad"?: (event: TaroCoverImageCoreCustomEvent<any>) => void;
        "src"?: string;
    }
    interface TaroCoverViewCore {
        "animation"?: string;
        "hoverClass"?: string;
        "hoverStartTime"?: number;
        "hoverStayTime"?: number;
        "onLongpress"?: (event: TaroCoverViewCoreCustomEvent<any>) => void;
    }
    interface TaroCustomWrapperCore {
    }
    interface TaroEditorCore {
    }
    interface TaroFollowSwanCore {
    }
    interface TaroFormCore {
        "onSubmit"?: (event: TaroFormCoreCustomEvent<any>) => void;
    }
    interface TaroFunctionalPageNavigatorCore {
    }
    interface TaroGridViewCore {
    }
    interface TaroIconCore {
        "color"?: string;
        "size"?: string | number;
        "type"?: Type;
    }
    interface TaroImageCore {
        "lazyLoad"?: boolean;
        "mode"?: Mode;
        "nativeProps"?: {};
        "onError"?: (event: TaroImageCoreCustomEvent<any>) => void;
        "onLoad"?: (event: TaroImageCoreCustomEvent<any>) => void;
        "src"?: string;
    }
    interface TaroInlinePaymentPanelCore {
    }
    interface TaroInputCore {
        "autoFocus"?: boolean;
        "confirmType"?: string;
        "disabled"?: boolean;
        "maxlength"?: number;
        "name"?: string;
        "nativeProps"?: {};
        "onBlur"?: (event: TaroInputCoreCustomEvent<any>) => void;
        "onChange"?: (event: TaroInputCoreCustomEvent<any>) => void;
        "onConfirm"?: (event: TaroInputCoreCustomEvent<any>) => void;
        "onFocus"?: (event: TaroInputCoreCustomEvent<any>) => void;
        "onInput"?: (event: TaroInputCoreCustomEvent<any>) => void;
        "onKeydown"?: (event: TaroInputCoreCustomEvent<any>) => void;
        "onPaste"?: (event: TaroInputCoreCustomEvent<any>) => void;
        "password"?: boolean;
        "placeholder"?: string;
        "type"?: string;
        "value"?: string;
    }
    interface TaroKeyboardAccessoryCore {
    }
    interface TaroLabelCore {
        "for"?: string;
    }
    interface TaroLifestyleCore {
    }
    interface TaroLikeCore {
    }
    interface TaroListViewCore {
    }
    interface TaroLivePlayerCore {
    }
    interface TaroLivePusherCore {
    }
    interface TaroLoginCore {
    }
    interface TaroLottieCore {
    }
    interface TaroMapCore {
    }
    interface TaroMatchMediaCore {
    }
    interface TaroMovableAreaCore {
        /**
          * 当里面的 movable-view 设置为支持双指缩放时，设置此值可将缩放手势生效区域修改为整个movable-area
         */
        "scaleArea"?: boolean;
    }
    interface TaroMovableViewCore {
        /**
          * 是否使用动画
         */
        "animation"?: boolean;
        /**
          * 阻尼系数，用于控制x或y改变时的动画和过界回弹的动画，值越大移动越快
         */
        "damping"?: number;
        /**
          * 移动方向，属性值有all、vertical、horizontal、none
         */
        "direction"?: "all" | "vertical" | "horizontal" | "none";
        /**
          * 是否禁用
         */
        "disabled"?: boolean;
        /**
          * 摩擦系数，用于控制惯性滑动的动画，值越大摩擦力越大，滑动越快停止；必须大于0，否则会被设置成默认值
         */
        "friction"?: number;
        /**
          * 是否带有惯性
         */
        "inertia"?: boolean;
        /**
          * 拖动过程中触发的事件，event.detail = {x, y, source}
         */
        "onChange"?: (event: TaroMovableViewCoreCustomEvent<any>) => void;
        /**
          * 初次手指触摸后移动为横向的移动时触发，如果catch此事件，则意味着touchmove事件也被catch
         */
        "onHtouchmove"?: (event: TaroMovableViewCoreCustomEvent<any>) => void;
        /**
          * 缩放过程中触发的事件，event.detail = {x, y, scale}，x和y字段在2.1.0之后支持
         */
        "onScale"?: (event: TaroMovableViewCoreCustomEvent<any>) => void;
        /**
          * 初次手指触摸后移动为纵向的移动时触发，如果catch此事件，则意味着touchmove事件也被catch
         */
        "onVtouchmove"?: (event: TaroMovableViewCoreCustomEvent<any>) => void;
        /**
          * 超过可移动区域后，是否还可以移动
         */
        "outOfBounds"?: boolean;
        /**
          * 是否支持双指缩放，默认缩放手势生效区域是在movable-view内
         */
        "scale"?: boolean;
        /**
          * 定义缩放倍数最大值
         */
        "scaleMax"?: number;
        /**
          * 定义缩放倍数最小值
         */
        "scaleMin"?: number;
        /**
          * 定义缩放倍数，取值范围为 0.5 - 10
         */
        "scaleValue"?: number;
        /**
          * 定义x轴方向的偏移，如果x的值不在可移动范围内，会自动移动到可移动范围；改变x的值会触发动画；单位支持px；
         */
        "x"?: number | string;
        /**
          * 定义y轴方向的偏移，如果y的值不在可移动范围内，会自动移动到可移动范围；改变y的值会触发动画；单位支持px；
         */
        "y"?: number | string;
    }
    interface TaroNativeSlotCore {
    }
    interface TaroNavigationBarCore {
    }
    /**
     * TODO: 参数还需要进一步细化对齐
     * Navigator组件
     * https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html
     */
    interface TaroNavigatorCore {
        "delta"?: number;
        "hoverClass"?: string;
        "isHover"?: boolean;
        "onComplete"?: (event: TaroNavigatorCoreCustomEvent<any>) => void;
        "onCuccess"?: (event: TaroNavigatorCoreCustomEvent<any>) => void;
        "onFail"?: (event: TaroNavigatorCoreCustomEvent<any>) => void;
        "openType"?: string;
        "url"?: string;
    }
    interface TaroOfficialAccountCore {
    }
    interface TaroOpenDataCore {
    }
    interface TaroPageContainerCore {
    }
    interface TaroPageMetaCore {
    }
    interface TaroPickerCore {
        "disabled"?: boolean;
        "end"?: string;
        "fields"?: Fields;
        "mode"?: Mode;
        "name"?: string;
        "onCancel"?: (event: TaroPickerCoreCustomEvent<any>) => void;
        "onChange"?: (event: TaroPickerCoreCustomEvent<any>) => void;
        "onColumnchange"?: (event: TaroPickerCoreCustomEvent<any>) => void;
        "range"?: any[];
        "rangeKey"?: string;
        "start"?: string;
        "textProps"?: PickerText;
        "value"?: PickerValue;
    }
    interface TaroPickerGroup {
        "columnId"?: string;
        "height"?: number;
        "mode"?: 'time' | 'date';
        "onColumnChange"?: (event: TaroPickerGroupCustomEvent<any>) => void;
        "range"?: any[];
        "rangeKey"?: string;
        "updateDay"?: (value: number, fields: number) => void;
        "updateHeight"?: (height: number, columnId: string, needRevise?: boolean) => void;
    }
    interface TaroPickerViewColumnCore {
        "col"?: string;
        "initialPosition"?: string;
        "onOnselect"?: (event: TaroPickerViewColumnCoreCustomEvent<any>) => void;
        "onOnselectend"?: (event: TaroPickerViewColumnCoreCustomEvent<any>) => void;
        "onOnselectstart"?: (event: TaroPickerViewColumnCoreCustomEvent<any>) => void;
        "paddingVertical"?: number;
    }
    interface TaroPickerViewCore {
        "indicatorClass"?: string;
        "indicatorStyle"?: string;
        "maskClass"?: string;
        "maskStyle"?: string;
        "onChange"?: (event: TaroPickerViewCoreCustomEvent<any>) => void;
        "onPickend"?: (event: TaroPickerViewCoreCustomEvent<any>) => void;
        "onPickstart"?: (event: TaroPickerViewCoreCustomEvent<any>) => void;
        "value"?: number[];
    }
    interface TaroProgressCore {
        "active"?: boolean;
        "activeColor"?: string;
        "backgroundColor"?: string;
        "borderRadius"?: number | string;
        "fontSize"?: number | string;
        "percent"?: number;
        "showInfo"?: boolean;
        "strokeWidth"?: number | string;
    }
    interface TaroPullToRefreshCore {
        "damping"?: number;
        "distanceToRefresh"?: number;
        "indicator"?: { activate: string; deactivate: string; release: string; finish: string; };
        "onRefresh"?: (event: TaroPullToRefreshCoreCustomEvent<any>) => void;
        "prefixCls"?: string;
    }
    interface TaroRadioCore {
        "checked"?: boolean;
        "disabled"?: boolean;
        "id"?: string;
        "name"?: string;
        "nativeProps"?: {};
        "onRadiochange"?: (event: TaroRadioCoreCustomEvent<any>) => void;
        "value"?: string;
    }
    interface TaroRadioGroupCore {
        "name"?: any;
        "onChange"?: (event: TaroRadioGroupCoreCustomEvent<any>) => void;
    }
    interface TaroRichTextCore {
        "nodes"?: Nodes;
        "selectable"?: boolean;
        "space"?: keyof TextProps.TSpace;
        "userSelect"?: boolean;
    }
    interface TaroRootPortalCore {
    }
    interface TaroRtcRoomCore {
    }
    interface TaroRtcRoomItemCore {
    }
    interface TaroScrollViewCore {
        "animated"?: boolean;
        "lowerThreshold"?: number | string;
        "mpScrollIntoView"?: string;
        "mpScrollIntoViewAlignment"?: 'start' | 'center' | 'end' | 'nearest';
        "mpScrollLeft"?: number | string;
        "mpScrollTop"?: number | string;
        "onScroll"?: (event: TaroScrollViewCoreCustomEvent<any>) => void;
        "onScrolltolower"?: (event: TaroScrollViewCoreCustomEvent<any>) => void;
        "onScrolltoupper"?: (event: TaroScrollViewCoreCustomEvent<any>) => void;
        "scrollX"?: boolean;
        "scrollY"?: boolean;
        "upperThreshold"?: number | string;
    }
    interface TaroShareElementCore {
    }
    interface TaroSliderCore {
        "activeColor"?: string;
        "backgroundColor"?: string;
        "blockColor"?: string;
        "blockSize"?: number;
        "disabled"?: boolean;
        "max"?: number;
        "min"?: number;
        "name"?: string;
        "onChange"?: (event: TaroSliderCoreCustomEvent<any>) => void;
        "onChanging"?: (event: TaroSliderCoreCustomEvent<any>) => void;
        "showValue"?: boolean;
        "step"?: number;
        "value"?: number;
    }
    interface TaroSlotCore {
    }
    interface TaroSnapshotCore {
    }
    interface TaroStickyHeaderCore {
    }
    interface TaroStickySectionCore {
    }
    interface TaroSwiperCore {
        /**
          * 是否自动切换
         */
        "autoplay"?: boolean;
        /**
          * 是否采用衔接滑动
         */
        "circular"?: boolean;
        /**
          * 当前所在滑块的 index
         */
        "current"?: number;
        /**
          * 当前所在滑块的 item-id
         */
        "currentItemId"?: string;
        /**
          * 同时显示的滑块数量
         */
        "displayMultipleItems"?: number;
        /**
          * 滑动动画时长
         */
        "duration"?: number;
        /**
          * 给 previewImage API 使用，全屏显示 swiper
         */
        "full"?: boolean;
        /**
          * 当前选中的指示点颜色
         */
        "indicatorActiveColor"?: string;
        /**
          * 指示点颜色
         */
        "indicatorColor"?: string;
        /**
          * 是否显示面板指示点
         */
        "indicatorDots"?: boolean;
        /**
          * 自动切换时间间隔
         */
        "interval"?: number;
        /**
          * 后边距，可用于露出后一项的一小部分，接受 px 值
         */
        "nextMargin"?: string;
        "onAnimationfinish"?: (event: TaroSwiperCoreCustomEvent<any>) => void;
        "onChange"?: (event: TaroSwiperCoreCustomEvent<any>) => void;
        /**
          * 前边距，可用于露出前一项的一小部分，接受 px 值
         */
        "previousMargin"?: string;
        /**
          * 滑动方向是否为纵向
         */
        "vertical"?: boolean;
        /**
          * 给 previewImage API 使用，缩放支持
         */
        "zoom"?: boolean;
    }
    interface TaroSwiperItemCore {
        "deep"?: boolean;
        "itemId"?: string;
    }
    interface TaroSwitchCore {
        "checked"?: boolean;
        "color"?: string;
        "disabled"?: boolean;
        "name"?: string;
        "nativeProps"?: {};
        "onChange"?: (event: TaroSwitchCoreCustomEvent<any>) => void;
        "type"?: string;
    }
    interface TaroTabItemCore {
    }
    interface TaroTabbar {
        "conf"?: Conf;
        "onLongpress"?: (event: TaroTabbarCustomEvent<any>) => void;
    }
    interface TaroTabsCore {
    }
    interface TaroTextCore {
        "numberOfLines"?: number;
        "selectable"?: boolean;
        "space"?: keyof TextProps.TSpace;
        "userSelect"?: boolean;
    }
    interface TaroTextareaCore {
        "autoFocus"?: boolean;
        "autoHeight"?: boolean;
        "disabled"?: boolean;
        "maxlength"?: number;
        "name"?: string;
        "nativeProps"?: {};
        "onBlur"?: (event: TaroTextareaCoreCustomEvent<any>) => void;
        "onChange"?: (event: TaroTextareaCoreCustomEvent<any>) => void;
        "onConfirm"?: (event: TaroTextareaCoreCustomEvent<any>) => void;
        "onFocus"?: (event: TaroTextareaCoreCustomEvent<any>) => void;
        "onInput"?: (event: TaroTextareaCoreCustomEvent<any>) => void;
        "onKeydown"?: (event: TaroTextareaCoreCustomEvent<any>) => void;
        "onLinechange"?: (event: TaroTextareaCoreCustomEvent<any>) => void;
        "placeholder"?: string;
        "value"?: string;
    }
    interface TaroVideoControl {
        "controls"?: boolean;
        "currentTime"?: number;
        "duration"?: number;
        "isPlaying"?: boolean;
        "pauseFunc"?: () => void;
        "playFunc"?: () => void;
        "seekFunc"?: (position: number) => void;
        "showPlayBtn"?: boolean;
        "showProgress"?: boolean;
    }
    interface TaroVideoCore {
        /**
          * 是否自动播放
         */
        "autoplay"?: boolean;
        /**
          * 是否显示默认播放控件（播放/暂停按钮、播放进度、时间）
         */
        "controls"?: boolean;
        /**
          * 是否显示弹幕按钮
         */
        "danmuBtn"?: boolean;
        /**
          * 弹幕列表
         */
        "danmuList"?: [];
        /**
          * 指定视频时长
         */
        "duration"?: number;
        /**
          * 是否展示弹幕
         */
        "enableDanmu"?: boolean;
        /**
          * 是否开启播放手势，即双击切换播放/暂停
         */
        "enablePlayGesture"?: boolean;
        /**
          * 是否开启控制进度的手势
         */
        "enableProgressGesture"?: boolean;
        /**
          * 指定视频初始播放位置
         */
        "initialTime"?: number;
        /**
          * 是否循环播放
         */
        "loop"?: boolean;
        /**
          * 是否静音播放
         */
        "muted"?: boolean;
        "nativeProps"?: {};
        /**
          * 当视频大小与 video 容器大小不一致时，视频的表现形式
         */
        "objectFit"?: 'contain' | 'fill' | 'cover';
        "onEnded"?: (event: TaroVideoCoreCustomEvent<any>) => void;
        "onError"?: (event: TaroVideoCoreCustomEvent<any>) => void;
        "onFullscreenchange"?: (event: TaroVideoCoreCustomEvent<any>) => void;
        "onLoadedmetadata"?: (event: TaroVideoCoreCustomEvent<any>) => void;
        "onPause"?: (event: TaroVideoCoreCustomEvent<any>) => void;
        "onPlay"?: (event: TaroVideoCoreCustomEvent<any>) => void;
        "onProgress"?: (event: TaroVideoCoreCustomEvent<any>) => void;
        "onTimeupdate"?: (event: TaroVideoCoreCustomEvent<any>) => void;
        /**
          * 视频封面的图片网络资源地址或云文件ID（2.3.0）。若 controls 属性值为 false 则设置 poster 无效
         */
        "poster"?: string;
        /**
          * 是否显示视频中间的播放按钮
         */
        "showCenterPlayBtn"?: boolean;
        /**
          * 是否显示全屏按钮
         */
        "showFullscreenBtn"?: boolean;
        /**
          * 是否显示静音按钮
         */
        "showMuteBtn"?: boolean;
        /**
          * 是否显示视频底部控制栏的播放按钮
         */
        "showPlayBtn"?: boolean;
        /**
          * 若不设置，宽度大于 240 时才会显示
         */
        "showProgress"?: boolean;
        /**
          * 要播放视频的资源地址
         */
        "src"?: string;
        /**
          * 在非全屏模式下，是否开启亮度与音量调节手势
         */
        "vslideGesture"?: boolean;
        /**
          * 在全屏模式下，是否开启亮度与音量调节手势
         */
        "vslideGestureInFullscreen"?: boolean;
    }
    interface TaroVideoDanmu {
        "enable"?: boolean;
    }
    interface TaroViewCore {
        "animation"?: string;
        "hoverClass"?: string;
        "hoverStartTime"?: number;
        "hoverStayTime"?: number;
        "onLongpress"?: (event: TaroViewCoreCustomEvent<any>) => void;
    }
    interface TaroVoipRoomCore {
    }
    interface TaroWebViewCore {
        "onError"?: (event: TaroWebViewCoreCustomEvent<any>) => void;
        "onLoad"?: (event: TaroWebViewCoreCustomEvent<any>) => void;
        "src"?: string;
    }
    interface IntrinsicElements {
        "taro-ad-core": TaroAdCore;
        "taro-ad-custom-core": TaroAdCustomCore;
        "taro-animation-video-core": TaroAnimationVideoCore;
        "taro-animation-view-core": TaroAnimationViewCore;
        "taro-ar-camera-core": TaroArCameraCore;
        "taro-audio-core": TaroAudioCore;
        "taro-aweme-data-core": TaroAwemeDataCore;
        "taro-block-core": TaroBlockCore;
        "taro-button-core": TaroButtonCore;
        "taro-camera-core": TaroCameraCore;
        "taro-canvas-core": TaroCanvasCore;
        "taro-channel-live-core": TaroChannelLiveCore;
        "taro-channel-video-core": TaroChannelVideoCore;
        "taro-checkbox-core": TaroCheckboxCore;
        "taro-checkbox-group-core": TaroCheckboxGroupCore;
        "taro-comment-detail-core": TaroCommentDetailCore;
        "taro-comment-list-core": TaroCommentListCore;
        "taro-contact-button-core": TaroContactButtonCore;
        "taro-cover-image-core": TaroCoverImageCore;
        "taro-cover-view-core": TaroCoverViewCore;
        "taro-custom-wrapper-core": TaroCustomWrapperCore;
        "taro-editor-core": TaroEditorCore;
        "taro-follow-swan-core": TaroFollowSwanCore;
        "taro-form-core": TaroFormCore;
        "taro-functional-page-navigator-core": TaroFunctionalPageNavigatorCore;
        "taro-grid-view-core": TaroGridViewCore;
        "taro-icon-core": TaroIconCore;
        "taro-image-core": TaroImageCore;
        "taro-inline-payment-panel-core": TaroInlinePaymentPanelCore;
        "taro-input-core": TaroInputCore;
        "taro-keyboard-accessory-core": TaroKeyboardAccessoryCore;
        "taro-label-core": TaroLabelCore;
        "taro-lifestyle-core": TaroLifestyleCore;
        "taro-like-core": TaroLikeCore;
        "taro-list-view-core": TaroListViewCore;
        "taro-live-player-core": TaroLivePlayerCore;
        "taro-live-pusher-core": TaroLivePusherCore;
        "taro-login-core": TaroLoginCore;
        "taro-lottie-core": TaroLottieCore;
        "taro-map-core": TaroMapCore;
        "taro-match-media-core": TaroMatchMediaCore;
        "taro-movable-area-core": TaroMovableAreaCore;
        "taro-movable-view-core": TaroMovableViewCore;
        "taro-native-slot-core": TaroNativeSlotCore;
        "taro-navigation-bar-core": TaroNavigationBarCore;
        "taro-navigator-core": TaroNavigatorCore;
        "taro-official-account-core": TaroOfficialAccountCore;
        "taro-open-data-core": TaroOpenDataCore;
        "taro-page-container-core": TaroPageContainerCore;
        "taro-page-meta-core": TaroPageMetaCore;
        "taro-picker-core": TaroPickerCore;
        "taro-picker-group": TaroPickerGroup;
        "taro-picker-view-column-core": TaroPickerViewColumnCore;
        "taro-picker-view-core": TaroPickerViewCore;
        "taro-progress-core": TaroProgressCore;
        "taro-pull-to-refresh-core": TaroPullToRefreshCore;
        "taro-radio-core": TaroRadioCore;
        "taro-radio-group-core": TaroRadioGroupCore;
        "taro-rich-text-core": TaroRichTextCore;
        "taro-root-portal-core": TaroRootPortalCore;
        "taro-rtc-room-core": TaroRtcRoomCore;
        "taro-rtc-room-item-core": TaroRtcRoomItemCore;
        "taro-scroll-view-core": TaroScrollViewCore;
        "taro-share-element-core": TaroShareElementCore;
        "taro-slider-core": TaroSliderCore;
        "taro-slot-core": TaroSlotCore;
        "taro-snapshot-core": TaroSnapshotCore;
        "taro-sticky-header-core": TaroStickyHeaderCore;
        "taro-sticky-section-core": TaroStickySectionCore;
        "taro-swiper-core": TaroSwiperCore;
        "taro-swiper-item-core": TaroSwiperItemCore;
        "taro-switch-core": TaroSwitchCore;
        "taro-tab-item-core": TaroTabItemCore;
        "taro-tabbar": TaroTabbar;
        "taro-tabs-core": TaroTabsCore;
        "taro-text-core": TaroTextCore;
        "taro-textarea-core": TaroTextareaCore;
        "taro-video-control": TaroVideoControl;
        "taro-video-core": TaroVideoCore;
        "taro-video-danmu": TaroVideoDanmu;
        "taro-view-core": TaroViewCore;
        "taro-voip-room-core": TaroVoipRoomCore;
        "taro-web-view-core": TaroWebViewCore;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "taro-ad-core": LocalJSX.TaroAdCore & JSXBase.HTMLAttributes<HTMLTaroAdCoreElement>;
            "taro-ad-custom-core": LocalJSX.TaroAdCustomCore & JSXBase.HTMLAttributes<HTMLTaroAdCustomCoreElement>;
            "taro-animation-video-core": LocalJSX.TaroAnimationVideoCore & JSXBase.HTMLAttributes<HTMLTaroAnimationVideoCoreElement>;
            "taro-animation-view-core": LocalJSX.TaroAnimationViewCore & JSXBase.HTMLAttributes<HTMLTaroAnimationViewCoreElement>;
            "taro-ar-camera-core": LocalJSX.TaroArCameraCore & JSXBase.HTMLAttributes<HTMLTaroArCameraCoreElement>;
            "taro-audio-core": LocalJSX.TaroAudioCore & JSXBase.HTMLAttributes<HTMLTaroAudioCoreElement>;
            "taro-aweme-data-core": LocalJSX.TaroAwemeDataCore & JSXBase.HTMLAttributes<HTMLTaroAwemeDataCoreElement>;
            "taro-block-core": LocalJSX.TaroBlockCore & JSXBase.HTMLAttributes<HTMLTaroBlockCoreElement>;
            "taro-button-core": LocalJSX.TaroButtonCore & JSXBase.HTMLAttributes<HTMLTaroButtonCoreElement>;
            "taro-camera-core": LocalJSX.TaroCameraCore & JSXBase.HTMLAttributes<HTMLTaroCameraCoreElement>;
            "taro-canvas-core": LocalJSX.TaroCanvasCore & JSXBase.HTMLAttributes<HTMLTaroCanvasCoreElement>;
            "taro-channel-live-core": LocalJSX.TaroChannelLiveCore & JSXBase.HTMLAttributes<HTMLTaroChannelLiveCoreElement>;
            "taro-channel-video-core": LocalJSX.TaroChannelVideoCore & JSXBase.HTMLAttributes<HTMLTaroChannelVideoCoreElement>;
            "taro-checkbox-core": LocalJSX.TaroCheckboxCore & JSXBase.HTMLAttributes<HTMLTaroCheckboxCoreElement>;
            "taro-checkbox-group-core": LocalJSX.TaroCheckboxGroupCore & JSXBase.HTMLAttributes<HTMLTaroCheckboxGroupCoreElement>;
            "taro-comment-detail-core": LocalJSX.TaroCommentDetailCore & JSXBase.HTMLAttributes<HTMLTaroCommentDetailCoreElement>;
            "taro-comment-list-core": LocalJSX.TaroCommentListCore & JSXBase.HTMLAttributes<HTMLTaroCommentListCoreElement>;
            "taro-contact-button-core": LocalJSX.TaroContactButtonCore & JSXBase.HTMLAttributes<HTMLTaroContactButtonCoreElement>;
            "taro-cover-image-core": LocalJSX.TaroCoverImageCore & JSXBase.HTMLAttributes<HTMLTaroCoverImageCoreElement>;
            "taro-cover-view-core": LocalJSX.TaroCoverViewCore & JSXBase.HTMLAttributes<HTMLTaroCoverViewCoreElement>;
            "taro-custom-wrapper-core": LocalJSX.TaroCustomWrapperCore & JSXBase.HTMLAttributes<HTMLTaroCustomWrapperCoreElement>;
            "taro-editor-core": LocalJSX.TaroEditorCore & JSXBase.HTMLAttributes<HTMLTaroEditorCoreElement>;
            "taro-follow-swan-core": LocalJSX.TaroFollowSwanCore & JSXBase.HTMLAttributes<HTMLTaroFollowSwanCoreElement>;
            "taro-form-core": LocalJSX.TaroFormCore & JSXBase.HTMLAttributes<HTMLTaroFormCoreElement>;
            "taro-functional-page-navigator-core": LocalJSX.TaroFunctionalPageNavigatorCore & JSXBase.HTMLAttributes<HTMLTaroFunctionalPageNavigatorCoreElement>;
            "taro-grid-view-core": LocalJSX.TaroGridViewCore & JSXBase.HTMLAttributes<HTMLTaroGridViewCoreElement>;
            "taro-icon-core": LocalJSX.TaroIconCore & JSXBase.HTMLAttributes<HTMLTaroIconCoreElement>;
            "taro-image-core": LocalJSX.TaroImageCore & JSXBase.HTMLAttributes<HTMLTaroImageCoreElement>;
            "taro-inline-payment-panel-core": LocalJSX.TaroInlinePaymentPanelCore & JSXBase.HTMLAttributes<HTMLTaroInlinePaymentPanelCoreElement>;
            "taro-input-core": LocalJSX.TaroInputCore & JSXBase.HTMLAttributes<HTMLTaroInputCoreElement>;
            "taro-keyboard-accessory-core": LocalJSX.TaroKeyboardAccessoryCore & JSXBase.HTMLAttributes<HTMLTaroKeyboardAccessoryCoreElement>;
            "taro-label-core": LocalJSX.TaroLabelCore & JSXBase.HTMLAttributes<HTMLTaroLabelCoreElement>;
            "taro-lifestyle-core": LocalJSX.TaroLifestyleCore & JSXBase.HTMLAttributes<HTMLTaroLifestyleCoreElement>;
            "taro-like-core": LocalJSX.TaroLikeCore & JSXBase.HTMLAttributes<HTMLTaroLikeCoreElement>;
            "taro-list-view-core": LocalJSX.TaroListViewCore & JSXBase.HTMLAttributes<HTMLTaroListViewCoreElement>;
            "taro-live-player-core": LocalJSX.TaroLivePlayerCore & JSXBase.HTMLAttributes<HTMLTaroLivePlayerCoreElement>;
            "taro-live-pusher-core": LocalJSX.TaroLivePusherCore & JSXBase.HTMLAttributes<HTMLTaroLivePusherCoreElement>;
            "taro-login-core": LocalJSX.TaroLoginCore & JSXBase.HTMLAttributes<HTMLTaroLoginCoreElement>;
            "taro-lottie-core": LocalJSX.TaroLottieCore & JSXBase.HTMLAttributes<HTMLTaroLottieCoreElement>;
            "taro-map-core": LocalJSX.TaroMapCore & JSXBase.HTMLAttributes<HTMLTaroMapCoreElement>;
            "taro-match-media-core": LocalJSX.TaroMatchMediaCore & JSXBase.HTMLAttributes<HTMLTaroMatchMediaCoreElement>;
            "taro-movable-area-core": LocalJSX.TaroMovableAreaCore & JSXBase.HTMLAttributes<HTMLTaroMovableAreaCoreElement>;
            "taro-movable-view-core": LocalJSX.TaroMovableViewCore & JSXBase.HTMLAttributes<HTMLTaroMovableViewCoreElement>;
            "taro-native-slot-core": LocalJSX.TaroNativeSlotCore & JSXBase.HTMLAttributes<HTMLTaroNativeSlotCoreElement>;
            "taro-navigation-bar-core": LocalJSX.TaroNavigationBarCore & JSXBase.HTMLAttributes<HTMLTaroNavigationBarCoreElement>;
            /**
             * TODO: 参数还需要进一步细化对齐
             * Navigator组件
             * https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html
             */
            "taro-navigator-core": LocalJSX.TaroNavigatorCore & JSXBase.HTMLAttributes<HTMLTaroNavigatorCoreElement>;
            "taro-official-account-core": LocalJSX.TaroOfficialAccountCore & JSXBase.HTMLAttributes<HTMLTaroOfficialAccountCoreElement>;
            "taro-open-data-core": LocalJSX.TaroOpenDataCore & JSXBase.HTMLAttributes<HTMLTaroOpenDataCoreElement>;
            "taro-page-container-core": LocalJSX.TaroPageContainerCore & JSXBase.HTMLAttributes<HTMLTaroPageContainerCoreElement>;
            "taro-page-meta-core": LocalJSX.TaroPageMetaCore & JSXBase.HTMLAttributes<HTMLTaroPageMetaCoreElement>;
            "taro-picker-core": LocalJSX.TaroPickerCore & JSXBase.HTMLAttributes<HTMLTaroPickerCoreElement>;
            "taro-picker-group": LocalJSX.TaroPickerGroup & JSXBase.HTMLAttributes<HTMLTaroPickerGroupElement>;
            "taro-picker-view-column-core": LocalJSX.TaroPickerViewColumnCore & JSXBase.HTMLAttributes<HTMLTaroPickerViewColumnCoreElement>;
            "taro-picker-view-core": LocalJSX.TaroPickerViewCore & JSXBase.HTMLAttributes<HTMLTaroPickerViewCoreElement>;
            "taro-progress-core": LocalJSX.TaroProgressCore & JSXBase.HTMLAttributes<HTMLTaroProgressCoreElement>;
            "taro-pull-to-refresh-core": LocalJSX.TaroPullToRefreshCore & JSXBase.HTMLAttributes<HTMLTaroPullToRefreshCoreElement>;
            "taro-radio-core": LocalJSX.TaroRadioCore & JSXBase.HTMLAttributes<HTMLTaroRadioCoreElement>;
            "taro-radio-group-core": LocalJSX.TaroRadioGroupCore & JSXBase.HTMLAttributes<HTMLTaroRadioGroupCoreElement>;
            "taro-rich-text-core": LocalJSX.TaroRichTextCore & JSXBase.HTMLAttributes<HTMLTaroRichTextCoreElement>;
            "taro-root-portal-core": LocalJSX.TaroRootPortalCore & JSXBase.HTMLAttributes<HTMLTaroRootPortalCoreElement>;
            "taro-rtc-room-core": LocalJSX.TaroRtcRoomCore & JSXBase.HTMLAttributes<HTMLTaroRtcRoomCoreElement>;
            "taro-rtc-room-item-core": LocalJSX.TaroRtcRoomItemCore & JSXBase.HTMLAttributes<HTMLTaroRtcRoomItemCoreElement>;
            "taro-scroll-view-core": LocalJSX.TaroScrollViewCore & JSXBase.HTMLAttributes<HTMLTaroScrollViewCoreElement>;
            "taro-share-element-core": LocalJSX.TaroShareElementCore & JSXBase.HTMLAttributes<HTMLTaroShareElementCoreElement>;
            "taro-slider-core": LocalJSX.TaroSliderCore & JSXBase.HTMLAttributes<HTMLTaroSliderCoreElement>;
            "taro-slot-core": LocalJSX.TaroSlotCore & JSXBase.HTMLAttributes<HTMLTaroSlotCoreElement>;
            "taro-snapshot-core": LocalJSX.TaroSnapshotCore & JSXBase.HTMLAttributes<HTMLTaroSnapshotCoreElement>;
            "taro-sticky-header-core": LocalJSX.TaroStickyHeaderCore & JSXBase.HTMLAttributes<HTMLTaroStickyHeaderCoreElement>;
            "taro-sticky-section-core": LocalJSX.TaroStickySectionCore & JSXBase.HTMLAttributes<HTMLTaroStickySectionCoreElement>;
            "taro-swiper-core": LocalJSX.TaroSwiperCore & JSXBase.HTMLAttributes<HTMLTaroSwiperCoreElement>;
            "taro-swiper-item-core": LocalJSX.TaroSwiperItemCore & JSXBase.HTMLAttributes<HTMLTaroSwiperItemCoreElement>;
            "taro-switch-core": LocalJSX.TaroSwitchCore & JSXBase.HTMLAttributes<HTMLTaroSwitchCoreElement>;
            "taro-tab-item-core": LocalJSX.TaroTabItemCore & JSXBase.HTMLAttributes<HTMLTaroTabItemCoreElement>;
            "taro-tabbar": LocalJSX.TaroTabbar & JSXBase.HTMLAttributes<HTMLTaroTabbarElement>;
            "taro-tabs-core": LocalJSX.TaroTabsCore & JSXBase.HTMLAttributes<HTMLTaroTabsCoreElement>;
            "taro-text-core": LocalJSX.TaroTextCore & JSXBase.HTMLAttributes<HTMLTaroTextCoreElement>;
            "taro-textarea-core": LocalJSX.TaroTextareaCore & JSXBase.HTMLAttributes<HTMLTaroTextareaCoreElement>;
            "taro-video-control": LocalJSX.TaroVideoControl & JSXBase.HTMLAttributes<HTMLTaroVideoControlElement>;
            "taro-video-core": LocalJSX.TaroVideoCore & JSXBase.HTMLAttributes<HTMLTaroVideoCoreElement>;
            "taro-video-danmu": LocalJSX.TaroVideoDanmu & JSXBase.HTMLAttributes<HTMLTaroVideoDanmuElement>;
            "taro-view-core": LocalJSX.TaroViewCore & JSXBase.HTMLAttributes<HTMLTaroViewCoreElement>;
            "taro-voip-room-core": LocalJSX.TaroVoipRoomCore & JSXBase.HTMLAttributes<HTMLTaroVoipRoomCoreElement>;
            "taro-web-view-core": LocalJSX.TaroWebViewCore & JSXBase.HTMLAttributes<HTMLTaroWebViewCoreElement>;
        }
    }
}
