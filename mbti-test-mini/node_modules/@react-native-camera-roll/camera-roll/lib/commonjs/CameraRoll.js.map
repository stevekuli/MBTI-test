{"version":3,"names":["GROUP_TYPES_OPTIONS","Album","All","Event","Faces","Library","PhotoStream","SavedPhotos","ASSET_TYPE_OPTIONS","Videos","Photos","CameraRoll","deletePhotos","photoUris","RNCCameraRoll","save","tag","options","type","album","Error","fileExtension","split","slice","indexOf","saveToCameraRoll","console","warn","getAlbums","params","assetType","getParamsWithDefaults","newParams","undefined","groupTypes","Platform","OS","getPhotos","iosGetImageDataById","internalID","convertHeicImages","conversionOption","getPhotoByInternalID"],"sources":["CameraRoll.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport {Platform} from 'react-native';\nimport RNCCameraRoll from './nativeInterface';\n\nconst GROUP_TYPES_OPTIONS = {\n  Album: 'Album',\n  All: 'All', // default\n  Event: 'Event',\n  Faces: 'Faces',\n  Library: 'Library',\n  PhotoStream: 'PhotoStream',\n  SavedPhotos: 'SavedPhotos',\n};\n\nconst ASSET_TYPE_OPTIONS = {\n  All: 'All',\n  Videos: 'Videos',\n  Photos: 'Photos',\n};\n\nexport type GroupTypes =\n  | 'Album'\n  | 'All'\n  | 'Event'\n  | 'Faces'\n  | 'Library'\n  | 'PhotoStream'\n  | 'SavedPhotos';\n\nexport type Include =\n  | 'filename'\n  | 'fileSize'\n  | 'location'\n  | 'imageSize'\n  | 'playableDuration';\n\nexport type AssetType = 'All' | 'Videos' | 'Photos';\n\n/**\n * Shape of the param arg for the `getPhotos` function.\n */\nexport type GetPhotosParams = {\n  /**\n   * The number of photos wanted in reverse order of the photo application\n   * (i.e. most recent first).\n   */\n  first: number;\n\n  /**\n   * A cursor that matches `page_info { end_cursor }` returned from a previous\n   * call to `getPhotos`\n   */\n  after?: string;\n\n  /**\n   * Specifies which group types to filter the results to.\n   */\n  groupTypes?: GroupTypes;\n\n  /**\n   * Specifies filter on group names, like 'Recent Photos' or custom album\n   * titles.\n   */\n  groupName?: string;\n\n  /**\n   * Specifies filter on asset type\n   */\n  assetType?: AssetType;\n\n  /**\n   * Earliest time to get photos from. A timestamp in milliseconds. Exclusive.\n   */\n  fromTime?: number;\n\n  /**\n   * Latest time to get photos from. A timestamp in milliseconds. Inclusive.\n   */\n  toTime?: number;\n\n  /**\n   * Filter by mimetype (e.g. image/jpeg).\n   */\n  mimeTypes?: Array<string>;\n\n  /**\n   * Specific fields in the output that we want to include, even though they\n   * might have some performance impact.\n   */\n  include?: Include[];\n};\n\nexport type PhotoIdentifier = {\n  node: {\n    type: string;\n    group_name: string;\n    image: {\n      filename: string | null;\n      uri: string;\n      height: number;\n      width: number;\n      fileSize: number | null;\n      playableDuration: number;\n    };\n    timestamp: number;\n    location: {\n      latitude?: number;\n      longitude?: number;\n      altitude?: number;\n      heading?: number;\n      speed?: number;\n    } | null;\n  };\n};\n\nexport type PhotoConvertionOptions = {\n  convertHeicImages: boolean;\n};\n\nexport type PhotoIdentifiersPage = {\n  edges: Array<PhotoIdentifier>;\n  page_info: {\n    has_next_page: boolean;\n    start_cursor?: string;\n    end_cursor?: string;\n  };\n  limited?: boolean;\n};\n\nexport type SaveToCameraRollOptions = {\n  type?: 'photo' | 'video' | 'auto';\n  album?: string;\n};\n\nexport type GetAlbumsParams = {\n  assetType?: AssetType;\n};\n\nexport type Album = {\n  title: string;\n  count: number;\n};\n\n/**\n * `CameraRoll` provides access to the local camera roll or photo library.\n *\n * See https://facebook.github.io/react-native/docs/cameraroll.html\n */\nexport class CameraRoll {\n  static GroupTypesOptions = GROUP_TYPES_OPTIONS;\n  static AssetTypeOptions = ASSET_TYPE_OPTIONS;\n\n  /**\n   * On iOS: requests deletion of a set of photos from the camera roll.\n   * On Android: Deletes a set of photos from the camera roll.\n   *\n   */\n  static deletePhotos(photoUris: Array<string>): void {\n    return RNCCameraRoll.deletePhotos(photoUris);\n  }\n\n  /**\n   * Saves the photo or video to the camera roll or photo library.\n   *\n   */\n  static save(\n    tag: string,\n    options: SaveToCameraRollOptions = {},\n  ): Promise<string> {\n    let {type = 'auto'} = options;\n    const {album = ''} = options;\n    if (tag === '') throw new Error('tag must be a valid string');\n\n    if (type === 'auto') {\n      const fileExtension = tag.split('.').slice(-1)[0] ?? '';\n      if (['mov', 'mp4'].indexOf(fileExtension) >= 0) type = 'video';\n      else type = 'photo';\n    }\n    return RNCCameraRoll.saveToCameraRoll(tag, {type, album});\n  }\n\n  static saveToCameraRoll(\n    tag: string,\n    type?: 'photo' | 'video' | 'auto',\n  ): Promise<string> {\n    console.warn(\n      'CameraRoll.saveToCameraRoll(tag, type) is deprecated.  Use the save function instead',\n    );\n    return CameraRoll.save(tag, {type});\n  }\n  static getAlbums(\n    params: GetAlbumsParams = {assetType: 'All'},\n  ): Promise<Album[]> {\n    return RNCCameraRoll.getAlbums(params);\n  }\n\n  static getParamsWithDefaults(params: GetPhotosParams): GetPhotosParams {\n    const newParams = {...params};\n    if (newParams.assetType === undefined) newParams.assetType = 'All';\n\n    if (newParams.groupTypes === undefined && Platform.OS !== 'android')\n      newParams.groupTypes = 'All';\n\n    return newParams;\n  }\n\n  /**\n   * Returns a Promise with photo identifier objects from the local camera\n   * roll of the device matching shape defined by `getPhotosReturnChecker`.\n   *\n   * See https://facebook.github.io/react-native/docs/cameraroll.html#getphotos\n   */\n  static getPhotos(params: GetPhotosParams): Promise<PhotoIdentifiersPage> {\n    params = CameraRoll.getParamsWithDefaults(params);\n    return RNCCameraRoll.getPhotos(params);\n  }\n\n  /**\n   * Returns a Promise with photo internal path.\n   * if conversion is requested from HEIC then temporary file is created.\n   *\n   * @param internalID - PH photo internal ID.\n   * @param convertHeicImages - whether to convert or not heic images to JPEG.\n   * @returns Promise<PhotoIdentifier>\n   */\n  static iosGetImageDataById(\n    internalID: string,\n    convertHeicImages = false,\n  ): Promise<PhotoIdentifier> {\n    const conversionOption: PhotoConvertionOptions = {\n      convertHeicImages: convertHeicImages,\n    };\n    return RNCCameraRoll.getPhotoByInternalID(internalID, conversionOption);\n  }\n}\n"],"mappings":";;;;;;;AAMA;;AACA;;;;;;AAEA,MAAMA,mBAAmB,GAAG;EAC1BC,KAAK,EAAE,OADmB;EAE1BC,GAAG,EAAE,KAFqB;EAEd;EACZC,KAAK,EAAE,OAHmB;EAI1BC,KAAK,EAAE,OAJmB;EAK1BC,OAAO,EAAE,SALiB;EAM1BC,WAAW,EAAE,aANa;EAO1BC,WAAW,EAAE;AAPa,CAA5B;AAUA,MAAMC,kBAAkB,GAAG;EACzBN,GAAG,EAAE,KADoB;EAEzBO,MAAM,EAAE,QAFiB;EAGzBC,MAAM,EAAE;AAHiB,CAA3B;;AAiIA;AACA;AACA;AACA;AACA;AACO,MAAMC,UAAN,CAAiB;EAItB;AACF;AACA;AACA;AACA;EACqB,OAAZC,YAAY,CAACC,SAAD,EAAiC;IAClD,OAAOC,wBAAA,CAAcF,YAAd,CAA2BC,SAA3B,CAAP;EACD;EAED;AACF;AACA;AACA;;;EACa,OAAJE,IAAI,CACTC,GADS,EAGQ;IAAA,IADjBC,OACiB,uEADkB,EAClB;IACjB,IAAI;MAACC,IAAI,GAAG;IAAR,IAAkBD,OAAtB;IACA,MAAM;MAACE,KAAK,GAAG;IAAT,IAAeF,OAArB;IACA,IAAID,GAAG,KAAK,EAAZ,EAAgB,MAAM,IAAII,KAAJ,CAAU,4BAAV,CAAN;;IAEhB,IAAIF,IAAI,KAAK,MAAb,EAAqB;MACnB,MAAMG,aAAa,GAAGL,GAAG,CAACM,KAAJ,CAAU,GAAV,EAAeC,KAAf,CAAqB,CAAC,CAAtB,EAAyB,CAAzB,KAA+B,EAArD;MACA,IAAI,CAAC,KAAD,EAAQ,KAAR,EAAeC,OAAf,CAAuBH,aAAvB,KAAyC,CAA7C,EAAgDH,IAAI,GAAG,OAAP,CAAhD,KACKA,IAAI,GAAG,OAAP;IACN;;IACD,OAAOJ,wBAAA,CAAcW,gBAAd,CAA+BT,GAA/B,EAAoC;MAACE,IAAD;MAAOC;IAAP,CAApC,CAAP;EACD;;EAEsB,OAAhBM,gBAAgB,CACrBT,GADqB,EAErBE,IAFqB,EAGJ;IACjBQ,OAAO,CAACC,IAAR,CACE,sFADF;IAGA,OAAOhB,UAAU,CAACI,IAAX,CAAgBC,GAAhB,EAAqB;MAACE;IAAD,CAArB,CAAP;EACD;;EACe,OAATU,SAAS,GAEI;IAAA,IADlBC,MACkB,uEADQ;MAACC,SAAS,EAAE;IAAZ,CACR;IAClB,OAAOhB,wBAAA,CAAcc,SAAd,CAAwBC,MAAxB,CAAP;EACD;;EAE2B,OAArBE,qBAAqB,CAACF,MAAD,EAA2C;IACrE,MAAMG,SAAS,GAAG,EAAC,GAAGH;IAAJ,CAAlB;IACA,IAAIG,SAAS,CAACF,SAAV,KAAwBG,SAA5B,EAAuCD,SAAS,CAACF,SAAV,GAAsB,KAAtB;IAEvC,IAAIE,SAAS,CAACE,UAAV,KAAyBD,SAAzB,IAAsCE,qBAAA,CAASC,EAAT,KAAgB,SAA1D,EACEJ,SAAS,CAACE,UAAV,GAAuB,KAAvB;IAEF,OAAOF,SAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACkB,OAATK,SAAS,CAACR,MAAD,EAAyD;IACvEA,MAAM,GAAGlB,UAAU,CAACoB,qBAAX,CAAiCF,MAAjC,CAAT;IACA,OAAOf,wBAAA,CAAcuB,SAAd,CAAwBR,MAAxB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EAC4B,OAAnBS,mBAAmB,CACxBC,UADwB,EAGE;IAAA,IAD1BC,iBAC0B,uEADN,KACM;IAC1B,MAAMC,gBAAwC,GAAG;MAC/CD,iBAAiB,EAAEA;IAD4B,CAAjD;IAGA,OAAO1B,wBAAA,CAAc4B,oBAAd,CAAmCH,UAAnC,EAA+CE,gBAA/C,CAAP;EACD;;AArFqB;;;;gBAAX9B,U,uBACgBX,mB;;gBADhBW,U,sBAEeH,kB"}