{"version":3,"names":["setRNConfiguration","_config","Error","requestAuthorization","_success","_error","getCurrentPosition","success","error","options","navigator","geolocation","console","watchPosition","clearWatch","watchID","stopObserving"],"sources":["implementation.ts"],"sourcesContent":["/**\n * Copyright (c) React Native Community\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport type {\n  GeolocationOptions,\n  GeolocationConfiguration,\n  GeolocationResponse,\n  GeolocationError,\n} from './NativeRNCGeolocation';\n\nexport function setRNConfiguration(_config: GeolocationConfiguration) {\n  throw new Error('setRNConfiguration is not supported by the browser');\n}\n\nexport function requestAuthorization(\n  _success?: () => void,\n  _error?: (error: GeolocationError) => void\n) {\n  throw new Error('requestAuthorization is not supported by the browser');\n}\n\nexport async function getCurrentPosition(\n  success: (position: GeolocationResponse) => void,\n  error?: (error: GeolocationError) => void,\n  options?: GeolocationOptions\n) {\n  if (typeof success !== 'function') {\n    throw new Error('success callback must be a function');\n  } else if (!navigator || !navigator.geolocation) {\n    console.error('Navigator is undefined');\n    return;\n  }\n  navigator.geolocation.getCurrentPosition(success, error, options);\n}\n\nexport function watchPosition(\n  success: (position: GeolocationResponse) => void,\n  error?: (error: GeolocationError) => void,\n  options?: GeolocationOptions\n): number {\n  if (typeof success !== 'function') {\n    throw new Error('success callback must be a function');\n  } else if (!navigator || !navigator.geolocation) {\n    throw new Error('Navigator is undefined');\n  }\n  return navigator.geolocation.watchPosition(success, error, options);\n}\n\nexport function clearWatch(watchID: number) {\n  if (!navigator || !navigator.geolocation) {\n    console.error('Navigator is undefined');\n    return;\n  }\n  navigator.geolocation.clearWatch(watchID);\n}\n\nexport function stopObserving() {\n  throw new Error('stopObserving is not supported by the browser');\n}\n"],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASO,SAASA,kBAAkBA,CAACC,OAAiC,EAAE;EACpE,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;AACvE;AAEO,SAASC,oBAAoBA,CAClCC,QAAqB,EACrBC,MAA0C,EAC1C;EACA,MAAM,IAAIH,KAAK,CAAC,sDAAsD,CAAC;AACzE;AAEO,eAAeI,kBAAkBA,CACtCC,OAAgD,EAChDC,KAAyC,EACzCC,OAA4B,EAC5B;EACA,IAAI,OAAOF,OAAO,KAAK,UAAU,EAAE;IACjC,MAAM,IAAIL,KAAK,CAAC,qCAAqC,CAAC;EACxD,CAAC,MAAM,IAAI,CAACQ,SAAS,IAAI,CAACA,SAAS,CAACC,WAAW,EAAE;IAC/CC,OAAO,CAACJ,KAAK,CAAC,wBAAwB,CAAC;IACvC;EACF;EACAE,SAAS,CAACC,WAAW,CAACL,kBAAkB,CAACC,OAAO,EAAEC,KAAK,EAAEC,OAAO,CAAC;AACnE;AAEO,SAASI,aAAaA,CAC3BN,OAAgD,EAChDC,KAAyC,EACzCC,OAA4B,EACpB;EACR,IAAI,OAAOF,OAAO,KAAK,UAAU,EAAE;IACjC,MAAM,IAAIL,KAAK,CAAC,qCAAqC,CAAC;EACxD,CAAC,MAAM,IAAI,CAACQ,SAAS,IAAI,CAACA,SAAS,CAACC,WAAW,EAAE;IAC/C,MAAM,IAAIT,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EACA,OAAOQ,SAAS,CAACC,WAAW,CAACE,aAAa,CAACN,OAAO,EAAEC,KAAK,EAAEC,OAAO,CAAC;AACrE;AAEO,SAASK,UAAUA,CAACC,OAAe,EAAE;EAC1C,IAAI,CAACL,SAAS,IAAI,CAACA,SAAS,CAACC,WAAW,EAAE;IACxCC,OAAO,CAACJ,KAAK,CAAC,wBAAwB,CAAC;IACvC;EACF;EACAE,SAAS,CAACC,WAAW,CAACG,UAAU,CAACC,OAAO,CAAC;AAC3C;AAEO,SAASC,aAAaA,CAAA,EAAG;EAC9B,MAAM,IAAId,KAAK,CAAC,+CAA+C,CAAC;AAClE"}